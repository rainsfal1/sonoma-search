"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@elastic";
exports.ids = ["vendor-chunks/@elastic"];
exports.modules = {

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nconst {\n  Diagnostic,\n  Transport,\n  WeightedConnectionPool,\n  ClusterConnectionPool,\n  BaseConnectionPool,\n  CloudConnectionPool,\n  BaseConnection,\n  HttpConnection,\n  UndiciConnection,\n  Serializer,\n  errors,\n  events\n} = __webpack_require__(/*! @elastic/transport */ \"(rsc)/./node_modules/@elastic/transport/index.js\")\n\nconst { default: Client } = __webpack_require__(/*! ./lib/client */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/client.js\")\nconst { default: SniffingTransport } = __webpack_require__(/*! ./lib/sniffingTransport */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/sniffingTransport.js\")\n\nmodule.exports = {\n  Client,\n  SniffingTransport,\n  Diagnostic,\n  Transport,\n  WeightedConnectionPool,\n  ClusterConnectionPool,\n  BaseConnectionPool,\n  CloudConnectionPool,\n  BaseConnection,\n  HttpConnection,\n  UndiciConnection,\n  Serializer,\n  errors,\n  events\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLDRFQUFvQjs7QUFFaEMsUUFBUSxrQkFBa0IsRUFBRSxtQkFBTyxDQUFDLCtFQUFjO0FBQ2xELFFBQVEsNkJBQTZCLEVBQUUsbUJBQU8sQ0FBQyxxR0FBeUI7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHtcbiAgRGlhZ25vc3RpYyxcbiAgVHJhbnNwb3J0LFxuICBXZWlnaHRlZENvbm5lY3Rpb25Qb29sLFxuICBDbHVzdGVyQ29ubmVjdGlvblBvb2wsXG4gIEJhc2VDb25uZWN0aW9uUG9vbCxcbiAgQ2xvdWRDb25uZWN0aW9uUG9vbCxcbiAgQmFzZUNvbm5lY3Rpb24sXG4gIEh0dHBDb25uZWN0aW9uLFxuICBVbmRpY2lDb25uZWN0aW9uLFxuICBTZXJpYWxpemVyLFxuICBlcnJvcnMsXG4gIGV2ZW50c1xufSA9IHJlcXVpcmUoJ0BlbGFzdGljL3RyYW5zcG9ydCcpXG5cbmNvbnN0IHsgZGVmYXVsdDogQ2xpZW50IH0gPSByZXF1aXJlKCcuL2xpYi9jbGllbnQnKVxuY29uc3QgeyBkZWZhdWx0OiBTbmlmZmluZ1RyYW5zcG9ydCB9ID0gcmVxdWlyZSgnLi9saWIvc25pZmZpbmdUcmFuc3BvcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2xpZW50LFxuICBTbmlmZmluZ1RyYW5zcG9ydCxcbiAgRGlhZ25vc3RpYyxcbiAgVHJhbnNwb3J0LFxuICBXZWlnaHRlZENvbm5lY3Rpb25Qb29sLFxuICBDbHVzdGVyQ29ubmVjdGlvblBvb2wsXG4gIEJhc2VDb25uZWN0aW9uUG9vbCxcbiAgQ2xvdWRDb25uZWN0aW9uUG9vbCxcbiAgQmFzZUNvbm5lY3Rpb24sXG4gIEh0dHBDb25uZWN0aW9uLFxuICBVbmRpY2lDb25uZWN0aW9uLFxuICBTZXJpYWxpemVyLFxuICBlcnJvcnMsXG4gIGV2ZW50c1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/async_search.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/async_search.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass AsyncSearch {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async delete(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_async_search/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'async_search.delete',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_async_search/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'async_search.get',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async status(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_async_search/status/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'async_search.status',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async submit(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['aggregations', 'aggs', 'collapse', 'explain', 'ext', 'from', 'highlight', 'track_total_hits', 'indices_boost', 'docvalue_fields', 'knn', 'min_score', 'post_filter', 'profile', 'query', 'rescore', 'script_fields', 'search_after', 'size', 'slice', 'sort', '_source', 'fields', 'suggest', 'terminate_after', 'timeout', 'track_scores', 'version', 'seq_no_primary_term', 'stored_fields', 'pit', 'runtime_mappings', 'stats'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                if (key === 'sort' && typeof params[key] === 'string' && params[key].includes(':')) { // eslint-disable-line\n                    // @ts-expect-error\n                    querystring[key] = params[key];\n                }\n                else {\n                    // @ts-expect-error\n                    body[key] = params[key];\n                }\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.index.toString())}/_async_search`;\n        }\n        else {\n            method = 'POST';\n            path = '/_async_search';\n        }\n        const meta = {\n            name: 'async_search.submit',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = AsyncSearch;\n//# sourceMappingURL=async_search.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/async_search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/autoscaling.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/autoscaling.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Autoscaling {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteAutoscalingPolicy(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_autoscaling/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'autoscaling.delete_autoscaling_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAutoscalingCapacity(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_autoscaling/capacity';\n        const meta = {\n            name: 'autoscaling.get_autoscaling_capacity'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAutoscalingPolicy(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_autoscaling/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'autoscaling.get_autoscaling_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putAutoscalingPolicy(params, options) {\n        var _a;\n        const acceptedPath = ['name'];\n        const acceptedBody = ['policy'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_autoscaling/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'autoscaling.put_autoscaling_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Autoscaling;\n//# sourceMappingURL=autoscaling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9hdXRvc2NhbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDJDQUEyQztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywyQ0FBMkM7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywyQ0FBMkM7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvYXV0b3NjYWxpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEF1dG9zY2FsaW5nIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVBdXRvc2NhbGluZ1BvbGljeShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19hdXRvc2NhbGluZy9wb2xpY3kvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5hbWUudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdhdXRvc2NhbGluZy5kZWxldGVfYXV0b3NjYWxpbmdfcG9saWN5JyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHBhcmFtcy5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QXV0b3NjYWxpbmdDYXBhY2l0eShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fYXV0b3NjYWxpbmcvY2FwYWNpdHknO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ2F1dG9zY2FsaW5nLmdldF9hdXRvc2NhbGluZ19jYXBhY2l0eSdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRBdXRvc2NhbGluZ1BvbGljeShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19hdXRvc2NhbGluZy9wb2xpY3kvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5hbWUudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdhdXRvc2NhbGluZy5nZXRfYXV0b3NjYWxpbmdfcG9saWN5JyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHBhcmFtcy5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgcHV0QXV0b3NjYWxpbmdQb2xpY3kocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsncG9saWN5J107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgbGV0IGJvZHkgPSAoX2EgPSBwYXJhbXMuYm9keSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBib2R5ID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fYXV0b3NjYWxpbmcvcG9saWN5LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5uYW1lLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnYXV0b3NjYWxpbmcucHV0X2F1dG9zY2FsaW5nX3BvbGljeScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXV0b3NjYWxpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRvc2NhbGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/autoscaling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/bulk.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/bulk.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function BulkApi(params, options) {\n    var _a;\n    const acceptedPath = ['index'];\n    const acceptedBody = ['operations'];\n    const querystring = {};\n    // @ts-expect-error\n    let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            // @ts-expect-error\n            body = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = 'POST';\n        path = `/${encodeURIComponent(params.index.toString())}/_bulk`;\n    }\n    else {\n        method = 'POST';\n        path = '/_bulk';\n    }\n    const meta = {\n        name: 'bulk',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n}\nexports[\"default\"] = BulkApi;\n//# sourceMappingURL=bulk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9idWxrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGlEQUFpRDtBQUMzRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2J1bGsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEJ1bGtBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ29wZXJhdGlvbnMnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBsZXQgYm9keSA9IChfYSA9IHBhcmFtcy5ib2R5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIHBhdGggPSBgLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleC50b1N0cmluZygpKX0vX2J1bGtgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBwYXRoID0gJy9fYnVsayc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdidWxrJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYnVsa0JvZHk6IGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCdWxrQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVsay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/bulk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/capabilities.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/capabilities.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function CapabilitiesApi(params, options) {\n    const acceptedPath = [];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = '/_capabilities';\n    const meta = {\n        name: 'capabilities'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = CapabilitiesApi;\n//# sourceMappingURL=capabilities.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9jYXBhYmlsaXRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvY2FwYWJpbGl0aWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBDYXBhYmlsaXRpZXNBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9ICcvX2NhcGFiaWxpdGllcyc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2NhcGFiaWxpdGllcydcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENhcGFiaWxpdGllc0FwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcGFiaWxpdGllcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/capabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cat.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/cat.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Cat {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async aliases(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_cat/aliases/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/aliases';\n        }\n        const meta = {\n            name: 'cat.aliases',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async allocation(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_cat/allocation/${encodeURIComponent(params.node_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/allocation';\n        }\n        const meta = {\n            name: 'cat.allocation',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async componentTemplates(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_cat/component_templates/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/component_templates';\n        }\n        const meta = {\n            name: 'cat.component_templates',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async count(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cat/count/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/count';\n        }\n        const meta = {\n            name: 'cat.count',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async fielddata(params, options) {\n        const acceptedPath = ['fields'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.fields != null) {\n            method = 'GET';\n            path = `/_cat/fielddata/${encodeURIComponent(params.fields.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/fielddata';\n        }\n        const meta = {\n            name: 'cat.fielddata',\n            pathParts: {\n                fields: params.fields\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async health(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/health';\n        const meta = {\n            name: 'cat.health'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async help(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat';\n        const meta = {\n            name: 'cat.help'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async indices(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cat/indices/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/indices';\n        }\n        const meta = {\n            name: 'cat.indices',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async master(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/master';\n        const meta = {\n            name: 'cat.master'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async mlDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_cat/ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/ml/data_frame/analytics';\n        }\n        const meta = {\n            name: 'cat.ml_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async mlDatafeeds(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.datafeed_id != null) {\n            method = 'GET';\n            path = `/_cat/ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/ml/datafeeds';\n        }\n        const meta = {\n            name: 'cat.ml_datafeeds',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async mlJobs(params, options) {\n        const acceptedPath = ['job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null) {\n            method = 'GET';\n            path = `/_cat/ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/ml/anomaly_detectors';\n        }\n        const meta = {\n            name: 'cat.ml_jobs',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async mlTrainedModels(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.model_id != null) {\n            method = 'GET';\n            path = `/_cat/ml/trained_models/${encodeURIComponent(params.model_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/ml/trained_models';\n        }\n        const meta = {\n            name: 'cat.ml_trained_models',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async nodeattrs(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/nodeattrs';\n        const meta = {\n            name: 'cat.nodeattrs'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async nodes(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/nodes';\n        const meta = {\n            name: 'cat.nodes'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async pendingTasks(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/pending_tasks';\n        const meta = {\n            name: 'cat.pending_tasks'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async plugins(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/plugins';\n        const meta = {\n            name: 'cat.plugins'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async recovery(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cat/recovery/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/recovery';\n        }\n        const meta = {\n            name: 'cat.recovery',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async repositories(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/repositories';\n        const meta = {\n            name: 'cat.repositories'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async segments(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cat/segments/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/segments';\n        }\n        const meta = {\n            name: 'cat.segments',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async shards(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cat/shards/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/shards';\n        }\n        const meta = {\n            name: 'cat.shards',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async snapshots(params, options) {\n        const acceptedPath = ['repository'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.repository != null) {\n            method = 'GET';\n            path = `/_cat/snapshots/${encodeURIComponent(params.repository.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/snapshots';\n        }\n        const meta = {\n            name: 'cat.snapshots',\n            pathParts: {\n                repository: params.repository\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async tasks(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cat/tasks';\n        const meta = {\n            name: 'cat.tasks'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async templates(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_cat/templates/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/templates';\n        }\n        const meta = {\n            name: 'cat.templates',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async threadPool(params, options) {\n        const acceptedPath = ['thread_pool_patterns'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.thread_pool_patterns != null) {\n            method = 'GET';\n            path = `/_cat/thread_pool/${encodeURIComponent(params.thread_pool_patterns.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/thread_pool';\n        }\n        const meta = {\n            name: 'cat.thread_pool',\n            pathParts: {\n                thread_pool_patterns: params.thread_pool_patterns\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async transforms(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.transform_id != null) {\n            method = 'GET';\n            path = `/_cat/transforms/${encodeURIComponent(params.transform_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cat/transforms';\n        }\n        const meta = {\n            name: 'cat.transforms',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Cat;\n//# sourceMappingURL=cat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ccr.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ccr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ccr {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteAutoFollowPattern(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ccr/auto_follow/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'ccr.delete_auto_follow_pattern',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async follow(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['leader_index', 'max_outstanding_read_requests', 'max_outstanding_write_requests', 'max_read_request_operation_count', 'max_read_request_size', 'max_retry_delay', 'max_write_buffer_count', 'max_write_buffer_size', 'max_write_request_operation_count', 'max_write_request_size', 'read_poll_timeout', 'remote_cluster'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/follow`;\n        const meta = {\n            name: 'ccr.follow',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async followInfo(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/info`;\n        const meta = {\n            name: 'ccr.follow_info',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async followStats(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/stats`;\n        const meta = {\n            name: 'ccr.follow_stats',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async forgetFollower(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['follower_cluster', 'follower_index', 'follower_index_uuid', 'leader_remote_cluster'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/forget_follower`;\n        const meta = {\n            name: 'ccr.forget_follower',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAutoFollowPattern(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_ccr/auto_follow/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ccr/auto_follow';\n        }\n        const meta = {\n            name: 'ccr.get_auto_follow_pattern',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async pauseAutoFollowPattern(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ccr/auto_follow/${encodeURIComponent(params.name.toString())}/pause`;\n        const meta = {\n            name: 'ccr.pause_auto_follow_pattern',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async pauseFollow(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/pause_follow`;\n        const meta = {\n            name: 'ccr.pause_follow',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putAutoFollowPattern(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['remote_cluster', 'follow_index_pattern', 'leader_index_patterns', 'leader_index_exclusion_patterns', 'max_outstanding_read_requests', 'settings', 'max_outstanding_write_requests', 'read_poll_timeout', 'max_read_request_operation_count', 'max_read_request_size', 'max_retry_delay', 'max_write_buffer_count', 'max_write_buffer_size', 'max_write_request_operation_count', 'max_write_request_size'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ccr/auto_follow/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'ccr.put_auto_follow_pattern',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resumeAutoFollowPattern(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ccr/auto_follow/${encodeURIComponent(params.name.toString())}/resume`;\n        const meta = {\n            name: 'ccr.resume_auto_follow_pattern',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resumeFollow(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['max_outstanding_read_requests', 'max_outstanding_write_requests', 'max_read_request_operation_count', 'max_read_request_size', 'max_retry_delay', 'max_write_buffer_count', 'max_write_buffer_size', 'max_write_request_operation_count', 'max_write_request_size', 'read_poll_timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/resume_follow`;\n        const meta = {\n            name: 'ccr.resume_follow',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ccr/stats';\n        const meta = {\n            name: 'ccr.stats'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async unfollow(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ccr/unfollow`;\n        const meta = {\n            name: 'ccr.unfollow',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Ccr;\n//# sourceMappingURL=ccr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ccr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/clear_scroll.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/clear_scroll.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ClearScrollApi(params, options) {\n    const acceptedPath = [];\n    const acceptedBody = ['scroll_id'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'DELETE';\n    const path = '/_search/scroll';\n    const meta = {\n        name: 'clear_scroll',\n        pathParts: {\n            scroll_id: params.scroll_id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ClearScrollApi;\n//# sourceMappingURL=clear_scroll.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9jbGVhcl9zY3JvbGwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2NsZWFyX3Njcm9sbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gQ2xlYXJTY3JvbGxBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydzY3JvbGxfaWQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnREVMRVRFJztcbiAgICBjb25zdCBwYXRoID0gJy9fc2VhcmNoL3Njcm9sbCc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2NsZWFyX3Njcm9sbCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgc2Nyb2xsX2lkOiBwYXJhbXMuc2Nyb2xsX2lkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENsZWFyU2Nyb2xsQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xlYXJfc2Nyb2xsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/clear_scroll.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/close_point_in_time.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/close_point_in_time.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ClosePointInTimeApi(params, options) {\n    const acceptedPath = [];\n    const acceptedBody = ['id'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'DELETE';\n    const path = '/_pit';\n    const meta = {\n        name: 'close_point_in_time'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ClosePointInTimeApi;\n//# sourceMappingURL=close_point_in_time.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9jbG9zZV9wb2ludF9pbl90aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvY2xvc2VfcG9pbnRfaW5fdGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gQ2xvc2VQb2ludEluVGltZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2lkJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgY29uc3QgcGF0aCA9ICcvX3BpdCc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2Nsb3NlX3BvaW50X2luX3RpbWUnXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDbG9zZVBvaW50SW5UaW1lQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvc2VfcG9pbnRfaW5fdGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/close_point_in_time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cluster.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/cluster.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Cluster {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async allocationExplain(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['current_node', 'index', 'primary', 'shard'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_cluster/allocation/explain';\n        const meta = {\n            name: 'cluster.allocation_explain'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteComponentTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_component_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'cluster.delete_component_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteVotingConfigExclusions(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = '/_cluster/voting_config_exclusions';\n        const meta = {\n            name: 'cluster.delete_voting_config_exclusions'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async existsComponentTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'HEAD';\n        const path = `/_component_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'cluster.exists_component_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getComponentTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_component_template/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_component_template';\n        }\n        const meta = {\n            name: 'cluster.get_component_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSettings(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cluster/settings';\n        const meta = {\n            name: 'cluster.get_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async health(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/_cluster/health/${encodeURIComponent(params.index.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cluster/health';\n        }\n        const meta = {\n            name: 'cluster.health',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async info(params, options) {\n        const acceptedPath = ['target'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_info/${encodeURIComponent(params.target.toString())}`;\n        const meta = {\n            name: 'cluster.info',\n            pathParts: {\n                target: params.target\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async pendingTasks(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_cluster/pending_tasks';\n        const meta = {\n            name: 'cluster.pending_tasks'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postVotingConfigExclusions(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_cluster/voting_config_exclusions';\n        const meta = {\n            name: 'cluster.post_voting_config_exclusions'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putComponentTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['template', 'version', '_meta', 'deprecated'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_component_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'cluster.put_component_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putSettings(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['persistent', 'transient'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_cluster/settings';\n        const meta = {\n            name: 'cluster.put_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async remoteInfo(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_remote/info';\n        const meta = {\n            name: 'cluster.remote_info'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async reroute(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['commands'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_cluster/reroute';\n        const meta = {\n            name: 'cluster.reroute'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async state(params, options) {\n        const acceptedPath = ['metric', 'index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.metric != null && params.index != null) {\n            method = 'GET';\n            path = `/_cluster/state/${encodeURIComponent(params.metric.toString())}/${encodeURIComponent(params.index.toString())}`;\n        }\n        else if (params.metric != null) {\n            method = 'GET';\n            path = `/_cluster/state/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cluster/state';\n        }\n        const meta = {\n            name: 'cluster.state',\n            pathParts: {\n                metric: params.metric,\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_cluster/stats/nodes/${encodeURIComponent(params.node_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_cluster/stats';\n        }\n        const meta = {\n            name: 'cluster.stats',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Cluster;\n//# sourceMappingURL=cluster.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cluster.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/connector.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/connector.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Connector {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async checkIn(params, options) {\n        const acceptedPath = ['connector_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_check_in`;\n        const meta = {\n            name: 'connector.check_in',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async delete(params, options) {\n        const acceptedPath = ['connector_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}`;\n        const meta = {\n            name: 'connector.delete',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['connector_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}`;\n        const meta = {\n            name: 'connector.get',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async lastSync(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['last_access_control_sync_error', 'last_access_control_sync_scheduled_at', 'last_access_control_sync_status', 'last_deleted_document_count', 'last_incremental_sync_scheduled_at', 'last_indexed_document_count', 'last_seen', 'last_sync_error', 'last_sync_scheduled_at', 'last_sync_status', 'last_synced', 'sync_cursor'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_last_sync`;\n        const meta = {\n            name: 'connector.last_sync',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async list(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_connector';\n        const meta = {\n            name: 'connector.list'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async post(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['description', 'index_name', 'is_native', 'language', 'name', 'service_type'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_connector';\n        const meta = {\n            name: 'connector.post'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async put(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['description', 'index_name', 'is_native', 'language', 'name', 'service_type'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.connector_id != null) {\n            method = 'PUT';\n            path = `/_connector/${encodeURIComponent(params.connector_id.toString())}`;\n        }\n        else {\n            method = 'PUT';\n            path = '/_connector';\n        }\n        const meta = {\n            name: 'connector.put',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async secretDelete(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_connector/_secret/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'connector.secret_delete',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async secretGet(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_connector/_secret/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'connector.secret_get',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async secretPost(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_connector/_secret';\n        const meta = {\n            name: 'connector.secret_post'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async secretPut(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_secret/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'connector.secret_put',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobCancel(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}/_cancel`;\n        const meta = {\n            name: 'connector.sync_job_cancel',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobCheckIn(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}/_check_in`;\n        const meta = {\n            name: 'connector.sync_job_check_in',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobClaim(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}/_claim`;\n        const meta = {\n            name: 'connector.sync_job_claim',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobDelete(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}`;\n        const meta = {\n            name: 'connector.sync_job_delete',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobError(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}/_error`;\n        const meta = {\n            name: 'connector.sync_job_error',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobGet(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}`;\n        const meta = {\n            name: 'connector.sync_job_get',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobList(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_connector/_sync_job';\n        const meta = {\n            name: 'connector.sync_job_list'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobPost(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['id', 'job_type', 'trigger_method'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_connector/_sync_job';\n        const meta = {\n            name: 'connector.sync_job_post'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async syncJobUpdateStats(params, options) {\n        const acceptedPath = ['connector_sync_job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/_sync_job/${encodeURIComponent(params.connector_sync_job_id.toString())}/_stats`;\n        const meta = {\n            name: 'connector.sync_job_update_stats',\n            pathParts: {\n                connector_sync_job_id: params.connector_sync_job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateActiveFiltering(params, options) {\n        const acceptedPath = ['connector_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_filtering/_activate`;\n        const meta = {\n            name: 'connector.update_active_filtering',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateApiKeyId(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['api_key_id', 'api_key_secret_id'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_api_key_id`;\n        const meta = {\n            name: 'connector.update_api_key_id',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateConfiguration(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['configuration', 'values'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_configuration`;\n        const meta = {\n            name: 'connector.update_configuration',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateError(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['error'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_error`;\n        const meta = {\n            name: 'connector.update_error',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateFeatures(params, options) {\n        const acceptedPath = ['connector_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_features`;\n        const meta = {\n            name: 'connector.update_features',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateFiltering(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['filtering', 'rules', 'advanced_snippet'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_filtering`;\n        const meta = {\n            name: 'connector.update_filtering',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateFilteringValidation(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['validation'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_filtering/_validation`;\n        const meta = {\n            name: 'connector.update_filtering_validation',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateIndexName(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['index_name'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_index_name`;\n        const meta = {\n            name: 'connector.update_index_name',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateName(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['name', 'description'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_name`;\n        const meta = {\n            name: 'connector.update_name',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateNative(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['is_native'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_native`;\n        const meta = {\n            name: 'connector.update_native',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updatePipeline(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['pipeline'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_pipeline`;\n        const meta = {\n            name: 'connector.update_pipeline',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateScheduling(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['scheduling'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_scheduling`;\n        const meta = {\n            name: 'connector.update_scheduling',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateServiceType(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['service_type'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_service_type`;\n        const meta = {\n            name: 'connector.update_service_type',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateStatus(params, options) {\n        const acceptedPath = ['connector_id'];\n        const acceptedBody = ['status'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_connector/${encodeURIComponent(params.connector_id.toString())}/_status`;\n        const meta = {\n            name: 'connector.update_status',\n            pathParts: {\n                connector_id: params.connector_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Connector;\n//# sourceMappingURL=connector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/connector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/count.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/count.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function CountApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['query'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_count`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_count';\n    }\n    const meta = {\n        name: 'count',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = CountApi;\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2NvdW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBDb3VudEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydxdWVyeSddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fY291bnRgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSAnL19jb3VudCc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdjb3VudCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDb3VudEFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/count.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/create.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/create.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function CreateApi(params, options) {\n    var _a;\n    const acceptedPath = ['id', 'index'];\n    const acceptedBody = ['document'];\n    const querystring = {};\n    // @ts-expect-error\n    let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            // @ts-expect-error\n            body = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'PUT';\n    const path = `/${encodeURIComponent(params.index.toString())}/_create/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'create',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = CreateApi;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9jcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNENBQTRDLFdBQVcseUNBQXlDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2NyZWF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gQ3JlYXRlQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJywgJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydkb2N1bWVudCddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGxldCBib2R5ID0gKF9hID0gcGFyYW1zLmJvZHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5ID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BVVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fY3JlYXRlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdjcmVhdGUnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENyZWF0ZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/dangling_indices.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/dangling_indices.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass DanglingIndices {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteDanglingIndex(params, options) {\n        const acceptedPath = ['index_uuid'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_dangling/${encodeURIComponent(params.index_uuid.toString())}`;\n        const meta = {\n            name: 'dangling_indices.delete_dangling_index',\n            pathParts: {\n                index_uuid: params.index_uuid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async importDanglingIndex(params, options) {\n        const acceptedPath = ['index_uuid'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_dangling/${encodeURIComponent(params.index_uuid.toString())}`;\n        const meta = {\n            name: 'dangling_indices.import_dangling_index',\n            pathParts: {\n                index_uuid: params.index_uuid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async listDanglingIndices(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_dangling';\n        const meta = {\n            name: 'dangling_indices.list_dangling_indices'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = DanglingIndices;\n//# sourceMappingURL=dangling_indices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kYW5nbGluZ19pbmRpY2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaURBQWlEO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlEQUFpRDtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kYW5nbGluZ19pbmRpY2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBEYW5nbGluZ0luZGljZXMge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cmFuc3BvcnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZURhbmdsaW5nSW5kZXgocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXhfdXVpZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fZGFuZ2xpbmcvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4X3V1aWQudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdkYW5nbGluZ19pbmRpY2VzLmRlbGV0ZV9kYW5nbGluZ19pbmRleCcsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBpbmRleF91dWlkOiBwYXJhbXMuaW5kZXhfdXVpZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGltcG9ydERhbmdsaW5nSW5kZXgocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXhfdXVpZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX2RhbmdsaW5nLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleF91dWlkLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnZGFuZ2xpbmdfaW5kaWNlcy5pbXBvcnRfZGFuZ2xpbmdfaW5kZXgnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgaW5kZXhfdXVpZDogcGFyYW1zLmluZGV4X3V1aWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0RGFuZ2xpbmdJbmRpY2VzKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL19kYW5nbGluZyc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnZGFuZ2xpbmdfaW5kaWNlcy5saXN0X2RhbmdsaW5nX2luZGljZXMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBEYW5nbGluZ0luZGljZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYW5nbGluZ19pbmRpY2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/dangling_indices.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/delete.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function DeleteApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'DELETE';\n    const path = `/${encodeURIComponent(params.index.toString())}/_doc/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'delete',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = DeleteApi;\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QyxRQUFRLHlDQUF5QztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIERlbGV0ZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJywgJ2luZGV4J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZG9jLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdkZWxldGUnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IERlbGV0ZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGV0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function DeleteByQueryApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['max_docs', 'query', 'slice'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/${encodeURIComponent(params.index.toString())}/_delete_by_query`;\n    const meta = {\n        name: 'delete_by_query',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = DeleteByQueryApi;\n//# sourceMappingURL=delete_by_query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGVfYnlfcXVlcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNENBQTRDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGVfYnlfcXVlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIERlbGV0ZUJ5UXVlcnlBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnbWF4X2RvY3MnLCAncXVlcnknLCAnc2xpY2UnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZGVsZXRlX2J5X3F1ZXJ5YDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZGVsZXRlX2J5X3F1ZXJ5JyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IERlbGV0ZUJ5UXVlcnlBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxldGVfYnlfcXVlcnkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query_rethrottle.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query_rethrottle.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function DeleteByQueryRethrottleApi(params, options) {\n    const acceptedPath = ['task_id'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/_delete_by_query/${encodeURIComponent(params.task_id.toString())}/_rethrottle`;\n    const meta = {\n        name: 'delete_by_query_rethrottle',\n        pathParts: {\n            task_id: params.task_id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = DeleteByQueryRethrottleApi;\n//# sourceMappingURL=delete_by_query_rethrottle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGVfYnlfcXVlcnlfcmV0aHJvdHRsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsOENBQThDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGVfYnlfcXVlcnlfcmV0aHJvdHRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gRGVsZXRlQnlRdWVyeVJldGhyb3R0bGVBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyd0YXNrX2lkJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgIGNvbnN0IHBhdGggPSBgL19kZWxldGVfYnlfcXVlcnkvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRhc2tfaWQudG9TdHJpbmcoKSl9L19yZXRocm90dGxlYDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZGVsZXRlX2J5X3F1ZXJ5X3JldGhyb3R0bGUnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIHRhc2tfaWQ6IHBhcmFtcy50YXNrX2lkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IERlbGV0ZUJ5UXVlcnlSZXRocm90dGxlQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZXRlX2J5X3F1ZXJ5X3JldGhyb3R0bGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query_rethrottle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_script.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/delete_script.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function DeleteScriptApi(params, options) {\n    const acceptedPath = ['id'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'DELETE';\n    const path = `/_scripts/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'delete_script',\n        pathParts: {\n            id: params.id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = DeleteScriptApi;\n//# sourceMappingURL=delete_script.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9kZWxldGVfc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5Q0FBeUM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2RlbGV0ZV9zY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIERlbGV0ZVNjcmlwdEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgY29uc3QgcGF0aCA9IGAvX3NjcmlwdHMvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmlkLnRvU3RyaW5nKCkpfWA7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2RlbGV0ZV9zY3JpcHQnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWRcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gRGVsZXRlU2NyaXB0QXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZXRlX3NjcmlwdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_script.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/enrich.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/enrich.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Enrich {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deletePolicy(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_enrich/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'enrich.delete_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async executePolicy(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_enrich/policy/${encodeURIComponent(params.name.toString())}/_execute`;\n        const meta = {\n            name: 'enrich.execute_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getPolicy(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_enrich/policy/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_enrich/policy';\n        }\n        const meta = {\n            name: 'enrich.get_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putPolicy(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['geo_match', 'match', 'range'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_enrich/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'enrich.put_policy',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_enrich/_stats';\n        const meta = {\n            name: 'enrich.stats'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Enrich;\n//# sourceMappingURL=enrich.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/enrich.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/eql.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/eql.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Eql {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async delete(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_eql/search/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'eql.delete',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_eql/search/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'eql.get',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getStatus(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_eql/search/status/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'eql.get_status',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async search(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['query', 'case_sensitive', 'event_category_field', 'tiebreaker_field', 'timestamp_field', 'fetch_size', 'filter', 'keep_alive', 'keep_on_completion', 'wait_for_completion_timeout', 'size', 'fields', 'result_position', 'runtime_mappings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_eql/search`;\n        const meta = {\n            name: 'eql.search',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Eql;\n//# sourceMappingURL=eql.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/eql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/esql.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/esql.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Esql {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async asyncQuery(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_query/async';\n        const meta = {\n            name: 'esql.async_query'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async asyncQueryGet(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_query/async/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'esql.async_query_get',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async query(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['columnar', 'filter', 'locale', 'params', 'profile', 'query', 'tables'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_query';\n        const meta = {\n            name: 'esql.query'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Esql;\n//# sourceMappingURL=esql.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9lc3FsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHlDQUF5QztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxjQUFjO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9lc3FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBFc3FsIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBhc3luY1F1ZXJ5KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL19xdWVyeS9hc3luYyc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnZXNxbC5hc3luY19xdWVyeSdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBhc3luY1F1ZXJ5R2V0KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19xdWVyeS9hc3luYy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaWQudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdlc3FsLmFzeW5jX3F1ZXJ5X2dldCcsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBpZDogcGFyYW1zLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgcXVlcnkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2NvbHVtbmFyJywgJ2ZpbHRlcicsICdsb2NhbGUnLCAncGFyYW1zJywgJ3Byb2ZpbGUnLCAncXVlcnknLCAndGFibGVzJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3F1ZXJ5JztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdlc3FsLnF1ZXJ5J1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXNxbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzcWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/esql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/exists.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ExistsApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'HEAD';\n    const path = `/${encodeURIComponent(params.index.toString())}/_doc/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'exists',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ExistsApi;\n//# sourceMappingURL=exists.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9leGlzdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QyxRQUFRLHlDQUF5QztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9leGlzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEV4aXN0c0FwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJywgJ2luZGV4J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0hFQUQnO1xuICAgIGNvbnN0IHBhdGggPSBgLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleC50b1N0cmluZygpKX0vX2RvYy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaWQudG9TdHJpbmcoKSl9YDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZXhpc3RzJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpZDogcGFyYW1zLmlkLFxuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBFeGlzdHNBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGlzdHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists_source.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/exists_source.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ExistsSourceApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'HEAD';\n    const path = `/${encodeURIComponent(params.index.toString())}/_source/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'exists_source',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ExistsSourceApi;\n//# sourceMappingURL=exists_source.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9leGlzdHNfc291cmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0Q0FBNEMsV0FBVyx5Q0FBeUM7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvZXhpc3RzX3NvdXJjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gRXhpc3RzU291cmNlQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnLCAnaW5kZXgnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnSEVBRCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fc291cmNlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdleGlzdHNfc291cmNlJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpZDogcGFyYW1zLmlkLFxuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBFeGlzdHNTb3VyY2VBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGlzdHNfc291cmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists_source.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/explain.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/explain.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ExplainApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const acceptedBody = ['query'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_explain/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'explain',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ExplainApi;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9leHBsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QyxZQUFZLHlDQUF5QztBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9leHBsYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBFeHBsYWluQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnLCAnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ3F1ZXJ5J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZXhwbGFpbi8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaWQudG9TdHJpbmcoKSl9YDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZXhwbGFpbicsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaWQ6IHBhcmFtcy5pZCxcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXhwbGFpbkFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/explain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/features.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/features.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Features {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async getFeatures(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_features';\n        const meta = {\n            name: 'features.get_features'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resetFeatures(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_features/_reset';\n        const meta = {\n            name: 'features.reset_features'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Features;\n//# sourceMappingURL=features.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9mZWF0dXJlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2ZlYXR1cmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBGZWF0dXJlcyB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0RmVhdHVyZXMocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX2ZlYXR1cmVzJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdmZWF0dXJlcy5nZXRfZmVhdHVyZXMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzZXRGZWF0dXJlcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX2ZlYXR1cmVzL19yZXNldCc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnZmVhdHVyZXMucmVzZXRfZmVhdHVyZXMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBGZWF0dXJlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlYXR1cmVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/features.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/field_caps.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/field_caps.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function FieldCapsApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['fields', 'index_filter', 'runtime_mappings'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_field_caps`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_field_caps';\n    }\n    const meta = {\n        name: 'field_caps',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = FieldCapsApi;\n//# sourceMappingURL=field_caps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9maWVsZF9jYXBzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvZmllbGRfY2Fwcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gRmllbGRDYXBzQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2ZpZWxkcycsICdpbmRleF9maWx0ZXInLCAncnVudGltZV9tYXBwaW5ncyddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZmllbGRfY2Fwc2A7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9ICcvX2ZpZWxkX2NhcHMnO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZmllbGRfY2FwcycsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBGaWVsZENhcHNBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWVsZF9jYXBzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/field_caps.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/fleet.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/fleet.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Fleet {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteSecret(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_fleet/secret/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'fleet.delete_secret',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSecret(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_fleet/secret/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'fleet.get_secret',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async globalCheckpoints(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_fleet/global_checkpoints`;\n        const meta = {\n            name: 'fleet.global_checkpoints',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async msearch(params, options) {\n        var _a;\n        const acceptedPath = ['index'];\n        const acceptedBody = ['searches'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_fleet/_fleet_msearch`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_fleet/_fleet_msearch';\n        }\n        const meta = {\n            name: 'fleet.msearch',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n    }\n    async postSecret(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_fleet/secret';\n        const meta = {\n            name: 'fleet.post_secret'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async search(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['aggregations', 'aggs', 'collapse', 'explain', 'ext', 'from', 'highlight', 'track_total_hits', 'indices_boost', 'docvalue_fields', 'min_score', 'post_filter', 'profile', 'query', 'rescore', 'script_fields', 'search_after', 'size', 'slice', 'sort', '_source', 'fields', 'suggest', 'terminate_after', 'timeout', 'track_scores', 'version', 'seq_no_primary_term', 'stored_fields', 'pit', 'runtime_mappings', 'stats'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_fleet/_fleet_search`;\n        const meta = {\n            name: 'fleet.search',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Fleet;\n//# sourceMappingURL=fleet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/fleet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/get.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function GetApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_doc/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'get',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = GetApi;\n//# sourceMappingURL=get.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QyxRQUFRLHlDQUF5QztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEdldEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJywgJ2luZGV4J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZG9jLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdnZXQnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldEFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/get_script.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function GetScriptApi(params, options) {\n    const acceptedPath = ['id'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = `/_scripts/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'get_script',\n        pathParts: {\n            id: params.id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = GetScriptApi;\n//# sourceMappingURL=get_script.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXRfc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5Q0FBeUM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2dldF9zY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEdldFNjcmlwdEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2lkJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvX3NjcmlwdHMvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmlkLnRvU3RyaW5nKCkpfWA7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2dldF9zY3JpcHQnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWRcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0U2NyaXB0QXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X3NjcmlwdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_context.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/get_script_context.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function GetScriptContextApi(params, options) {\n    const acceptedPath = [];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = '/_script_context';\n    const meta = {\n        name: 'get_script_context'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = GetScriptContextApi;\n//# sourceMappingURL=get_script_context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXRfc2NyaXB0X2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXRfc2NyaXB0X2NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEdldFNjcmlwdENvbnRleHRBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9ICcvX3NjcmlwdF9jb250ZXh0JztcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnZ2V0X3NjcmlwdF9jb250ZXh0J1xuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0U2NyaXB0Q29udGV4dEFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldF9zY3JpcHRfY29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_languages.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/get_script_languages.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function GetScriptLanguagesApi(params, options) {\n    const acceptedPath = [];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = '/_script_language';\n    const meta = {\n        name: 'get_script_languages'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = GetScriptLanguagesApi;\n//# sourceMappingURL=get_script_languages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXRfc2NyaXB0X2xhbmd1YWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2dldF9zY3JpcHRfbGFuZ3VhZ2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBHZXRTY3JpcHRMYW5ndWFnZXNBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9ICcvX3NjcmlwdF9sYW5ndWFnZSc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2dldF9zY3JpcHRfbGFuZ3VhZ2VzJ1xuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0U2NyaXB0TGFuZ3VhZ2VzQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X3NjcmlwdF9sYW5ndWFnZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_languages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_source.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/get_source.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function GetSourceApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_source/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'get_source',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = GetSourceApi;\n//# sourceMappingURL=get_source.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9nZXRfc291cmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0Q0FBNEMsV0FBVyx5Q0FBeUM7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvZ2V0X3NvdXJjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gR2V0U291cmNlQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnLCAnaW5kZXgnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19zb3VyY2UvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmlkLnRvU3RyaW5nKCkpfWA7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ2dldF9zb3VyY2UnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldFNvdXJjZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldF9zb3VyY2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_source.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/graph.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/graph.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Graph {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async explore(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['connections', 'controls', 'query', 'vertices'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_graph/explore`;\n        const meta = {\n            name: 'graph.explore',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Graph;\n//# sourceMappingURL=graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9ncmFwaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGNBQWM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNENBQTRDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2dyYXBoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBHcmFwaCB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgZXhwbG9yZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgICAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2Nvbm5lY3Rpb25zJywgJ2NvbnRyb2xzJywgJ3F1ZXJ5JywgJ3ZlcnRpY2VzJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19ncmFwaC9leHBsb3JlYDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdncmFwaC5leHBsb3JlJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdyYXBoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/health_report.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/health_report.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function HealthReportApi(params, options) {\n    const acceptedPath = ['feature'];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.feature != null) {\n        method = 'GET';\n        path = `/_health_report/${encodeURIComponent(params.feature.toString())}`;\n    }\n    else {\n        method = 'GET';\n        path = '/_health_report';\n    }\n    const meta = {\n        name: 'health_report',\n        pathParts: {\n            feature: params.feature\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = HealthReportApi;\n//# sourceMappingURL=health_report.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9oZWFsdGhfcmVwb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDhDQUE4QztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2hlYWx0aF9yZXBvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIEhlYWx0aFJlcG9ydEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2ZlYXR1cmUnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgbGV0IHBhdGggPSAnJztcbiAgICBpZiAocGFyYW1zLmZlYXR1cmUgIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvX2hlYWx0aF9yZXBvcnQvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmZlYXR1cmUudG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBwYXRoID0gJy9faGVhbHRoX3JlcG9ydCc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdoZWFsdGhfcmVwb3J0JyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBmZWF0dXJlOiBwYXJhbXMuZmVhdHVyZVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBIZWFsdGhSZXBvcnRBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFsdGhfcmVwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/health_report.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ilm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ilm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ilm {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ilm/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'ilm.delete_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async explainLifecycle(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ilm/explain`;\n        const meta = {\n            name: 'ilm.explain_lifecycle',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_ilm/policy/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ilm/policy';\n        }\n        const meta = {\n            name: 'ilm.get_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getStatus(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ilm/status';\n        const meta = {\n            name: 'ilm.get_status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async migrateToDataTiers(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['legacy_template_to_delete', 'node_attribute'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ilm/migrate_to_data_tiers';\n        const meta = {\n            name: 'ilm.migrate_to_data_tiers'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async moveToStep(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['current_step', 'next_step'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ilm/move/${encodeURIComponent(params.index.toString())}`;\n        const meta = {\n            name: 'ilm.move_to_step',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['policy'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ilm/policy/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'ilm.put_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async removePolicy(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ilm/remove`;\n        const meta = {\n            name: 'ilm.remove_policy',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async retry(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_ilm/retry`;\n        const meta = {\n            name: 'ilm.retry',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async start(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ilm/start';\n        const meta = {\n            name: 'ilm.start'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stop(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ilm/stop';\n        const meta = {\n            name: 'ilm.stop'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Ilm;\n//# sourceMappingURL=ilm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ilm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function IndexApi(params, options) {\n    var _a;\n    const acceptedPath = ['id', 'index'];\n    const acceptedBody = ['document'];\n    const querystring = {};\n    // @ts-expect-error\n    let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            // @ts-expect-error\n            body = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null && params.id != null) {\n        method = 'PUT';\n        path = `/${encodeURIComponent(params.index.toString())}/_doc/${encodeURIComponent(params.id.toString())}`;\n    }\n    else {\n        method = 'POST';\n        path = `/${encodeURIComponent(params.index.toString())}/_doc`;\n    }\n    const meta = {\n        name: 'index',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = IndexApi;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0Q0FBNEMsUUFBUSx5Q0FBeUM7QUFDaEg7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBJbmRleEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpZCcsICdpbmRleCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnZG9jdW1lbnQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBsZXQgYm9keSA9IChfYSA9IHBhcmFtcy5ib2R5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCAmJiBwYXJhbXMuaWQgIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSAnUFVUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fZG9jLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19kb2NgO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnaW5kZXgnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEluZGV4QXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/indices.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/indices.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Indices {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async addBlock(params, options) {\n        const acceptedPath = ['index', 'block'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_block/${encodeURIComponent(params.block.toString())}`;\n        const meta = {\n            name: 'indices.add_block',\n            pathParts: {\n                index: params.index,\n                block: params.block\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async analyze(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['analyzer', 'attributes', 'char_filter', 'explain', 'field', 'filter', 'normalizer', 'text', 'tokenizer'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_analyze`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_analyze';\n        }\n        const meta = {\n            name: 'indices.analyze',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCache(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.index.toString())}/_cache/clear`;\n        }\n        else {\n            method = 'POST';\n            path = '/_cache/clear';\n        }\n        const meta = {\n            name: 'indices.clear_cache',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clone(params, options) {\n        const acceptedPath = ['index', 'target'];\n        const acceptedBody = ['aliases', 'settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_clone/${encodeURIComponent(params.target.toString())}`;\n        const meta = {\n            name: 'indices.clone',\n            pathParts: {\n                index: params.index,\n                target: params.target\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async close(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_close`;\n        const meta = {\n            name: 'indices.close',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async create(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['aliases', 'mappings', 'settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}`;\n        const meta = {\n            name: 'indices.create',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async createDataStream(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_data_stream/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.create_data_stream',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async dataStreamsStats(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_data_stream/${encodeURIComponent(params.name.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_data_stream/_stats';\n        }\n        const meta = {\n            name: 'indices.data_streams_stats',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async delete(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/${encodeURIComponent(params.index.toString())}`;\n        const meta = {\n            name: 'indices.delete',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteAlias(params, options) {\n        const acceptedPath = ['index', 'name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.name != null) {\n            method = 'DELETE';\n            path = `/${encodeURIComponent(params.index.toString())}/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'DELETE';\n            path = `/${encodeURIComponent(params.index.toString())}/_aliases/${encodeURIComponent(params.name.toString())}`;\n        }\n        const meta = {\n            name: 'indices.delete_alias',\n            pathParts: {\n                index: params.index,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteDataLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_data_stream/${encodeURIComponent(params.name.toString())}/_lifecycle`;\n        const meta = {\n            name: 'indices.delete_data_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteDataStream(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_data_stream/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.delete_data_stream',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteIndexTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_index_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.delete_index_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.delete_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async diskUsage(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_disk_usage`;\n        const meta = {\n            name: 'indices.disk_usage',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async downsample(params, options) {\n        var _a;\n        const acceptedPath = ['index', 'target_index'];\n        const acceptedBody = ['config'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_downsample/${encodeURIComponent(params.target_index.toString())}`;\n        const meta = {\n            name: 'indices.downsample',\n            pathParts: {\n                index: params.index,\n                target_index: params.target_index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async exists(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'HEAD';\n        const path = `/${encodeURIComponent(params.index.toString())}`;\n        const meta = {\n            name: 'indices.exists',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async existsAlias(params, options) {\n        const acceptedPath = ['name', 'index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.name != null) {\n            method = 'HEAD';\n            path = `/${encodeURIComponent(params.index.toString())}/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'HEAD';\n            path = `/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        const meta = {\n            name: 'indices.exists_alias',\n            pathParts: {\n                name: params.name,\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async existsIndexTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'HEAD';\n        const path = `/_index_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.exists_index_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async existsTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'HEAD';\n        const path = `/_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.exists_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async explainDataLifecycle(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_lifecycle/explain`;\n        const meta = {\n            name: 'indices.explain_data_lifecycle',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async fieldUsageStats(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_field_usage_stats`;\n        const meta = {\n            name: 'indices.field_usage_stats',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async flush(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_flush`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_flush';\n        }\n        const meta = {\n            name: 'indices.flush',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async forcemerge(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.index.toString())}/_forcemerge`;\n        }\n        else {\n            method = 'POST';\n            path = '/_forcemerge';\n        }\n        const meta = {\n            name: 'indices.forcemerge',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}`;\n        const meta = {\n            name: 'indices.get',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAlias(params, options) {\n        const acceptedPath = ['name', 'index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.name != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        else if (params.name != null) {\n            method = 'GET';\n            path = `/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        else if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_alias`;\n        }\n        else {\n            method = 'GET';\n            path = '/_alias';\n        }\n        const meta = {\n            name: 'indices.get_alias',\n            pathParts: {\n                name: params.name,\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDataLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_data_stream/${encodeURIComponent(params.name.toString())}/_lifecycle`;\n        const meta = {\n            name: 'indices.get_data_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDataStream(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_data_stream/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_data_stream';\n        }\n        const meta = {\n            name: 'indices.get_data_stream',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getFieldMapping(params, options) {\n        const acceptedPath = ['fields', 'index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.fields != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_mapping/field/${encodeURIComponent(params.fields.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = `/_mapping/field/${encodeURIComponent(params.fields.toString())}`;\n        }\n        const meta = {\n            name: 'indices.get_field_mapping',\n            pathParts: {\n                fields: params.fields,\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getIndexTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_index_template/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_index_template';\n        }\n        const meta = {\n            name: 'indices.get_index_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getMapping(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_mapping`;\n        }\n        else {\n            method = 'GET';\n            path = '/_mapping';\n        }\n        const meta = {\n            name: 'indices.get_mapping',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSettings(params, options) {\n        const acceptedPath = ['index', 'name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.name != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_settings/${encodeURIComponent(params.name.toString())}`;\n        }\n        else if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_settings`;\n        }\n        else if (params.name != null) {\n            method = 'GET';\n            path = `/_settings/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_settings';\n        }\n        const meta = {\n            name: 'indices.get_settings',\n            pathParts: {\n                index: params.index,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_template/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_template';\n        }\n        const meta = {\n            name: 'indices.get_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async migrateToDataStream(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_data_stream/_migrate/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.migrate_to_data_stream',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async modifyDataStream(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['actions'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_data_stream/_modify';\n        const meta = {\n            name: 'indices.modify_data_stream'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async open(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_open`;\n        const meta = {\n            name: 'indices.open',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async promoteDataStream(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_data_stream/_promote/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.promote_data_stream',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putAlias(params, options) {\n        const acceptedPath = ['index', 'name'];\n        const acceptedBody = ['filter', 'index_routing', 'is_write_index', 'routing', 'search_routing'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.name != null) {\n            method = 'PUT';\n            path = `/${encodeURIComponent(params.index.toString())}/_alias/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'PUT';\n            path = `/${encodeURIComponent(params.index.toString())}/_aliases/${encodeURIComponent(params.name.toString())}`;\n        }\n        const meta = {\n            name: 'indices.put_alias',\n            pathParts: {\n                index: params.index,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putDataLifecycle(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['data_retention', 'downsampling'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_data_stream/${encodeURIComponent(params.name.toString())}/_lifecycle`;\n        const meta = {\n            name: 'indices.put_data_lifecycle',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putIndexTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['index_patterns', 'composed_of', 'template', 'data_stream', 'priority', 'version', '_meta', 'allow_auto_create', 'ignore_missing_component_templates', 'deprecated'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_index_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.put_index_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putMapping(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['date_detection', 'dynamic', 'dynamic_date_formats', 'dynamic_templates', '_field_names', '_meta', 'numeric_detection', 'properties', '_routing', '_source', 'runtime'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_mapping`;\n        const meta = {\n            name: 'indices.put_mapping',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putSettings(params, options) {\n        var _a;\n        const acceptedPath = ['index'];\n        const acceptedBody = ['settings'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'PUT';\n            path = `/${encodeURIComponent(params.index.toString())}/_settings`;\n        }\n        else {\n            method = 'PUT';\n            path = '/_settings';\n        }\n        const meta = {\n            name: 'indices.put_settings',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['aliases', 'index_patterns', 'mappings', 'order', 'settings', 'version'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_template/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.put_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async recovery(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_recovery`;\n        }\n        else {\n            method = 'GET';\n            path = '/_recovery';\n        }\n        const meta = {\n            name: 'indices.recovery',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async refresh(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_refresh`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_refresh';\n        }\n        const meta = {\n            name: 'indices.refresh',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async reloadSearchAnalyzers(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_reload_search_analyzers`;\n        const meta = {\n            name: 'indices.reload_search_analyzers',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resolveCluster(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_resolve/cluster/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.resolve_cluster',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resolveIndex(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_resolve/index/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.resolve_index',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async rollover(params, options) {\n        const acceptedPath = ['alias', 'new_index'];\n        const acceptedBody = ['aliases', 'conditions', 'mappings', 'settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.alias != null && params.new_index != null) {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.alias.toString())}/_rollover/${encodeURIComponent(params.new_index.toString())}`;\n        }\n        else {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.alias.toString())}/_rollover`;\n        }\n        const meta = {\n            name: 'indices.rollover',\n            pathParts: {\n                alias: params.alias,\n                new_index: params.new_index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async segments(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_segments`;\n        }\n        else {\n            method = 'GET';\n            path = '/_segments';\n        }\n        const meta = {\n            name: 'indices.segments',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async shardStores(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_shard_stores`;\n        }\n        else {\n            method = 'GET';\n            path = '/_shard_stores';\n        }\n        const meta = {\n            name: 'indices.shard_stores',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async shrink(params, options) {\n        const acceptedPath = ['index', 'target'];\n        const acceptedBody = ['aliases', 'settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_shrink/${encodeURIComponent(params.target.toString())}`;\n        const meta = {\n            name: 'indices.shrink',\n            pathParts: {\n                index: params.index,\n                target: params.target\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async simulateIndexTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_index_template/_simulate_index/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'indices.simulate_index_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async simulateTemplate(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['allow_auto_create', 'index_patterns', 'composed_of', 'template', 'data_stream', 'priority', 'version', '_meta', 'ignore_missing_component_templates', 'deprecated'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'POST';\n            path = `/_index_template/_simulate/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'POST';\n            path = '/_index_template/_simulate';\n        }\n        const meta = {\n            name: 'indices.simulate_template',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async split(params, options) {\n        const acceptedPath = ['index', 'target'];\n        const acceptedBody = ['aliases', 'settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/${encodeURIComponent(params.index.toString())}/_split/${encodeURIComponent(params.target.toString())}`;\n        const meta = {\n            name: 'indices.split',\n            pathParts: {\n                index: params.index,\n                target: params.target\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = ['metric', 'index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null && params.metric != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_stats/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else if (params.metric != null) {\n            method = 'GET';\n            path = `/_stats/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_stats';\n        }\n        const meta = {\n            name: 'indices.stats',\n            pathParts: {\n                metric: params.metric,\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async unfreeze(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/${encodeURIComponent(params.index.toString())}/_unfreeze`;\n        const meta = {\n            name: 'indices.unfreeze',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateAliases(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['actions'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_aliases';\n        const meta = {\n            name: 'indices.update_aliases'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async validateQuery(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['query'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_validate/query`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_validate/query';\n        }\n        const meta = {\n            name: 'indices.validate_query',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Indices;\n//# sourceMappingURL=indices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/indices.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/inference.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/inference.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Inference {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async delete(params, options) {\n        const acceptedPath = ['task_type', 'inference_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_type != null && params.inference_id != null) {\n            method = 'DELETE';\n            path = `/_inference/${encodeURIComponent(params.task_type.toString())}/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        else {\n            method = 'DELETE';\n            path = `/_inference/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        const meta = {\n            name: 'inference.delete',\n            pathParts: {\n                task_type: params.task_type,\n                inference_id: params.inference_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['task_type', 'inference_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_type != null && params.inference_id != null) {\n            method = 'GET';\n            path = `/_inference/${encodeURIComponent(params.task_type.toString())}/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        else if (params.inference_id != null) {\n            method = 'GET';\n            path = `/_inference/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_inference';\n        }\n        const meta = {\n            name: 'inference.get',\n            pathParts: {\n                task_type: params.task_type,\n                inference_id: params.inference_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async inference(params, options) {\n        const acceptedPath = ['task_type', 'inference_id'];\n        const acceptedBody = ['query', 'input', 'task_settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_type != null && params.inference_id != null) {\n            method = 'POST';\n            path = `/_inference/${encodeURIComponent(params.task_type.toString())}/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        else {\n            method = 'POST';\n            path = `/_inference/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        const meta = {\n            name: 'inference.inference',\n            pathParts: {\n                task_type: params.task_type,\n                inference_id: params.inference_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async put(params, options) {\n        var _a;\n        const acceptedPath = ['task_type', 'inference_id'];\n        const acceptedBody = ['inference_config'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_type != null && params.inference_id != null) {\n            method = 'PUT';\n            path = `/_inference/${encodeURIComponent(params.task_type.toString())}/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        else {\n            method = 'PUT';\n            path = `/_inference/${encodeURIComponent(params.inference_id.toString())}`;\n        }\n        const meta = {\n            name: 'inference.put',\n            pathParts: {\n                task_type: params.task_type,\n                inference_id: params.inference_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async streamInference(params, options) {\n        const acceptedPath = ['inference_id', 'task_type'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_type != null && params.inference_id != null) {\n            method = 'POST';\n            path = `/_inference/${encodeURIComponent(params.task_type.toString())}/${encodeURIComponent(params.inference_id.toString())}/_stream`;\n        }\n        else {\n            method = 'POST';\n            path = `/_inference/${encodeURIComponent(params.inference_id.toString())}/_stream`;\n        }\n        const meta = {\n            name: 'inference.stream_inference',\n            pathParts: {\n                inference_id: params.inference_id,\n                task_type: params.task_type\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Inference;\n//# sourceMappingURL=inference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/inference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/info.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/info.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function InfoApi(params, options) {\n    const acceptedPath = [];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'GET';\n    const path = '/';\n    const meta = {\n        name: 'info'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = InfoApi;\n//# sourceMappingURL=info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9pbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvaW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gSW5mb0FwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gJy8nO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gSW5mb0FwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZm8uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ingest.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ingest.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ingest {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteGeoipDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ingest/geoip/database/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.delete_geoip_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteIpLocationDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ingest/ip_location/database/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.delete_ip_location_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deletePipeline(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ingest/pipeline/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.delete_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async geoIpStats(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ingest/geoip/stats';\n        const meta = {\n            name: 'ingest.geo_ip_stats'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getGeoipDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_ingest/geoip/database/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ingest/geoip/database';\n        }\n        const meta = {\n            name: 'ingest.get_geoip_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getIpLocationDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_ingest/ip_location/database/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ingest/ip_location/database';\n        }\n        const meta = {\n            name: 'ingest.get_ip_location_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getPipeline(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_ingest/pipeline/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ingest/pipeline';\n        }\n        const meta = {\n            name: 'ingest.get_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async processorGrok(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ingest/processor/grok';\n        const meta = {\n            name: 'ingest.processor_grok'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putGeoipDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['name', 'maxmind'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ingest/geoip/database/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.put_geoip_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putIpLocationDatabase(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ingest/ip_location/database/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.put_ip_location_database',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putPipeline(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['_meta', 'description', 'on_failure', 'processors', 'version', 'deprecated'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ingest/pipeline/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ingest.put_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async simulate(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['docs', 'pipeline'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ingest/pipeline/${encodeURIComponent(params.id.toString())}/_simulate`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ingest/pipeline/_simulate';\n        }\n        const meta = {\n            name: 'ingest.simulate',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Ingest;\n//# sourceMappingURL=ingest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ingest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/knn_search.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/knn_search.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function KnnSearchApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['_source', 'docvalue_fields', 'stored_fields', 'fields', 'filter', 'knn'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_knn_search`;\n    const meta = {\n        name: 'knn_search',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = KnnSearchApi;\n//# sourceMappingURL=knn_search.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9rbm5fc2VhcmNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkva25uX3NlYXJjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gS25uU2VhcmNoQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ19zb3VyY2UnLCAnZG9jdmFsdWVfZmllbGRzJywgJ3N0b3JlZF9maWVsZHMnLCAnZmllbGRzJywgJ2ZpbHRlcicsICdrbm4nXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19rbm5fc2VhcmNoYDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAna25uX3NlYXJjaCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBLbm5TZWFyY2hBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbm5fc2VhcmNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/knn_search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/license.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/license.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass License {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async delete(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = '/_license';\n        const meta = {\n            name: 'license.delete'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_license';\n        const meta = {\n            name: 'license.get'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getBasicStatus(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_license/basic_status';\n        const meta = {\n            name: 'license.get_basic_status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTrialStatus(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_license/trial_status';\n        const meta = {\n            name: 'license.get_trial_status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async post(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['license', 'licenses'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_license';\n        const meta = {\n            name: 'license.post'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postStartBasic(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_license/start_basic';\n        const meta = {\n            name: 'license.post_start_basic'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postStartTrial(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_license/start_trial';\n        const meta = {\n            name: 'license.post_start_trial'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = License;\n//# sourceMappingURL=license.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/license.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/logstash.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/logstash.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Logstash {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deletePipeline(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_logstash/pipeline/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'logstash.delete_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getPipeline(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_logstash/pipeline/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_logstash/pipeline';\n        }\n        const meta = {\n            name: 'logstash.get_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putPipeline(params, options) {\n        var _a;\n        const acceptedPath = ['id'];\n        const acceptedBody = ['pipeline'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_logstash/pipeline/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'logstash.put_pipeline',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Logstash;\n//# sourceMappingURL=logstash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9sb2dzdGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHlDQUF5QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHlDQUF5QztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5Q0FBeUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvbG9nc3Rhc2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIExvZ3N0YXNoIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVQaXBlbGluZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fbG9nc3Rhc2gvcGlwZWxpbmUvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmlkLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnbG9nc3Rhc2guZGVsZXRlX3BpcGVsaW5lJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIGlkOiBwYXJhbXMuaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRQaXBlbGluZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgICAgIGxldCBwYXRoID0gJyc7XG4gICAgICAgIGlmIChwYXJhbXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9fbG9nc3Rhc2gvcGlwZWxpbmUvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmlkLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgICAgIHBhdGggPSAnL19sb2dzdGFzaC9waXBlbGluZSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdsb2dzdGFzaC5nZXRfcGlwZWxpbmUnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgaWQ6IHBhcmFtcy5pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHB1dFBpcGVsaW5lKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnXTtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydwaXBlbGluZSddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGxldCBib2R5ID0gKF9hID0gcGFyYW1zLmJvZHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUFVUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX2xvZ3N0YXNoL3BpcGVsaW5lLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ2xvZ3N0YXNoLnB1dF9waXBlbGluZScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBpZDogcGFyYW1zLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb2dzdGFzaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ3N0YXNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/logstash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mget.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/mget.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function MgetApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['docs', 'ids'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_mget`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_mget';\n    }\n    const meta = {\n        name: 'mget',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = MgetApi;\n//# sourceMappingURL=mget.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tZ2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvbWdldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gTWdldEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydkb2NzJywgJ2lkcyddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fbWdldGA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9ICcvX21nZXQnO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnbWdldCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNZ2V0QXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWdldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mget.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/migration.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/migration.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Migration {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deprecations(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_migration/deprecations`;\n        }\n        else {\n            method = 'GET';\n            path = '/_migration/deprecations';\n        }\n        const meta = {\n            name: 'migration.deprecations',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getFeatureUpgradeStatus(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_migration/system_features';\n        const meta = {\n            name: 'migration.get_feature_upgrade_status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postFeatureUpgrade(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_migration/system_features';\n        const meta = {\n            name: 'migration.post_feature_upgrade'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Migration;\n//# sourceMappingURL=migration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9taWdyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRDQUE0QztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvbWlncmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBNaWdyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cmFuc3BvcnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgfVxuICAgIGFzeW5jIGRlcHJlY2F0aW9ucyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgICAgIGxldCBwYXRoID0gJyc7XG4gICAgICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19taWdyYXRpb24vZGVwcmVjYXRpb25zYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX21pZ3JhdGlvbi9kZXByZWNhdGlvbnMnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnbWlncmF0aW9uLmRlcHJlY2F0aW9ucycsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0RmVhdHVyZVVwZ3JhZGVTdGF0dXMocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX21pZ3JhdGlvbi9zeXN0ZW1fZmVhdHVyZXMnO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ21pZ3JhdGlvbi5nZXRfZmVhdHVyZV91cGdyYWRlX3N0YXR1cydcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBwb3N0RmVhdHVyZVVwZ3JhZGUocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL19taWdyYXRpb24vc3lzdGVtX2ZlYXR1cmVzJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdtaWdyYXRpb24ucG9zdF9mZWF0dXJlX3VwZ3JhZGUnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNaWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/migration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ml.js":
/*!***************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ml.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ml {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async clearTrainedModelDeploymentCache(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/deployment/cache/_clear`;\n        const meta = {\n            name: 'ml.clear_trained_model_deployment_cache',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async closeJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['allow_no_match', 'force', 'timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_close`;\n        const meta = {\n            name: 'ml.close_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteCalendar(params, options) {\n        const acceptedPath = ['calendar_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_calendar',\n            pathParts: {\n                calendar_id: params.calendar_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteCalendarEvent(params, options) {\n        const acceptedPath = ['calendar_id', 'event_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}/events/${encodeURIComponent(params.event_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_calendar_event',\n            pathParts: {\n                calendar_id: params.calendar_id,\n                event_id: params.event_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteCalendarJob(params, options) {\n        const acceptedPath = ['calendar_id', 'job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}/jobs/${encodeURIComponent(params.job_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_calendar_job',\n            pathParts: {\n                calendar_id: params.calendar_id,\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ml.delete_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteExpiredData(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['requests_per_second', 'timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null) {\n            method = 'DELETE';\n            path = `/_ml/_delete_expired_data/${encodeURIComponent(params.job_id.toString())}`;\n        }\n        else {\n            method = 'DELETE';\n            path = '/_ml/_delete_expired_data';\n        }\n        const meta = {\n            name: 'ml.delete_expired_data',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteFilter(params, options) {\n        const acceptedPath = ['filter_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/filters/${encodeURIComponent(params.filter_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_filter',\n            pathParts: {\n                filter_id: params.filter_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteForecast(params, options) {\n        const acceptedPath = ['job_id', 'forecast_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null && params.forecast_id != null) {\n            method = 'DELETE';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_forecast/${encodeURIComponent(params.forecast_id.toString())}`;\n        }\n        else {\n            method = 'DELETE';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_forecast`;\n        }\n        const meta = {\n            name: 'ml.delete_forecast',\n            pathParts: {\n                job_id: params.job_id,\n                forecast_id: params.forecast_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteModelSnapshot(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_model_snapshot',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteTrainedModel(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}`;\n        const meta = {\n            name: 'ml.delete_trained_model',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteTrainedModelAlias(params, options) {\n        const acceptedPath = ['model_alias', 'model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/model_aliases/${encodeURIComponent(params.model_alias.toString())}`;\n        const meta = {\n            name: 'ml.delete_trained_model_alias',\n            pathParts: {\n                model_alias: params.model_alias,\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async estimateModelMemory(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['analysis_config', 'max_bucket_cardinality', 'overall_cardinality'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ml/anomaly_detectors/_estimate_model_memory';\n        const meta = {\n            name: 'ml.estimate_model_memory'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async evaluateDataFrame(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['evaluation', 'index', 'query'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ml/data_frame/_evaluate';\n        const meta = {\n            name: 'ml.evaluate_data_frame'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async explainDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['source', 'dest', 'analysis', 'description', 'model_memory_limit', 'max_num_threads', 'analyzed_fields', 'allow_lazy_start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_explain`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ml/data_frame/analytics/_explain';\n        }\n        const meta = {\n            name: 'ml.explain_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async flushJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['advance_time', 'calc_interim', 'end', 'skip_time', 'start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_flush`;\n        const meta = {\n            name: 'ml.flush_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async forecast(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['duration', 'expires_in', 'max_model_memory'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_forecast`;\n        const meta = {\n            name: 'ml.forecast',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getBuckets(params, options) {\n        const acceptedPath = ['job_id', 'timestamp'];\n        const acceptedBody = ['anomaly_score', 'desc', 'end', 'exclude_interim', 'expand', 'page', 'sort', 'start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null && params.timestamp != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/buckets/${encodeURIComponent(params.timestamp.toString())}`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/buckets`;\n        }\n        const meta = {\n            name: 'ml.get_buckets',\n            pathParts: {\n                job_id: params.job_id,\n                timestamp: params.timestamp\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getCalendarEvents(params, options) {\n        const acceptedPath = ['calendar_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}/events`;\n        const meta = {\n            name: 'ml.get_calendar_events',\n            pathParts: {\n                calendar_id: params.calendar_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getCalendars(params, options) {\n        const acceptedPath = ['calendar_id'];\n        const acceptedBody = ['page'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.calendar_id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ml/calendars';\n        }\n        const meta = {\n            name: 'ml.get_calendars',\n            pathParts: {\n                calendar_id: params.calendar_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getCategories(params, options) {\n        const acceptedPath = ['job_id', 'category_id'];\n        const acceptedBody = ['page'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null && params.category_id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/categories/${encodeURIComponent(params.category_id.toString())}`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/categories`;\n        }\n        const meta = {\n            name: 'ml.get_categories',\n            pathParts: {\n                job_id: params.job_id,\n                category_id: params.category_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/data_frame/analytics';\n        }\n        const meta = {\n            name: 'ml.get_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDataFrameAnalyticsStats(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/data_frame/analytics/_stats';\n        }\n        const meta = {\n            name: 'ml.get_data_frame_analytics_stats',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDatafeedStats(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.datafeed_id != null) {\n            method = 'GET';\n            path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/datafeeds/_stats';\n        }\n        const meta = {\n            name: 'ml.get_datafeed_stats',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getDatafeeds(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.datafeed_id != null) {\n            method = 'GET';\n            path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/datafeeds';\n        }\n        const meta = {\n            name: 'ml.get_datafeeds',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getFilters(params, options) {\n        const acceptedPath = ['filter_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.filter_id != null) {\n            method = 'GET';\n            path = `/_ml/filters/${encodeURIComponent(params.filter_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/filters';\n        }\n        const meta = {\n            name: 'ml.get_filters',\n            pathParts: {\n                filter_id: params.filter_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getInfluencers(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['page'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/influencers`;\n        const meta = {\n            name: 'ml.get_influencers',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getJobStats(params, options) {\n        const acceptedPath = ['job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null) {\n            method = 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/anomaly_detectors/_stats';\n        }\n        const meta = {\n            name: 'ml.get_job_stats',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getJobs(params, options) {\n        const acceptedPath = ['job_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null) {\n            method = 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/anomaly_detectors';\n        }\n        const meta = {\n            name: 'ml.get_jobs',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getMemoryStats(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_ml/memory/${encodeURIComponent(params.node_id.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/memory/_stats';\n        }\n        const meta = {\n            name: 'ml.get_memory_stats',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getModelSnapshotUpgradeStats(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}/_upgrade/_stats`;\n        const meta = {\n            name: 'ml.get_model_snapshot_upgrade_stats',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getModelSnapshots(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const acceptedBody = ['desc', 'end', 'page', 'sort', 'start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.job_id != null && params.snapshot_id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots`;\n        }\n        const meta = {\n            name: 'ml.get_model_snapshots',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getOverallBuckets(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['allow_no_match', 'bucket_span', 'end', 'exclude_interim', 'overall_score', 'start', 'top_n'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/overall_buckets`;\n        const meta = {\n            name: 'ml.get_overall_buckets',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRecords(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['desc', 'end', 'exclude_interim', 'page', 'record_score', 'sort', 'start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/results/records`;\n        const meta = {\n            name: 'ml.get_records',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTrainedModels(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.model_id != null) {\n            method = 'GET';\n            path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/trained_models';\n        }\n        const meta = {\n            name: 'ml.get_trained_models',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTrainedModelsStats(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.model_id != null) {\n            method = 'GET';\n            path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/_stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_ml/trained_models/_stats';\n        }\n        const meta = {\n            name: 'ml.get_trained_models_stats',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async inferTrainedModel(params, options) {\n        const acceptedPath = ['model_id'];\n        const acceptedBody = ['docs', 'inference_config'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/_infer`;\n        const meta = {\n            name: 'ml.infer_trained_model',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async info(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ml/info';\n        const meta = {\n            name: 'ml.info'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async openJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_open`;\n        const meta = {\n            name: 'ml.open_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postCalendarEvents(params, options) {\n        const acceptedPath = ['calendar_id'];\n        const acceptedBody = ['events'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}/events`;\n        const meta = {\n            name: 'ml.post_calendar_events',\n            pathParts: {\n                calendar_id: params.calendar_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postData(params, options) {\n        var _a;\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['data'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_data`;\n        const meta = {\n            name: 'ml.post_data',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n    }\n    async previewDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['config'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_preview`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ml/data_frame/analytics/_preview';\n        }\n        const meta = {\n            name: 'ml.preview_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async previewDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const acceptedBody = ['datafeed_config', 'job_config'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.datafeed_id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}/_preview`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ml/datafeeds/_preview';\n        }\n        const meta = {\n            name: 'ml.preview_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putCalendar(params, options) {\n        const acceptedPath = ['calendar_id'];\n        const acceptedBody = ['job_ids', 'description'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}`;\n        const meta = {\n            name: 'ml.put_calendar',\n            pathParts: {\n                calendar_id: params.calendar_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putCalendarJob(params, options) {\n        const acceptedPath = ['calendar_id', 'job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/calendars/${encodeURIComponent(params.calendar_id.toString())}/jobs/${encodeURIComponent(params.job_id.toString())}`;\n        const meta = {\n            name: 'ml.put_calendar_job',\n            pathParts: {\n                calendar_id: params.calendar_id,\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['allow_lazy_start', 'analysis', 'analyzed_fields', 'description', 'dest', 'max_num_threads', 'model_memory_limit', 'source', 'headers', 'version'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'ml.put_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const acceptedBody = ['aggregations', 'chunking_config', 'delayed_data_check_config', 'frequency', 'indices', 'indexes', 'indices_options', 'job_id', 'max_empty_searches', 'query', 'query_delay', 'runtime_mappings', 'script_fields', 'scroll_size', 'headers'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}`;\n        const meta = {\n            name: 'ml.put_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putFilter(params, options) {\n        const acceptedPath = ['filter_id'];\n        const acceptedBody = ['description', 'items'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/filters/${encodeURIComponent(params.filter_id.toString())}`;\n        const meta = {\n            name: 'ml.put_filter',\n            pathParts: {\n                filter_id: params.filter_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['allow_lazy_open', 'analysis_config', 'analysis_limits', 'background_persist_interval', 'custom_settings', 'daily_model_snapshot_retention_after_days', 'data_description', 'datafeed_config', 'description', 'groups', 'model_plot_config', 'model_snapshot_retention_days', 'renormalization_window_days', 'results_index_name', 'results_retention_days'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}`;\n        const meta = {\n            name: 'ml.put_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTrainedModel(params, options) {\n        const acceptedPath = ['model_id'];\n        const acceptedBody = ['compressed_definition', 'definition', 'description', 'inference_config', 'input', 'metadata', 'model_type', 'model_size_bytes', 'platform_architecture', 'tags', 'prefix_strings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}`;\n        const meta = {\n            name: 'ml.put_trained_model',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTrainedModelAlias(params, options) {\n        const acceptedPath = ['model_alias', 'model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/model_aliases/${encodeURIComponent(params.model_alias.toString())}`;\n        const meta = {\n            name: 'ml.put_trained_model_alias',\n            pathParts: {\n                model_alias: params.model_alias,\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTrainedModelDefinitionPart(params, options) {\n        const acceptedPath = ['model_id', 'part'];\n        const acceptedBody = ['definition', 'total_definition_length', 'total_parts'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/definition/${encodeURIComponent(params.part.toString())}`;\n        const meta = {\n            name: 'ml.put_trained_model_definition_part',\n            pathParts: {\n                model_id: params.model_id,\n                part: params.part\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTrainedModelVocabulary(params, options) {\n        const acceptedPath = ['model_id'];\n        const acceptedBody = ['vocabulary', 'merges', 'scores'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/vocabulary`;\n        const meta = {\n            name: 'ml.put_trained_model_vocabulary',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resetJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_reset`;\n        const meta = {\n            name: 'ml.reset_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async revertModelSnapshot(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const acceptedBody = ['delete_intervening_results'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}/_revert`;\n        const meta = {\n            name: 'ml.revert_model_snapshot',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async setUpgradeMode(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ml/set_upgrade_mode';\n        const meta = {\n            name: 'ml.set_upgrade_mode'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async startDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_start`;\n        const meta = {\n            name: 'ml.start_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async startDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const acceptedBody = ['end', 'start', 'timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}/_start`;\n        const meta = {\n            name: 'ml.start_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async startTrainedModelDeployment(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/deployment/_start`;\n        const meta = {\n            name: 'ml.start_trained_model_deployment',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stopDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_stop`;\n        const meta = {\n            name: 'ml.stop_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stopDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const acceptedBody = ['allow_no_match', 'force', 'timeout'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}/_stop`;\n        const meta = {\n            name: 'ml.stop_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stopTrainedModelDeployment(params, options) {\n        const acceptedPath = ['model_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/deployment/_stop`;\n        const meta = {\n            name: 'ml.stop_trained_model_deployment',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateDataFrameAnalytics(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['description', 'model_memory_limit', 'max_num_threads', 'allow_lazy_start'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/data_frame/analytics/${encodeURIComponent(params.id.toString())}/_update`;\n        const meta = {\n            name: 'ml.update_data_frame_analytics',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateDatafeed(params, options) {\n        const acceptedPath = ['datafeed_id'];\n        const acceptedBody = ['aggregations', 'chunking_config', 'delayed_data_check_config', 'frequency', 'indices', 'indexes', 'indices_options', 'job_id', 'max_empty_searches', 'query', 'query_delay', 'runtime_mappings', 'script_fields', 'scroll_size'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/datafeeds/${encodeURIComponent(params.datafeed_id.toString())}/_update`;\n        const meta = {\n            name: 'ml.update_datafeed',\n            pathParts: {\n                datafeed_id: params.datafeed_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateFilter(params, options) {\n        const acceptedPath = ['filter_id'];\n        const acceptedBody = ['add_items', 'description', 'remove_items'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/filters/${encodeURIComponent(params.filter_id.toString())}/_update`;\n        const meta = {\n            name: 'ml.update_filter',\n            pathParts: {\n                filter_id: params.filter_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateJob(params, options) {\n        const acceptedPath = ['job_id'];\n        const acceptedBody = ['allow_lazy_open', 'analysis_limits', 'background_persist_interval', 'custom_settings', 'categorization_filters', 'description', 'model_plot_config', 'model_prune_window', 'daily_model_snapshot_retention_after_days', 'model_snapshot_retention_days', 'renormalization_window_days', 'results_retention_days', 'groups', 'detectors', 'per_partition_categorization'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/_update`;\n        const meta = {\n            name: 'ml.update_job',\n            pathParts: {\n                job_id: params.job_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateModelSnapshot(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const acceptedBody = ['description', 'retain'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}/_update`;\n        const meta = {\n            name: 'ml.update_model_snapshot',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateTrainedModelDeployment(params, options) {\n        const acceptedPath = ['model_id'];\n        const acceptedBody = ['number_of_allocations'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/trained_models/${encodeURIComponent(params.model_id.toString())}/deployment/_update`;\n        const meta = {\n            name: 'ml.update_trained_model_deployment',\n            pathParts: {\n                model_id: params.model_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async upgradeJobSnapshot(params, options) {\n        const acceptedPath = ['job_id', 'snapshot_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_ml/anomaly_detectors/${encodeURIComponent(params.job_id.toString())}/model_snapshots/${encodeURIComponent(params.snapshot_id.toString())}/_upgrade`;\n        const meta = {\n            name: 'ml.upgrade_job_snapshot',\n            pathParts: {\n                job_id: params.job_id,\n                snapshot_id: params.snapshot_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async validate(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['job_id', 'analysis_config', 'analysis_limits', 'data_description', 'description', 'model_plot', 'model_snapshot_id', 'model_snapshot_retention_days', 'results_index_name'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ml/anomaly_detectors/_validate';\n        const meta = {\n            name: 'ml.validate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async validateDetector(params, options) {\n        var _a;\n        const acceptedPath = [];\n        const acceptedBody = ['detector'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_ml/anomaly_detectors/_validate/detector';\n        const meta = {\n            name: 'ml.validate_detector'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Ml;\n//# sourceMappingURL=ml.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/monitoring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/monitoring.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Monitoring {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async bulk(params, options) {\n        var _a;\n        const acceptedPath = ['type'];\n        const acceptedBody = ['operations'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_monitoring/bulk';\n        const meta = {\n            name: 'monitoring.bulk',\n            pathParts: {\n                type: params.type\n            }\n        };\n        return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n    }\n}\nexports[\"default\"] = Monitoring;\n//# sourceMappingURL=monitoring.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tb25pdG9yaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGlEQUFpRDtBQUMvRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvbW9uaXRvcmluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgTW9uaXRvcmluZyB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgYnVsayhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3R5cGUnXTtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydvcGVyYXRpb25zJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgbGV0IGJvZHkgPSAoX2EgPSBwYXJhbXMuYm9keSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBib2R5ID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX21vbml0b3JpbmcvYnVsayc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnbW9uaXRvcmluZy5idWxrJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHR5cGU6IHBhcmFtcy50eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYnVsa0JvZHk6IGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTW9uaXRvcmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbml0b3JpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/monitoring.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/msearch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function MsearchApi(params, options) {\n    var _a;\n    const acceptedPath = ['index'];\n    const acceptedBody = ['searches'];\n    const querystring = {};\n    // @ts-expect-error\n    let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            // @ts-expect-error\n            body = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_msearch`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_msearch';\n    }\n    const meta = {\n        name: 'msearch',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n}\nexports[\"default\"] = MsearchApi;\n//# sourceMappingURL=msearch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tc2VhcmNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGlEQUFpRDtBQUMzRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL21zZWFyY2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIE1zZWFyY2hBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ3NlYXJjaGVzJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgbGV0IGJvZHkgPSAoX2EgPSBwYXJhbXMuYm9keSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHkgPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgbGV0IHBhdGggPSAnJztcbiAgICBpZiAocGFyYW1zLmluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSBgLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleC50b1N0cmluZygpKX0vX21zZWFyY2hgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSAnL19tc2VhcmNoJztcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ21zZWFyY2gnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBidWxrQm9keTogYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE1zZWFyY2hBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tc2VhcmNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch_template.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/msearch_template.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function MsearchTemplateApi(params, options) {\n    var _a;\n    const acceptedPath = ['index'];\n    const acceptedBody = ['search_templates'];\n    const querystring = {};\n    // @ts-expect-error\n    let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            // @ts-expect-error\n            body = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_msearch/template`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_msearch/template';\n    }\n    const meta = {\n        name: 'msearch_template',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n}\nexports[\"default\"] = MsearchTemplateApi;\n//# sourceMappingURL=msearch_template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tc2VhcmNoX3RlbXBsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGlEQUFpRDtBQUMzRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL21zZWFyY2hfdGVtcGxhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIE1zZWFyY2hUZW1wbGF0ZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnc2VhcmNoX3RlbXBsYXRlcyddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGxldCBib2R5ID0gKF9hID0gcGFyYW1zLmJvZHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHVuZGVmaW5lZDtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5ID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pbmRleCAhPSBudWxsKSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19tc2VhcmNoL3RlbXBsYXRlYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gJy9fbXNlYXJjaC90ZW1wbGF0ZSc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdtc2VhcmNoX3RlbXBsYXRlJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYnVsa0JvZHk6IGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNc2VhcmNoVGVtcGxhdGVBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tc2VhcmNoX3RlbXBsYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch_template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mtermvectors.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/mtermvectors.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function MtermvectorsApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['docs', 'ids'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_mtermvectors`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_mtermvectors';\n    }\n    const meta = {\n        name: 'mtermvectors',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = MtermvectorsApi;\n//# sourceMappingURL=mtermvectors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tdGVybXZlY3RvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0Q0FBNEM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9tdGVybXZlY3RvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIE10ZXJtdmVjdG9yc0FwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydkb2NzJywgJ2lkcyddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fbXRlcm12ZWN0b3JzYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gJy9fbXRlcm12ZWN0b3JzJztcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ210ZXJtdmVjdG9ycycsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNdGVybXZlY3RvcnNBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdGVybXZlY3RvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mtermvectors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/nodes.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/nodes.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Nodes {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async clearRepositoriesMeteringArchive(params, options) {\n        const acceptedPath = ['node_id', 'max_archive_version'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/_repositories_metering/${encodeURIComponent(params.max_archive_version.toString())}`;\n        const meta = {\n            name: 'nodes.clear_repositories_metering_archive',\n            pathParts: {\n                node_id: params.node_id,\n                max_archive_version: params.max_archive_version\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRepositoriesMeteringInfo(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/_repositories_metering`;\n        const meta = {\n            name: 'nodes.get_repositories_metering_info',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async hotThreads(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/hot_threads`;\n        }\n        else {\n            method = 'GET';\n            path = '/_nodes/hot_threads';\n        }\n        const meta = {\n            name: 'nodes.hot_threads',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async info(params, options) {\n        const acceptedPath = ['node_id', 'metric'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null && params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else if (params.node_id != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}`;\n        }\n        else if (params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_nodes';\n        }\n        const meta = {\n            name: 'nodes.info',\n            pathParts: {\n                node_id: params.node_id,\n                metric: params.metric\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async reloadSecureSettings(params, options) {\n        const acceptedPath = ['node_id'];\n        const acceptedBody = ['secure_settings_password'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'POST';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/reload_secure_settings`;\n        }\n        else {\n            method = 'POST';\n            path = '/_nodes/reload_secure_settings';\n        }\n        const meta = {\n            name: 'nodes.reload_secure_settings',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = ['node_id', 'metric', 'index_metric'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null && params.metric != null && params.index_metric != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/stats/${encodeURIComponent(params.metric.toString())}/${encodeURIComponent(params.index_metric.toString())}`;\n        }\n        else if (params.node_id != null && params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/stats/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else if (params.metric != null && params.index_metric != null) {\n            method = 'GET';\n            path = `/_nodes/stats/${encodeURIComponent(params.metric.toString())}/${encodeURIComponent(params.index_metric.toString())}`;\n        }\n        else if (params.node_id != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/stats`;\n        }\n        else if (params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/stats/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_nodes/stats';\n        }\n        const meta = {\n            name: 'nodes.stats',\n            pathParts: {\n                node_id: params.node_id,\n                metric: params.metric,\n                index_metric: params.index_metric\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async usage(params, options) {\n        const acceptedPath = ['node_id', 'metric'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null && params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/usage/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else if (params.node_id != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/usage`;\n        }\n        else if (params.metric != null) {\n            method = 'GET';\n            path = `/_nodes/usage/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_nodes/usage';\n        }\n        const meta = {\n            name: 'nodes.usage',\n            pathParts: {\n                node_id: params.node_id,\n                metric: params.metric\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Nodes;\n//# sourceMappingURL=nodes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/nodes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/open_point_in_time.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/open_point_in_time.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function OpenPointInTimeApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['index_filter'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/${encodeURIComponent(params.index.toString())}/_pit`;\n    const meta = {\n        name: 'open_point_in_time',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = OpenPointInTimeApi;\n//# sourceMappingURL=open_point_in_time.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9vcGVuX3BvaW50X2luX3RpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNENBQTRDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9vcGVuX3BvaW50X2luX3RpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIE9wZW5Qb2ludEluVGltZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydpbmRleF9maWx0ZXInXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fcGl0YDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnb3Blbl9wb2ludF9pbl90aW1lJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE9wZW5Qb2ludEluVGltZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5fcG9pbnRfaW5fdGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/open_point_in_time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ping.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ping.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function PingApi(params, options) {\n    const acceptedPath = [];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'HEAD';\n    const path = '/';\n    const meta = {\n        name: 'ping'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = PingApi;\n//# sourceMappingURL=ping.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9waW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gUGluZ0FwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnSEVBRCc7XG4gICAgY29uc3QgcGF0aCA9ICcvJztcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAncGluZydcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFBpbmdBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ping.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/profiling.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/profiling.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Profiling {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async flamegraph(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_profiling/flamegraph';\n        const meta = {\n            name: 'profiling.flamegraph'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stacktraces(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_profiling/stacktraces';\n        const meta = {\n            name: 'profiling.stacktraces'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async status(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_profiling/status';\n        const meta = {\n            name: 'profiling.status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async topnFunctions(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_profiling/topn/functions';\n        const meta = {\n            name: 'profiling.topn_functions'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Profiling;\n//# sourceMappingURL=profiling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9wcm9maWxpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcHJvZmlsaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBQcm9maWxpbmcge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zcG9ydCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cmFuc3BvcnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgfVxuICAgIGFzeW5jIGZsYW1lZ3JhcGgocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3Byb2ZpbGluZy9mbGFtZWdyYXBoJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdwcm9maWxpbmcuZmxhbWVncmFwaCdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBzdGFja3RyYWNlcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fcHJvZmlsaW5nL3N0YWNrdHJhY2VzJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdwcm9maWxpbmcuc3RhY2t0cmFjZXMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgc3RhdHVzKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3Byb2ZpbGluZy9zdGF0dXMnO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3Byb2ZpbGluZy5zdGF0dXMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgdG9wbkZ1bmN0aW9ucyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fcHJvZmlsaW5nL3RvcG4vZnVuY3Rpb25zJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdwcm9maWxpbmcudG9wbl9mdW5jdGlvbnMnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQcm9maWxpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/profiling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/put_script.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/put_script.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function PutScriptApi(params, options) {\n    const acceptedPath = ['id', 'context'];\n    const acceptedBody = ['script'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.id != null && params.context != null) {\n        method = 'PUT';\n        path = `/_scripts/${encodeURIComponent(params.id.toString())}/${encodeURIComponent(params.context.toString())}`;\n    }\n    else {\n        method = 'PUT';\n        path = `/_scripts/${encodeURIComponent(params.id.toString())}`;\n    }\n    const meta = {\n        name: 'put_script',\n        pathParts: {\n            id: params.id,\n            context: params.context\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = PutScriptApi;\n//# sourceMappingURL=put_script.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9wdXRfc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHlDQUF5QyxHQUFHLDhDQUE4QztBQUN0SDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUNBQXlDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcHV0X3NjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gUHV0U2NyaXB0QXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnLCAnY29udGV4dCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnc2NyaXB0J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pZCAhPSBudWxsICYmIHBhcmFtcy5jb250ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgbWV0aG9kID0gJ1BVVCc7XG4gICAgICAgIHBhdGggPSBgL19zY3JpcHRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX0vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmNvbnRleHQudG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBwYXRoID0gYC9fc2NyaXB0cy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaWQudG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3B1dF9zY3JpcHQnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBjb250ZXh0OiBwYXJhbXMuY29udGV4dFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQdXRTY3JpcHRBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXRfc2NyaXB0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/put_script.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/query_rules.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/query_rules.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass QueryRules {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteRule(params, options) {\n        const acceptedPath = ['ruleset_id', 'rule_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}/_rule/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'query_rules.delete_rule',\n            pathParts: {\n                ruleset_id: params.ruleset_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteRuleset(params, options) {\n        const acceptedPath = ['ruleset_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}`;\n        const meta = {\n            name: 'query_rules.delete_ruleset',\n            pathParts: {\n                ruleset_id: params.ruleset_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRule(params, options) {\n        const acceptedPath = ['ruleset_id', 'rule_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}/_rule/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'query_rules.get_rule',\n            pathParts: {\n                ruleset_id: params.ruleset_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRuleset(params, options) {\n        const acceptedPath = ['ruleset_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}`;\n        const meta = {\n            name: 'query_rules.get_ruleset',\n            pathParts: {\n                ruleset_id: params.ruleset_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async listRulesets(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_query_rules';\n        const meta = {\n            name: 'query_rules.list_rulesets'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putRule(params, options) {\n        const acceptedPath = ['ruleset_id', 'rule_id'];\n        const acceptedBody = ['type', 'criteria', 'actions', 'priority'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}/_rule/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'query_rules.put_rule',\n            pathParts: {\n                ruleset_id: params.ruleset_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putRuleset(params, options) {\n        const acceptedPath = ['ruleset_id'];\n        const acceptedBody = ['rules'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}`;\n        const meta = {\n            name: 'query_rules.put_ruleset',\n            pathParts: {\n                ruleset_id: params.ruleset_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async test(params, options) {\n        const acceptedPath = ['ruleset_id'];\n        const acceptedBody = ['match_criteria'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_query_rules/${encodeURIComponent(params.ruleset_id.toString())}/_test`;\n        const meta = {\n            name: 'query_rules.test',\n            pathParts: {\n                ruleset_id: params.ruleset_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = QueryRules;\n//# sourceMappingURL=query_rules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/query_rules.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rank_eval.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/rank_eval.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function RankEvalApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['requests', 'metric'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_rank_eval`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_rank_eval';\n    }\n    const meta = {\n        name: 'rank_eval',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = RankEvalApi;\n//# sourceMappingURL=rank_eval.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9yYW5rX2V2YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcmFua19ldmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBSYW5rRXZhbEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydyZXF1ZXN0cycsICdtZXRyaWMnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgbGV0IHBhdGggPSAnJztcbiAgICBpZiAocGFyYW1zLmluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSBgLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleC50b1N0cmluZygpKX0vX3JhbmtfZXZhbGA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9ICcvX3JhbmtfZXZhbCc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdyYW5rX2V2YWwnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmFua0V2YWxBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5rX2V2YWwuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rank_eval.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/reindex.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ReindexApi(params, options) {\n    const acceptedPath = [];\n    const acceptedBody = ['conflicts', 'dest', 'max_docs', 'script', 'size', 'source'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = '/_reindex';\n    const meta = {\n        name: 'reindex'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ReindexApi;\n//# sourceMappingURL=reindex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9yZWluZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcmVpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gUmVpbmRleEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2NvbmZsaWN0cycsICdkZXN0JywgJ21heF9kb2NzJywgJ3NjcmlwdCcsICdzaXplJywgJ3NvdXJjZSddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICBjb25zdCBwYXRoID0gJy9fcmVpbmRleCc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3JlaW5kZXgnXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBSZWluZGV4QXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVpbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex_rethrottle.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/reindex_rethrottle.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ReindexRethrottleApi(params, options) {\n    const acceptedPath = ['task_id'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/_reindex/${encodeURIComponent(params.task_id.toString())}/_rethrottle`;\n    const meta = {\n        name: 'reindex_rethrottle',\n        pathParts: {\n            task_id: params.task_id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ReindexRethrottleApi;\n//# sourceMappingURL=reindex_rethrottle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9yZWluZGV4X3JldGhyb3R0bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhDQUE4QztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcmVpbmRleF9yZXRocm90dGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBSZWluZGV4UmV0aHJvdHRsZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3Rhc2tfaWQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvX3JlaW5kZXgvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRhc2tfaWQudG9TdHJpbmcoKSl9L19yZXRocm90dGxlYDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAncmVpbmRleF9yZXRocm90dGxlJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICB0YXNrX2lkOiBwYXJhbXMudGFza19pZFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBSZWluZGV4UmV0aHJvdHRsZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlaW5kZXhfcmV0aHJvdHRsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex_rethrottle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/render_search_template.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/render_search_template.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function RenderSearchTemplateApi(params, options) {\n    const acceptedPath = ['id'];\n    const acceptedBody = ['file', 'params', 'source'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.id != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/_render/template/${encodeURIComponent(params.id.toString())}`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_render/template';\n    }\n    const meta = {\n        name: 'render_search_template',\n        pathParts: {\n            id: params.id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = RenderSearchTemplateApi;\n//# sourceMappingURL=render_search_template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9yZW5kZXJfc2VhcmNoX3RlbXBsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MseUNBQXlDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvcmVuZGVyX3NlYXJjaF90ZW1wbGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gUmVuZGVyU2VhcmNoVGVtcGxhdGVBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpZCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnZmlsZScsICdwYXJhbXMnLCAnc291cmNlJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC9fcmVuZGVyL3RlbXBsYXRlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSAnL19yZW5kZXIvdGVtcGxhdGUnO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAncmVuZGVyX3NlYXJjaF90ZW1wbGF0ZScsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaWQ6IHBhcmFtcy5pZFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBSZW5kZXJTZWFyY2hUZW1wbGF0ZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlcl9zZWFyY2hfdGVtcGxhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/render_search_template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rollup.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/rollup.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Rollup {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteJob(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_rollup/job/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'rollup.delete_job',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getJobs(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_rollup/job/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_rollup/job';\n        }\n        const meta = {\n            name: 'rollup.get_jobs',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRollupCaps(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'GET';\n            path = `/_rollup/data/${encodeURIComponent(params.id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_rollup/data';\n        }\n        const meta = {\n            name: 'rollup.get_rollup_caps',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRollupIndexCaps(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_rollup/data`;\n        const meta = {\n            name: 'rollup.get_rollup_index_caps',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putJob(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['cron', 'groups', 'index_pattern', 'metrics', 'page_size', 'rollup_index', 'timeout', 'headers'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_rollup/job/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'rollup.put_job',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async rollupSearch(params, options) {\n        const acceptedPath = ['index'];\n        const acceptedBody = ['aggregations', 'aggs', 'query', 'size'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/${encodeURIComponent(params.index.toString())}/_rollup_search`;\n        const meta = {\n            name: 'rollup.rollup_search',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async startJob(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_rollup/job/${encodeURIComponent(params.id.toString())}/_start`;\n        const meta = {\n            name: 'rollup.start_job',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stopJob(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_rollup/job/${encodeURIComponent(params.id.toString())}/_stop`;\n        const meta = {\n            name: 'rollup.stop_job',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Rollup;\n//# sourceMappingURL=rollup.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rollup.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scripts_painless_execute.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/scripts_painless_execute.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ScriptsPainlessExecuteApi(params, options) {\n    const acceptedPath = [];\n    const acceptedBody = ['context', 'context_setup', 'script'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = '/_scripts/painless/_execute';\n    const meta = {\n        name: 'scripts_painless_execute'\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ScriptsPainlessExecuteApi;\n//# sourceMappingURL=scripts_painless_execute.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zY3JpcHRzX3BhaW5sZXNzX2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL3NjcmlwdHNfcGFpbmxlc3NfZXhlY3V0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gU2NyaXB0c1BhaW5sZXNzRXhlY3V0ZUFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2NvbnRleHQnLCAnY29udGV4dF9zZXR1cCcsICdzY3JpcHQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gJy9fc2NyaXB0cy9wYWlubGVzcy9fZXhlY3V0ZSc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3NjcmlwdHNfcGFpbmxlc3NfZXhlY3V0ZSdcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcmlwdHNQYWlubGVzc0V4ZWN1dGVBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY3JpcHRzX3BhaW5sZXNzX2V4ZWN1dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scripts_painless_execute.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scroll.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/scroll.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function ScrollApi(params, options) {\n    const acceptedPath = [];\n    const acceptedBody = ['scroll', 'scroll_id'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = '/_search/scroll';\n    const meta = {\n        name: 'scroll',\n        pathParts: {\n            scroll_id: params.scroll_id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = ScrollApi;\n//# sourceMappingURL=scroll.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zY3JvbGwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zY3JvbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIFNjcm9sbEFwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ3Njcm9sbCcsICdzY3JvbGxfaWQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gJy9fc2VhcmNoL3Njcm9sbCc7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3Njcm9sbCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgc2Nyb2xsX2lkOiBwYXJhbXMuc2Nyb2xsX2lkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbEFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcm9sbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scroll.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/search.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function SearchApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['aggregations', 'aggs', 'collapse', 'explain', 'ext', 'from', 'highlight', 'track_total_hits', 'indices_boost', 'docvalue_fields', 'knn', 'rank', 'min_score', 'post_filter', 'profile', 'query', 'rescore', 'retriever', 'script_fields', 'search_after', 'size', 'slice', 'sort', '_source', 'fields', 'suggest', 'terminate_after', 'timeout', 'track_scores', 'version', 'seq_no_primary_term', 'stored_fields', 'pit', 'runtime_mappings', 'stats'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            if (key === 'sort' && typeof params[key] === 'string' && params[key].includes(':')) { // eslint-disable-line\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n            else {\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_search`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_search';\n    }\n    const meta = {\n        name: 'search',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = SearchApi;\n//# sourceMappingURL=search.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvc2VhcmNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBTZWFyY2hBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnYWdncmVnYXRpb25zJywgJ2FnZ3MnLCAnY29sbGFwc2UnLCAnZXhwbGFpbicsICdleHQnLCAnZnJvbScsICdoaWdobGlnaHQnLCAndHJhY2tfdG90YWxfaGl0cycsICdpbmRpY2VzX2Jvb3N0JywgJ2RvY3ZhbHVlX2ZpZWxkcycsICdrbm4nLCAncmFuaycsICdtaW5fc2NvcmUnLCAncG9zdF9maWx0ZXInLCAncHJvZmlsZScsICdxdWVyeScsICdyZXNjb3JlJywgJ3JldHJpZXZlcicsICdzY3JpcHRfZmllbGRzJywgJ3NlYXJjaF9hZnRlcicsICdzaXplJywgJ3NsaWNlJywgJ3NvcnQnLCAnX3NvdXJjZScsICdmaWVsZHMnLCAnc3VnZ2VzdCcsICd0ZXJtaW5hdGVfYWZ0ZXInLCAndGltZW91dCcsICd0cmFja19zY29yZXMnLCAndmVyc2lvbicsICdzZXFfbm9fcHJpbWFyeV90ZXJtJywgJ3N0b3JlZF9maWVsZHMnLCAncGl0JywgJ3J1bnRpbWVfbWFwcGluZ3MnLCAnc3RhdHMnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnc29ydCcgJiYgdHlwZW9mIHBhcmFtc1trZXldID09PSAnc3RyaW5nJyAmJiBwYXJhbXNba2V5XS5pbmNsdWRlcygnOicpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgcGF0aCA9ICcnO1xuICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fc2VhcmNoYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gJy9fc2VhcmNoJztcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3NlYXJjaCcsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleFxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZWFyY2hBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWFyY2guanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_application.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/search_application.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass SearchApplication {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async delete(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_application/search_application/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'search_application.delete',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteBehavioralAnalytics(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_application/analytics/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'search_application.delete_behavioral_analytics',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_application/search_application/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'search_application.get',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getBehavioralAnalytics(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_application/analytics/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_application/analytics';\n        }\n        const meta = {\n            name: 'search_application.get_behavioral_analytics',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async list(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_application/search_application';\n        const meta = {\n            name: 'search_application.list'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async postBehavioralAnalyticsEvent(params, options) {\n        const acceptedPath = ['collection_name', 'event_type'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_application/analytics/${encodeURIComponent(params.collection_name.toString())}/event/${encodeURIComponent(params.event_type.toString())}`;\n        const meta = {\n            name: 'search_application.post_behavioral_analytics_event',\n            pathParts: {\n                collection_name: params.collection_name,\n                event_type: params.event_type\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async put(params, options) {\n        var _a;\n        const acceptedPath = ['name'];\n        const acceptedBody = ['search_application'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_application/search_application/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'search_application.put',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putBehavioralAnalytics(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_application/analytics/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'search_application.put_behavioral_analytics',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async renderQuery(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_application/search_application/${encodeURIComponent(params.name.toString())}/_render_query`;\n        const meta = {\n            name: 'search_application.render_query',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async search(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['params'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = `/_application/search_application/${encodeURIComponent(params.name.toString())}/_search`;\n        const meta = {\n            name: 'search_application.search',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = SearchApplication;\n//# sourceMappingURL=search_application.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfYXBwbGljYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwyQ0FBMkM7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkNBQTJDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELDJDQUEyQztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDJDQUEyQztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0RBQXNELFNBQVMsaURBQWlEO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwyQ0FBMkM7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkNBQTJDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELDJDQUEyQztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxjQUFjO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELDJDQUEyQztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfYXBwbGljYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFNlYXJjaEFwcGxpY2F0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBkZWxldGUocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnbmFtZSddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fYXBwbGljYXRpb24vc2VhcmNoX2FwcGxpY2F0aW9uLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5uYW1lLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2VhcmNoX2FwcGxpY2F0aW9uLmRlbGV0ZScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZUJlaGF2aW9yYWxBbmFseXRpY3MocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnbmFtZSddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fYXBwbGljYXRpb24vYW5hbHl0aWNzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5uYW1lLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2VhcmNoX2FwcGxpY2F0aW9uLmRlbGV0ZV9iZWhhdmlvcmFsX2FuYWx5dGljcycsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGdldChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19hcHBsaWNhdGlvbi9zZWFyY2hfYXBwbGljYXRpb24vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5hbWUudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzZWFyY2hfYXBwbGljYXRpb24uZ2V0JyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHBhcmFtcy5uYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QmVoYXZpb3JhbEFuYWx5dGljcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBtZXRob2QgPSAnJztcbiAgICAgICAgbGV0IHBhdGggPSAnJztcbiAgICAgICAgaWYgKHBhcmFtcy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9IGAvX2FwcGxpY2F0aW9uL2FuYWx5dGljcy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMubmFtZS50b1N0cmluZygpKX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gJy9fYXBwbGljYXRpb24vYW5hbHl0aWNzJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NlYXJjaF9hcHBsaWNhdGlvbi5nZXRfYmVoYXZpb3JhbF9hbmFseXRpY3MnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogcGFyYW1zLm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL19hcHBsaWNhdGlvbi9zZWFyY2hfYXBwbGljYXRpb24nO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NlYXJjaF9hcHBsaWNhdGlvbi5saXN0J1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHBvc3RCZWhhdmlvcmFsQW5hbHl0aWNzRXZlbnQocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnY29sbGVjdGlvbl9uYW1lJywgJ2V2ZW50X3R5cGUnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19hcHBsaWNhdGlvbi9hbmFseXRpY3MvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmNvbGxlY3Rpb25fbmFtZS50b1N0cmluZygpKX0vZXZlbnQvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmV2ZW50X3R5cGUudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzZWFyY2hfYXBwbGljYXRpb24ucG9zdF9iZWhhdmlvcmFsX2FuYWx5dGljc19ldmVudCcsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uX25hbWU6IHBhcmFtcy5jb2xsZWN0aW9uX25hbWUsXG4gICAgICAgICAgICAgICAgZXZlbnRfdHlwZTogcGFyYW1zLmV2ZW50X3R5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBwdXQocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyduYW1lJ107XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnc2VhcmNoX2FwcGxpY2F0aW9uJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgbGV0IGJvZHkgPSAoX2EgPSBwYXJhbXMuYm9keSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBib2R5ID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fYXBwbGljYXRpb24vc2VhcmNoX2FwcGxpY2F0aW9uLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5uYW1lLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2VhcmNoX2FwcGxpY2F0aW9uLnB1dCcsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHB1dEJlaGF2aW9yYWxBbmFseXRpY3MocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnbmFtZSddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fYXBwbGljYXRpb24vYW5hbHl0aWNzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5uYW1lLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2VhcmNoX2FwcGxpY2F0aW9uLnB1dF9iZWhhdmlvcmFsX2FuYWx5dGljcycsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHJlbmRlclF1ZXJ5KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ25hbWUnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL19hcHBsaWNhdGlvbi9zZWFyY2hfYXBwbGljYXRpb24vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5hbWUudG9TdHJpbmcoKSl9L19yZW5kZXJfcXVlcnlgO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NlYXJjaF9hcHBsaWNhdGlvbi5yZW5kZXJfcXVlcnknLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogcGFyYW1zLm5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBzZWFyY2gocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnbmFtZSddO1xuICAgICAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ3BhcmFtcyddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgICAgIGxldCBib2R5O1xuICAgICAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX2FwcGxpY2F0aW9uL3NlYXJjaF9hcHBsaWNhdGlvbi8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMubmFtZS50b1N0cmluZygpKX0vX3NlYXJjaGA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2VhcmNoX2FwcGxpY2F0aW9uLnNlYXJjaCcsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2VhcmNoQXBwbGljYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWFyY2hfYXBwbGljYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_application.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_mvt.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/search_mvt.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function SearchMvtApi(params, options) {\n    const acceptedPath = ['index', 'field', 'zoom', 'x', 'y'];\n    const acceptedBody = ['aggs', 'buffer', 'exact_bounds', 'extent', 'fields', 'grid_agg', 'grid_precision', 'grid_type', 'query', 'runtime_mappings', 'size', 'sort', 'track_total_hits', 'with_labels'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_mvt/${encodeURIComponent(params.field.toString())}/${encodeURIComponent(params.zoom.toString())}/${encodeURIComponent(params.x.toString())}/${encodeURIComponent(params.y.toString())}`;\n    const meta = {\n        name: 'search_mvt',\n        pathParts: {\n            index: params.index,\n            field: params.field,\n            zoom: params.zoom,\n            x: params.x,\n            y: params.y\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = SearchMvtApi;\n//# sourceMappingURL=search_mvt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfbXZ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QyxRQUFRLDRDQUE0QyxHQUFHLDJDQUEyQyxHQUFHLHdDQUF3QyxHQUFHLHdDQUF3QztBQUN6UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfbXZ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5hc3luYyBmdW5jdGlvbiBTZWFyY2hNdnRBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCcsICdmaWVsZCcsICd6b29tJywgJ3gnLCAneSddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnYWdncycsICdidWZmZXInLCAnZXhhY3RfYm91bmRzJywgJ2V4dGVudCcsICdmaWVsZHMnLCAnZ3JpZF9hZ2cnLCAnZ3JpZF9wcmVjaXNpb24nLCAnZ3JpZF90eXBlJywgJ3F1ZXJ5JywgJ3J1bnRpbWVfbWFwcGluZ3MnLCAnc2l6ZScsICdzb3J0JywgJ3RyYWNrX3RvdGFsX2hpdHMnLCAnd2l0aF9sYWJlbHMnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBib2R5ICE9IG51bGwgPyAnUE9TVCcgOiAnR0VUJztcbiAgICBjb25zdCBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19tdnQvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmZpZWxkLnRvU3RyaW5nKCkpfS8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuem9vbS50b1N0cmluZygpKX0vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLngudG9TdHJpbmcoKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy55LnRvU3RyaW5nKCkpfWA7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3NlYXJjaF9tdnQnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXgsXG4gICAgICAgICAgICBmaWVsZDogcGFyYW1zLmZpZWxkLFxuICAgICAgICAgICAgem9vbTogcGFyYW1zLnpvb20sXG4gICAgICAgICAgICB4OiBwYXJhbXMueCxcbiAgICAgICAgICAgIHk6IHBhcmFtcy55XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlYXJjaE12dEFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9tdnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_mvt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_shards.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/search_shards.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function SearchShardsApi(params, options) {\n    const acceptedPath = ['index'];\n    const querystring = {};\n    const body = undefined;\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_search_shards`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_search_shards';\n    }\n    const meta = {\n        name: 'search_shards',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = SearchShardsApi;\n//# sourceMappingURL=search_shards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfc2hhcmRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL3NlYXJjaF9zaGFyZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIFNlYXJjaFNoYXJkc0FwaShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ2luZGV4J107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pbmRleCAhPSBudWxsKSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19zZWFyY2hfc2hhcmRzYDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gJy9fc2VhcmNoX3NoYXJkcyc7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICdzZWFyY2hfc2hhcmRzJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlYXJjaFNoYXJkc0FwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9zaGFyZHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_shards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_template.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/search_template.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function SearchTemplateApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['explain', 'id', 'params', 'profile', 'source'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    params = params !== null && params !== void 0 ? params : {};\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_search/template`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = '/_search/template';\n    }\n    const meta = {\n        name: 'search_template',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = SearchTemplateApi;\n//# sourceMappingURL=search_template.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfdGVtcGxhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0Q0FBNEM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zZWFyY2hfdGVtcGxhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIFNlYXJjaFRlbXBsYXRlQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2V4cGxhaW4nLCAnaWQnLCAncGFyYW1zJywgJ3Byb2ZpbGUnLCAnc291cmNlJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pbmRleCAhPSBudWxsKSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L19zZWFyY2gvdGVtcGxhdGVgO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgIHBhdGggPSAnL19zZWFyY2gvdGVtcGxhdGUnO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAnc2VhcmNoX3RlbXBsYXRlJyxcbiAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlYXJjaFRlbXBsYXRlQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoX3RlbXBsYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_template.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/searchable_snapshots.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/searchable_snapshots.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass SearchableSnapshots {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async cacheStats(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_searchable_snapshots/${encodeURIComponent(params.node_id.toString())}/cache/stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_searchable_snapshots/cache/stats';\n        }\n        const meta = {\n            name: 'searchable_snapshots.cache_stats',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCache(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'POST';\n            path = `/${encodeURIComponent(params.index.toString())}/_searchable_snapshots/cache/clear`;\n        }\n        else {\n            method = 'POST';\n            path = '/_searchable_snapshots/cache/clear';\n        }\n        const meta = {\n            name: 'searchable_snapshots.clear_cache',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async mount(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const acceptedBody = ['index', 'renamed_index', 'index_settings', 'ignore_index_settings'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}/_mount`;\n        const meta = {\n            name: 'searchable_snapshots.mount',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = 'GET';\n            path = `/${encodeURIComponent(params.index.toString())}/_searchable_snapshots/stats`;\n        }\n        else {\n            method = 'GET';\n            path = '/_searchable_snapshots/stats';\n        }\n        const meta = {\n            name: 'searchable_snapshots.stats',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = SearchableSnapshots;\n//# sourceMappingURL=searchable_snapshots.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/searchable_snapshots.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/security.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/security.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Security {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async activateUserProfile(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['access_token', 'grant_type', 'password', 'username'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/profile/_activate';\n        const meta = {\n            name: 'security.activate_user_profile'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async authenticate(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/_authenticate';\n        const meta = {\n            name: 'security.authenticate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async bulkDeleteRole(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['names'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = '/_security/role';\n        const meta = {\n            name: 'security.bulk_delete_role'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async bulkPutRole(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['roles'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/role';\n        const meta = {\n            name: 'security.bulk_put_role'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async bulkUpdateApiKeys(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/api_key/_bulk_update';\n        const meta = {\n            name: 'security.bulk_update_api_keys'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async changePassword(params, options) {\n        const acceptedPath = ['username'];\n        const acceptedBody = ['password', 'password_hash'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.username != null) {\n            method = 'PUT';\n            path = `/_security/user/${encodeURIComponent(params.username.toString())}/_password`;\n        }\n        else {\n            method = 'PUT';\n            path = '/_security/user/_password';\n        }\n        const meta = {\n            name: 'security.change_password',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearApiKeyCache(params, options) {\n        const acceptedPath = ['ids'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_security/api_key/${encodeURIComponent(params.ids.toString())}/_clear_cache`;\n        const meta = {\n            name: 'security.clear_api_key_cache',\n            pathParts: {\n                ids: params.ids\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCachedPrivileges(params, options) {\n        const acceptedPath = ['application'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_security/privilege/${encodeURIComponent(params.application.toString())}/_clear_cache`;\n        const meta = {\n            name: 'security.clear_cached_privileges',\n            pathParts: {\n                application: params.application\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCachedRealms(params, options) {\n        const acceptedPath = ['realms'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_security/realm/${encodeURIComponent(params.realms.toString())}/_clear_cache`;\n        const meta = {\n            name: 'security.clear_cached_realms',\n            pathParts: {\n                realms: params.realms\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCachedRoles(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_security/role/${encodeURIComponent(params.name.toString())}/_clear_cache`;\n        const meta = {\n            name: 'security.clear_cached_roles',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clearCachedServiceTokens(params, options) {\n        const acceptedPath = ['namespace', 'service', 'name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}/credential/token/${encodeURIComponent(params.name.toString())}/_clear_cache`;\n        const meta = {\n            name: 'security.clear_cached_service_tokens',\n            pathParts: {\n                namespace: params.namespace,\n                service: params.service,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async createApiKey(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['expiration', 'name', 'role_descriptors', 'metadata'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_security/api_key';\n        const meta = {\n            name: 'security.create_api_key'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async createCrossClusterApiKey(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['access', 'expiration', 'metadata', 'name'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/cross_cluster/api_key';\n        const meta = {\n            name: 'security.create_cross_cluster_api_key'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async createServiceToken(params, options) {\n        const acceptedPath = ['namespace', 'service', 'name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.namespace != null && params.service != null && params.name != null) {\n            method = 'PUT';\n            path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}/credential/token/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'POST';\n            path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}/credential/token`;\n        }\n        const meta = {\n            name: 'security.create_service_token',\n            pathParts: {\n                namespace: params.namespace,\n                service: params.service,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deletePrivileges(params, options) {\n        const acceptedPath = ['application', 'name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_security/privilege/${encodeURIComponent(params.application.toString())}/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.delete_privileges',\n            pathParts: {\n                application: params.application,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteRole(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_security/role/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.delete_role',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteRoleMapping(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_security/role_mapping/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.delete_role_mapping',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteServiceToken(params, options) {\n        const acceptedPath = ['namespace', 'service', 'name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}/credential/token/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.delete_service_token',\n            pathParts: {\n                namespace: params.namespace,\n                service: params.service,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteUser(params, options) {\n        const acceptedPath = ['username'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_security/user/${encodeURIComponent(params.username.toString())}`;\n        const meta = {\n            name: 'security.delete_user',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async disableUser(params, options) {\n        const acceptedPath = ['username'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/user/${encodeURIComponent(params.username.toString())}/_disable`;\n        const meta = {\n            name: 'security.disable_user',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async disableUserProfile(params, options) {\n        const acceptedPath = ['uid'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/profile/${encodeURIComponent(params.uid.toString())}/_disable`;\n        const meta = {\n            name: 'security.disable_user_profile',\n            pathParts: {\n                uid: params.uid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async enableUser(params, options) {\n        const acceptedPath = ['username'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/user/${encodeURIComponent(params.username.toString())}/_enable`;\n        const meta = {\n            name: 'security.enable_user',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async enableUserProfile(params, options) {\n        const acceptedPath = ['uid'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/profile/${encodeURIComponent(params.uid.toString())}/_enable`;\n        const meta = {\n            name: 'security.enable_user_profile',\n            pathParts: {\n                uid: params.uid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async enrollKibana(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/enroll/kibana';\n        const meta = {\n            name: 'security.enroll_kibana'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async enrollNode(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/enroll/node';\n        const meta = {\n            name: 'security.enroll_node'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getApiKey(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/api_key';\n        const meta = {\n            name: 'security.get_api_key'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getBuiltinPrivileges(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/privilege/_builtin';\n        const meta = {\n            name: 'security.get_builtin_privileges'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getPrivileges(params, options) {\n        const acceptedPath = ['application', 'name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.application != null && params.name != null) {\n            method = 'GET';\n            path = `/_security/privilege/${encodeURIComponent(params.application.toString())}/${encodeURIComponent(params.name.toString())}`;\n        }\n        else if (params.application != null) {\n            method = 'GET';\n            path = `/_security/privilege/${encodeURIComponent(params.application.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_security/privilege';\n        }\n        const meta = {\n            name: 'security.get_privileges',\n            pathParts: {\n                application: params.application,\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRole(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_security/role/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_security/role';\n        }\n        const meta = {\n            name: 'security.get_role',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRoleMapping(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_security/role_mapping/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_security/role_mapping';\n        }\n        const meta = {\n            name: 'security.get_role_mapping',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getServiceAccounts(params, options) {\n        const acceptedPath = ['namespace', 'service'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.namespace != null && params.service != null) {\n            method = 'GET';\n            path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}`;\n        }\n        else if (params.namespace != null) {\n            method = 'GET';\n            path = `/_security/service/${encodeURIComponent(params.namespace.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_security/service';\n        }\n        const meta = {\n            name: 'security.get_service_accounts',\n            pathParts: {\n                namespace: params.namespace,\n                service: params.service\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getServiceCredentials(params, options) {\n        const acceptedPath = ['namespace', 'service'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_security/service/${encodeURIComponent(params.namespace.toString())}/${encodeURIComponent(params.service.toString())}/credential`;\n        const meta = {\n            name: 'security.get_service_credentials',\n            pathParts: {\n                namespace: params.namespace,\n                service: params.service\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSettings(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/settings';\n        const meta = {\n            name: 'security.get_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getToken(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['grant_type', 'scope', 'password', 'kerberos_ticket', 'refresh_token', 'username'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/oauth2/token';\n        const meta = {\n            name: 'security.get_token'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getUser(params, options) {\n        const acceptedPath = ['username'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.username != null) {\n            method = 'GET';\n            path = `/_security/user/${encodeURIComponent(params.username.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_security/user';\n        }\n        const meta = {\n            name: 'security.get_user',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getUserPrivileges(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_security/user/_privileges';\n        const meta = {\n            name: 'security.get_user_privileges'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getUserProfile(params, options) {\n        const acceptedPath = ['uid'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_security/profile/${encodeURIComponent(params.uid.toString())}`;\n        const meta = {\n            name: 'security.get_user_profile',\n            pathParts: {\n                uid: params.uid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async grantApiKey(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['api_key', 'grant_type', 'access_token', 'username', 'password', 'run_as'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/api_key/grant';\n        const meta = {\n            name: 'security.grant_api_key'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async hasPrivileges(params, options) {\n        const acceptedPath = ['user'];\n        const acceptedBody = ['application', 'cluster', 'index'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.user != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_security/user/${encodeURIComponent(params.user.toString())}/_has_privileges`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_security/user/_has_privileges';\n        }\n        const meta = {\n            name: 'security.has_privileges',\n            pathParts: {\n                user: params.user\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async hasPrivilegesUserProfile(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['uids', 'privileges'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_security/profile/_has_privileges';\n        const meta = {\n            name: 'security.has_privileges_user_profile'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async invalidateApiKey(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['id', 'ids', 'name', 'owner', 'realm_name', 'username'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = '/_security/api_key';\n        const meta = {\n            name: 'security.invalidate_api_key'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async invalidateToken(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['token', 'refresh_token', 'realm_name', 'username'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = '/_security/oauth2/token';\n        const meta = {\n            name: 'security.invalidate_token'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async oidcAuthenticate(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/oidc/authenticate';\n        const meta = {\n            name: 'security.oidc_authenticate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async oidcLogout(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/oidc/logout';\n        const meta = {\n            name: 'security.oidc_logout'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async oidcPrepareAuthentication(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/oidc/prepare';\n        const meta = {\n            name: 'security.oidc_prepare_authentication'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putPrivileges(params, options) {\n        var _a;\n        const acceptedPath = [];\n        const acceptedBody = ['privileges'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_security/privilege';\n        const meta = {\n            name: 'security.put_privileges'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putRole(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['applications', 'cluster', 'global', 'indices', 'remote_indices', 'metadata', 'run_as', 'description', 'transient_metadata'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/role/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.put_role',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putRoleMapping(params, options) {\n        const acceptedPath = ['name'];\n        const acceptedBody = ['enabled', 'metadata', 'roles', 'role_templates', 'rules', 'run_as'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/role_mapping/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'security.put_role_mapping',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putUser(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['username', 'email', 'full_name', 'metadata', 'password', 'password_hash', 'roles', 'enabled'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/user/${encodeURIComponent(params.username.toString())}`;\n        const meta = {\n            name: 'security.put_user',\n            pathParts: {\n                username: params.username\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async queryApiKeys(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['aggregations', 'aggs', 'query', 'from', 'sort', 'size', 'search_after'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_security/_query/api_key';\n        const meta = {\n            name: 'security.query_api_keys'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async queryRole(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['query', 'from', 'sort', 'size', 'search_after'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_security/_query/role';\n        const meta = {\n            name: 'security.query_role'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async queryUser(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['query', 'from', 'sort', 'size', 'search_after'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_security/_query/user';\n        const meta = {\n            name: 'security.query_user'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlAuthenticate(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['content', 'ids', 'realm'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/saml/authenticate';\n        const meta = {\n            name: 'security.saml_authenticate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlCompleteLogout(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['realm', 'ids', 'query_string', 'content'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/saml/complete_logout';\n        const meta = {\n            name: 'security.saml_complete_logout'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlInvalidate(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['acs', 'query_string', 'realm'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/saml/invalidate';\n        const meta = {\n            name: 'security.saml_invalidate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlLogout(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['token', 'refresh_token'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/saml/logout';\n        const meta = {\n            name: 'security.saml_logout'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlPrepareAuthentication(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['acs', 'realm', 'relay_state'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_security/saml/prepare';\n        const meta = {\n            name: 'security.saml_prepare_authentication'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async samlServiceProviderMetadata(params, options) {\n        const acceptedPath = ['realm_name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_security/saml/metadata/${encodeURIComponent(params.realm_name.toString())}`;\n        const meta = {\n            name: 'security.saml_service_provider_metadata',\n            pathParts: {\n                realm_name: params.realm_name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async suggestUserProfiles(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['name', 'size', 'data', 'hint'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_security/profile/_suggest';\n        const meta = {\n            name: 'security.suggest_user_profiles'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateApiKey(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['role_descriptors', 'metadata', 'expiration'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/api_key/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'security.update_api_key',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateCrossClusterApiKey(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['access', 'expiration', 'metadata'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/cross_cluster/api_key/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'security.update_cross_cluster_api_key',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateSettings(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_security/settings';\n        const meta = {\n            name: 'security.update_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateUserProfileData(params, options) {\n        const acceptedPath = ['uid'];\n        const acceptedBody = ['labels', 'data'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_security/profile/${encodeURIComponent(params.uid.toString())}/_data`;\n        const meta = {\n            name: 'security.update_user_profile_data',\n            pathParts: {\n                uid: params.uid\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Security;\n//# sourceMappingURL=security.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/security.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/shutdown.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/shutdown.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Shutdown {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteNode(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/shutdown`;\n        const meta = {\n            name: 'shutdown.delete_node',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getNode(params, options) {\n        const acceptedPath = ['node_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.node_id != null) {\n            method = 'GET';\n            path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/shutdown`;\n        }\n        else {\n            method = 'GET';\n            path = '/_nodes/shutdown';\n        }\n        const meta = {\n            name: 'shutdown.get_node',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putNode(params, options) {\n        const acceptedPath = ['node_id'];\n        const acceptedBody = ['type', 'reason', 'allocation_delay', 'target_node_name'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_nodes/${encodeURIComponent(params.node_id.toString())}/shutdown`;\n        const meta = {\n            name: 'shutdown.put_node',\n            pathParts: {\n                node_id: params.node_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Shutdown;\n//# sourceMappingURL=shutdown.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zaHV0ZG93bi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDhDQUE4QztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhDQUE4QztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBOEM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvc2h1dGRvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFNodXRkb3duIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVOb2RlKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ25vZGVfaWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnREVMRVRFJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX25vZGVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5ub2RlX2lkLnRvU3RyaW5nKCkpfS9zaHV0ZG93bmA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2h1dGRvd24uZGVsZXRlX25vZGUnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgbm9kZV9pZDogcGFyYW1zLm5vZGVfaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXROb2RlKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ25vZGVfaWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgICAgICBsZXQgcGF0aCA9ICcnO1xuICAgICAgICBpZiAocGFyYW1zLm5vZGVfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9fbm9kZXMvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5vZGVfaWQudG9TdHJpbmcoKSl9L3NodXRkb3duYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX25vZGVzL3NodXRkb3duJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NodXRkb3duLmdldF9ub2RlJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIG5vZGVfaWQ6IHBhcmFtcy5ub2RlX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgcHV0Tm9kZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydub2RlX2lkJ107XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsndHlwZScsICdyZWFzb24nLCAnYWxsb2NhdGlvbl9kZWxheScsICd0YXJnZXRfbm9kZV9uYW1lJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fbm9kZXMvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLm5vZGVfaWQudG9TdHJpbmcoKSl9L3NodXRkb3duYDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzaHV0ZG93bi5wdXRfbm9kZScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBub2RlX2lkOiBwYXJhbXMubm9kZV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2h1dGRvd247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaHV0ZG93bi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/shutdown.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/simulate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/simulate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Simulate {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async ingest(params, options) {\n        const acceptedPath = ['index'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.index != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_ingest/${encodeURIComponent(params.index.toString())}/_simulate`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_ingest/_simulate';\n        }\n        const meta = {\n            name: 'simulate.ingest',\n            pathParts: {\n                index: params.index\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Simulate;\n//# sourceMappingURL=simulate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zaW11bGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDRDQUE0QztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvc2ltdWxhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFNpbXVsYXRlIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBpbmdlc3QocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgICAgIGxldCBwYXRoID0gJyc7XG4gICAgICAgIGlmIChwYXJhbXMuaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9faW5nZXN0LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pbmRleC50b1N0cmluZygpKX0vX3NpbXVsYXRlYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX2luZ2VzdC9fc2ltdWxhdGUnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2ltdWxhdGUuaW5nZXN0JyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNpbXVsYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltdWxhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/simulate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/slm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/slm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Slm {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteLifecycle(params, options) {\n        const acceptedPath = ['policy_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_slm/policy/${encodeURIComponent(params.policy_id.toString())}`;\n        const meta = {\n            name: 'slm.delete_lifecycle',\n            pathParts: {\n                policy_id: params.policy_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async executeLifecycle(params, options) {\n        const acceptedPath = ['policy_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_slm/policy/${encodeURIComponent(params.policy_id.toString())}/_execute`;\n        const meta = {\n            name: 'slm.execute_lifecycle',\n            pathParts: {\n                policy_id: params.policy_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async executeRetention(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_slm/_execute_retention';\n        const meta = {\n            name: 'slm.execute_retention'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getLifecycle(params, options) {\n        const acceptedPath = ['policy_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.policy_id != null) {\n            method = 'GET';\n            path = `/_slm/policy/${encodeURIComponent(params.policy_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_slm/policy';\n        }\n        const meta = {\n            name: 'slm.get_lifecycle',\n            pathParts: {\n                policy_id: params.policy_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getStats(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_slm/stats';\n        const meta = {\n            name: 'slm.get_stats'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getStatus(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_slm/status';\n        const meta = {\n            name: 'slm.get_status'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putLifecycle(params, options) {\n        const acceptedPath = ['policy_id'];\n        const acceptedBody = ['config', 'name', 'repository', 'retention', 'schedule'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_slm/policy/${encodeURIComponent(params.policy_id.toString())}`;\n        const meta = {\n            name: 'slm.put_lifecycle',\n            pathParts: {\n                policy_id: params.policy_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async start(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_slm/start';\n        const meta = {\n            name: 'slm.start'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stop(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_slm/stop';\n        const meta = {\n            name: 'slm.stop'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Slm;\n//# sourceMappingURL=slm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zbG0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxnREFBZ0Q7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsZ0RBQWdEO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0RBQWdEO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxjQUFjO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGdEQUFnRDtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zbG0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFNsbSB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlTGlmZWN5Y2xlKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3BvbGljeV9pZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fc2xtL3BvbGljeS8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMucG9saWN5X2lkLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2xtLmRlbGV0ZV9saWZlY3ljbGUnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgcG9saWN5X2lkOiBwYXJhbXMucG9saWN5X2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZUxpZmVjeWNsZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydwb2xpY3lfaWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUFVUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX3NsbS9wb2xpY3kvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnBvbGljeV9pZC50b1N0cmluZygpKX0vX2V4ZWN1dGVgO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NsbS5leGVjdXRlX2xpZmVjeWNsZScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICBwb2xpY3lfaWQ6IHBhcmFtcy5wb2xpY3lfaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlUmV0ZW50aW9uKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fc2xtL19leGVjdXRlX3JldGVudGlvbic7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2xtLmV4ZWN1dGVfcmV0ZW50aW9uJ1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGdldExpZmVjeWNsZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydwb2xpY3lfaWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgICAgICBsZXQgcGF0aCA9ICcnO1xuICAgICAgICBpZiAocGFyYW1zLnBvbGljeV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgICAgIHBhdGggPSBgL19zbG0vcG9saWN5LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5wb2xpY3lfaWQudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX3NsbS9wb2xpY3knO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2xtLmdldF9saWZlY3ljbGUnLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgcG9saWN5X2lkOiBwYXJhbXMucG9saWN5X2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U3RhdHMocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3NsbS9zdGF0cyc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAnc2xtLmdldF9zdGF0cydcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRTdGF0dXMocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3NsbS9zdGF0dXMnO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NsbS5nZXRfc3RhdHVzJ1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHB1dExpZmVjeWNsZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydwb2xpY3lfaWQnXTtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRCb2R5ID0gWydjb25maWcnLCAnbmFtZScsICdyZXBvc2l0b3J5JywgJ3JldGVudGlvbicsICdzY2hlZHVsZSddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgICAgIGxldCBib2R5O1xuICAgICAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUFVUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX3NsbS9wb2xpY3kvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnBvbGljeV9pZC50b1N0cmluZygpKX1gO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3NsbS5wdXRfbGlmZWN5Y2xlJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHBvbGljeV9pZDogcGFyYW1zLnBvbGljeV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fc2xtL3N0YXJ0JztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzbG0uc3RhcnQnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3NsbS9zdG9wJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzbG0uc3RvcCdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNsbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/slm.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/snapshot.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/snapshot.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Snapshot {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async cleanupRepository(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.name.toString())}/_cleanup`;\n        const meta = {\n            name: 'snapshot.cleanup_repository',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async clone(params, options) {\n        const acceptedPath = ['repository', 'snapshot', 'target_snapshot'];\n        const acceptedBody = ['indices'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}/_clone/${encodeURIComponent(params.target_snapshot.toString())}`;\n        const meta = {\n            name: 'snapshot.clone',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot,\n                target_snapshot: params.target_snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async create(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const acceptedBody = ['ignore_unavailable', 'include_global_state', 'indices', 'feature_states', 'metadata', 'partial'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}`;\n        const meta = {\n            name: 'snapshot.create',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async createRepository(params, options) {\n        var _a;\n        const acceptedPath = ['name'];\n        const acceptedBody = ['repository'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_snapshot/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'snapshot.create_repository',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async delete(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}`;\n        const meta = {\n            name: 'snapshot.delete',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteRepository(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_snapshot/${encodeURIComponent(params.name.toString())}`;\n        const meta = {\n            name: 'snapshot.delete_repository',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}`;\n        const meta = {\n            name: 'snapshot.get',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getRepository(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.name != null) {\n            method = 'GET';\n            path = `/_snapshot/${encodeURIComponent(params.name.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_snapshot';\n        }\n        const meta = {\n            name: 'snapshot.get_repository',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async repositoryAnalyze(params, options) {\n        const acceptedPath = ['repository'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/_analyze`;\n        const meta = {\n            name: 'snapshot.repository_analyze',\n            pathParts: {\n                repository: params.repository\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async repositoryVerifyIntegrity(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.name.toString())}/_verify_integrity`;\n        const meta = {\n            name: 'snapshot.repository_verify_integrity',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async restore(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const acceptedBody = ['feature_states', 'ignore_index_settings', 'ignore_unavailable', 'include_aliases', 'include_global_state', 'index_settings', 'indices', 'partial', 'rename_pattern', 'rename_replacement'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}/_restore`;\n        const meta = {\n            name: 'snapshot.restore',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async status(params, options) {\n        const acceptedPath = ['repository', 'snapshot'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.repository != null && params.snapshot != null) {\n            method = 'GET';\n            path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/${encodeURIComponent(params.snapshot.toString())}/_status`;\n        }\n        else if (params.repository != null) {\n            method = 'GET';\n            path = `/_snapshot/${encodeURIComponent(params.repository.toString())}/_status`;\n        }\n        else {\n            method = 'GET';\n            path = '/_snapshot/_status';\n        }\n        const meta = {\n            name: 'snapshot.status',\n            pathParts: {\n                repository: params.repository,\n                snapshot: params.snapshot\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async verifyRepository(params, options) {\n        const acceptedPath = ['name'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_snapshot/${encodeURIComponent(params.name.toString())}/_verify`;\n        const meta = {\n            name: 'snapshot.verify_repository',\n            pathParts: {\n                name: params.name\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Snapshot;\n//# sourceMappingURL=snapshot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/snapshot.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/sql.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/sql.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Sql {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async clearCursor(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['cursor'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_sql/close';\n        const meta = {\n            name: 'sql.clear_cursor'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteAsync(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_sql/async/delete/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'sql.delete_async',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAsync(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_sql/async/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'sql.get_async',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getAsyncStatus(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_sql/async/status/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'sql.get_async_status',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async query(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['catalog', 'columnar', 'cursor', 'fetch_size', 'filter', 'query', 'request_timeout', 'page_timeout', 'time_zone', 'field_multi_value_leniency', 'runtime_mappings', 'wait_for_completion_timeout', 'params', 'keep_alive', 'keep_on_completion', 'index_using_frozen'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_sql';\n        const meta = {\n            name: 'sql.query'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async translate(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['fetch_size', 'filter', 'query', 'time_zone'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_sql/translate';\n        const meta = {\n            name: 'sql.translate'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Sql;\n//# sourceMappingURL=sql.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/sql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ssl.js":
/*!****************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/ssl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Ssl {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async certificates(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_ssl/certificates';\n        const meta = {\n            name: 'ssl.certificates'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Ssl;\n//# sourceMappingURL=ssl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zc2wuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS9zc2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFNzbCB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgY2VydGlmaWNhdGVzKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL19zc2wvY2VydGlmaWNhdGVzJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdzc2wuY2VydGlmaWNhdGVzJ1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3NsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3NsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ssl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/synonyms.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/synonyms.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Synonyms {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteSynonym(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_synonyms/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'synonyms.delete_synonym',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteSynonymRule(params, options) {\n        const acceptedPath = ['set_id', 'rule_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_synonyms/${encodeURIComponent(params.set_id.toString())}/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'synonyms.delete_synonym_rule',\n            pathParts: {\n                set_id: params.set_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSynonym(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_synonyms/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'synonyms.get_synonym',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSynonymRule(params, options) {\n        const acceptedPath = ['set_id', 'rule_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_synonyms/${encodeURIComponent(params.set_id.toString())}/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'synonyms.get_synonym_rule',\n            pathParts: {\n                set_id: params.set_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSynonymsSets(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_synonyms';\n        const meta = {\n            name: 'synonyms.get_synonyms_sets'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putSynonym(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['synonyms_set'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_synonyms/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'synonyms.put_synonym',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putSynonymRule(params, options) {\n        const acceptedPath = ['set_id', 'rule_id'];\n        const acceptedBody = ['synonyms'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_synonyms/${encodeURIComponent(params.set_id.toString())}/${encodeURIComponent(params.rule_id.toString())}`;\n        const meta = {\n            name: 'synonyms.put_synonym_rule',\n            pathParts: {\n                set_id: params.set_id,\n                rule_id: params.rule_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Synonyms;\n//# sourceMappingURL=synonyms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/synonyms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/tasks.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/tasks.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Tasks {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async cancel(params, options) {\n        const acceptedPath = ['task_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.task_id != null) {\n            method = 'POST';\n            path = `/_tasks/${encodeURIComponent(params.task_id.toString())}/_cancel`;\n        }\n        else {\n            method = 'POST';\n            path = '/_tasks/_cancel';\n        }\n        const meta = {\n            name: 'tasks.cancel',\n            pathParts: {\n                task_id: params.task_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async get(params, options) {\n        const acceptedPath = ['task_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_tasks/${encodeURIComponent(params.task_id.toString())}`;\n        const meta = {\n            name: 'tasks.get',\n            pathParts: {\n                task_id: params.task_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async list(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_tasks';\n        const meta = {\n            name: 'tasks.list'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Tasks;\n//# sourceMappingURL=tasks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS90YXNrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOENBQThDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBOEM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvdGFza3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIFRhc2tzIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBjYW5jZWwocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsndGFza19pZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgICAgIGxldCBwYXRoID0gJyc7XG4gICAgICAgIGlmIChwYXJhbXMudGFza19pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9fdGFza3MvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRhc2tfaWQudG9TdHJpbmcoKSl9L19jYW5jZWxgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX3Rhc2tzL19jYW5jZWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAndGFza3MuY2FuY2VsJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRhc2tfaWQ6IHBhcmFtcy50YXNrX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3Rhc2tfaWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX3Rhc2tzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50YXNrX2lkLnRvU3RyaW5nKCkpfWA7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICBuYW1lOiAndGFza3MuZ2V0JyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRhc2tfaWQ6IHBhcmFtcy50YXNrX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgbGlzdChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fdGFza3MnO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3Rhc2tzLmxpc3QnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUYXNrcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhc2tzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/tasks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/terms_enum.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/terms_enum.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function TermsEnumApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['field', 'size', 'timeout', 'case_insensitive', 'index_filter', 'string', 'search_after'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = body != null ? 'POST' : 'GET';\n    const path = `/${encodeURIComponent(params.index.toString())}/_terms_enum`;\n    const meta = {\n        name: 'terms_enum',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = TermsEnumApi;\n//# sourceMappingURL=terms_enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS90ZXJtc19lbnVtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUE0QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvdGVybXNfZW51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gVGVybXNFbnVtQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2ZpZWxkJywgJ3NpemUnLCAndGltZW91dCcsICdjYXNlX2luc2Vuc2l0aXZlJywgJ2luZGV4X2ZpbHRlcicsICdzdHJpbmcnLCAnc2VhcmNoX2FmdGVyJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fdGVybXNfZW51bWA7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgbmFtZTogJ3Rlcm1zX2VudW0nLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gVGVybXNFbnVtQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVybXNfZW51bS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/terms_enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/termvectors.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/termvectors.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function TermvectorsApi(params, options) {\n    const acceptedPath = ['index', 'id'];\n    const acceptedBody = ['doc', 'filter', 'per_field_analyzer'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    let method = '';\n    let path = '';\n    if (params.index != null && params.id != null) {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_termvectors/${encodeURIComponent(params.id.toString())}`;\n    }\n    else {\n        method = body != null ? 'POST' : 'GET';\n        path = `/${encodeURIComponent(params.index.toString())}/_termvectors`;\n    }\n    const meta = {\n        name: 'termvectors',\n        pathParts: {\n            index: params.index,\n            id: params.id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = TermvectorsApi;\n//# sourceMappingURL=termvectors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS90ZXJtdmVjdG9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0Q0FBNEMsZ0JBQWdCLHlDQUF5QztBQUN4SDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsdUNBQXVDO0FBQ2pGO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL2VsYXN0aWNzZWFyY2gvbGliL2FwaS9hcGkvdGVybXZlY3RvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIFRlcm12ZWN0b3JzQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaW5kZXgnLCAnaWQnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2RvYycsICdmaWx0ZXInLCAncGVyX2ZpZWxkX2FuYWx5emVyJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICBsZXQgYm9keTtcbiAgICBpZiAodHlwZW9mIHVzZXJCb2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1ldGhvZCA9ICcnO1xuICAgIGxldCBwYXRoID0gJyc7XG4gICAgaWYgKHBhcmFtcy5pbmRleCAhPSBudWxsICYmIHBhcmFtcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L190ZXJtdmVjdG9ycy8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaWQudG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L190ZXJtdmVjdG9yc2A7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICd0ZXJtdmVjdG9ycycsXG4gICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgaW5kZXg6IHBhcmFtcy5pbmRleCxcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWRcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gVGVybXZlY3RvcnNBcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXJtdmVjdG9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/termvectors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/text_structure.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/text_structure.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TextStructure {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async findFieldStructure(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_text_structure/find_field_structure';\n        const meta = {\n            name: 'text_structure.find_field_structure'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async findMessageStructure(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_text_structure/find_message_structure';\n        const meta = {\n            name: 'text_structure.find_message_structure'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async findStructure(params, options) {\n        var _a;\n        const acceptedPath = [];\n        const acceptedBody = ['text_files'];\n        const querystring = {};\n        // @ts-expect-error\n        let body = (_a = params.body) !== null && _a !== void 0 ? _a : undefined;\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                // @ts-expect-error\n                body = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_text_structure/find_structure';\n        const meta = {\n            name: 'text_structure.find_structure'\n        };\n        return await this.transport.request({ path, method, querystring, bulkBody: body, meta }, options);\n    }\n    async testGrokPattern(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['grok_pattern', 'text'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_text_structure/test_grok_pattern';\n        const meta = {\n            name: 'text_structure.test_grok_pattern'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = TextStructure;\n//# sourceMappingURL=text_structure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/text_structure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/transform.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/transform.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Transform {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async deleteTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}`;\n        const meta = {\n            name: 'transform.delete_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getNodeStats(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_transform/_node_stats';\n        const meta = {\n            name: 'transform.get_node_stats'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.transform_id != null) {\n            method = 'GET';\n            path = `/_transform/${encodeURIComponent(params.transform_id.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_transform';\n        }\n        const meta = {\n            name: 'transform.get_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getTransformStats(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_stats`;\n        const meta = {\n            name: 'transform.get_transform_stats',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async previewTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const acceptedBody = ['dest', 'description', 'frequency', 'pivot', 'source', 'settings', 'sync', 'retention_policy', 'latest'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.transform_id != null) {\n            method = body != null ? 'POST' : 'GET';\n            path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_preview`;\n        }\n        else {\n            method = body != null ? 'POST' : 'GET';\n            path = '/_transform/_preview';\n        }\n        const meta = {\n            name: 'transform.preview_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const acceptedBody = ['dest', 'description', 'frequency', 'latest', '_meta', 'pivot', 'retention_policy', 'settings', 'source', 'sync'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}`;\n        const meta = {\n            name: 'transform.put_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async resetTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_reset`;\n        const meta = {\n            name: 'transform.reset_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async scheduleNowTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_schedule_now`;\n        const meta = {\n            name: 'transform.schedule_now_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async startTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_start`;\n        const meta = {\n            name: 'transform.start_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stopTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_stop`;\n        const meta = {\n            name: 'transform.stop_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateTransform(params, options) {\n        const acceptedPath = ['transform_id'];\n        const acceptedBody = ['dest', 'description', 'frequency', '_meta', 'source', 'settings', 'sync', 'retention_policy'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = `/_transform/${encodeURIComponent(params.transform_id.toString())}/_update`;\n        const meta = {\n            name: 'transform.update_transform',\n            pathParts: {\n                transform_id: params.transform_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async upgradeTransforms(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_transform/_upgrade';\n        const meta = {\n            name: 'transform.upgrade_transforms'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Transform;\n//# sourceMappingURL=transform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS90cmFuc2Zvcm0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxtREFBbUQ7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbURBQW1EO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxtREFBbUQ7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1EQUFtRDtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxtREFBbUQ7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbURBQW1EO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG1EQUFtRDtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUNBQXVDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxtREFBbUQ7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVDQUF1QztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbURBQW1EO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGNBQWM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbURBQW1EO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL3RyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3Rvcih0cmFuc3BvcnQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNwb3J0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVUcmFuc2Zvcm0ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsndHJhbnNmb3JtX2lkJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL190cmFuc2Zvcm0vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRyYW5zZm9ybV9pZC50b1N0cmluZygpKX1gO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3RyYW5zZm9ybS5kZWxldGVfdHJhbnNmb3JtJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybV9pZDogcGFyYW1zLnRyYW5zZm9ybV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGdldE5vZGVTdGF0cyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnL190cmFuc2Zvcm0vX25vZGVfc3RhdHMnO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3RyYW5zZm9ybS5nZXRfbm9kZV9zdGF0cydcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc2Zvcm0ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsndHJhbnNmb3JtX2lkJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBtZXRob2QgPSAnJztcbiAgICAgICAgbGV0IHBhdGggPSAnJztcbiAgICAgICAgaWYgKHBhcmFtcy50cmFuc2Zvcm1faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9fdHJhbnNmb3JtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50cmFuc2Zvcm1faWQudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX3RyYW5zZm9ybSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0uZ2V0X3RyYW5zZm9ybScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1faWQ6IHBhcmFtcy50cmFuc2Zvcm1faWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc2Zvcm1TdGF0cyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyd0cmFuc2Zvcm1faWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX3RyYW5zZm9ybS8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMudHJhbnNmb3JtX2lkLnRvU3RyaW5nKCkpfS9fc3RhdHNgO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3RyYW5zZm9ybS5nZXRfdHJhbnNmb3JtX3N0YXRzJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybV9pZDogcGFyYW1zLnRyYW5zZm9ybV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHByZXZpZXdUcmFuc2Zvcm0ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsndHJhbnNmb3JtX2lkJ107XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnZGVzdCcsICdkZXNjcmlwdGlvbicsICdmcmVxdWVuY3knLCAncGl2b3QnLCAnc291cmNlJywgJ3NldHRpbmdzJywgJ3N5bmMnLCAncmV0ZW50aW9uX3BvbGljeScsICdsYXRlc3QnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgICAgICBsZXQgYm9keTtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBtZXRob2QgPSAnJztcbiAgICAgICAgbGV0IHBhdGggPSAnJztcbiAgICAgICAgaWYgKHBhcmFtcy50cmFuc2Zvcm1faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0aG9kID0gYm9keSAhPSBudWxsID8gJ1BPU1QnIDogJ0dFVCc7XG4gICAgICAgICAgICBwYXRoID0gYC9fdHJhbnNmb3JtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50cmFuc2Zvcm1faWQudG9TdHJpbmcoKSl9L19wcmV2aWV3YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IGJvZHkgIT0gbnVsbCA/ICdQT1NUJyA6ICdHRVQnO1xuICAgICAgICAgICAgcGF0aCA9ICcvX3RyYW5zZm9ybS9fcHJldmlldyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0ucHJldmlld190cmFuc2Zvcm0nLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtX2lkOiBwYXJhbXMudHJhbnNmb3JtX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgcHV0VHJhbnNmb3JtKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3RyYW5zZm9ybV9pZCddO1xuICAgICAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2Rlc3QnLCAnZGVzY3JpcHRpb24nLCAnZnJlcXVlbmN5JywgJ2xhdGVzdCcsICdfbWV0YScsICdwaXZvdCcsICdyZXRlbnRpb25fcG9saWN5JywgJ3NldHRpbmdzJywgJ3NvdXJjZScsICdzeW5jJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgY29uc3QgdXNlckJvZHkgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYm9keTtcbiAgICAgICAgbGV0IGJvZHk7XG4gICAgICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdXNlckJvZHkgIT0gbnVsbCA/IHsgLi4udXNlckJvZHkgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZEJvZHkuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgYm9keVtrZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fdHJhbnNmb3JtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50cmFuc2Zvcm1faWQudG9TdHJpbmcoKSl9YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0ucHV0X3RyYW5zZm9ybScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1faWQ6IHBhcmFtcy50cmFuc2Zvcm1faWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyByZXNldFRyYW5zZm9ybShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyd0cmFuc2Zvcm1faWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL190cmFuc2Zvcm0vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRyYW5zZm9ybV9pZC50b1N0cmluZygpKX0vX3Jlc2V0YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0ucmVzZXRfdHJhbnNmb3JtJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybV9pZDogcGFyYW1zLnRyYW5zZm9ybV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHNjaGVkdWxlTm93VHJhbnNmb3JtKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3RyYW5zZm9ybV9pZCddO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvX3RyYW5zZm9ybS8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMudHJhbnNmb3JtX2lkLnRvU3RyaW5nKCkpfS9fc2NoZWR1bGVfbm93YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0uc2NoZWR1bGVfbm93X3RyYW5zZm9ybScsXG4gICAgICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1faWQ6IHBhcmFtcy50cmFuc2Zvcm1faWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBzdGFydFRyYW5zZm9ybShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyd0cmFuc2Zvcm1faWQnXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL190cmFuc2Zvcm0vJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRyYW5zZm9ybV9pZC50b1N0cmluZygpKX0vX3N0YXJ0YDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0uc3RhcnRfdHJhbnNmb3JtJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybV9pZDogcGFyYW1zLnRyYW5zZm9ybV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHN0b3BUcmFuc2Zvcm0ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsndHJhbnNmb3JtX2lkJ107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fdHJhbnNmb3JtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50cmFuc2Zvcm1faWQudG9TdHJpbmcoKSl9L19zdG9wYDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0uc3RvcF90cmFuc2Zvcm0nLFxuICAgICAgICAgICAgcGF0aFBhcnRzOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtX2lkOiBwYXJhbXMudHJhbnNmb3JtX2lkXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlVHJhbnNmb3JtKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbJ3RyYW5zZm9ybV9pZCddO1xuICAgICAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2Rlc3QnLCAnZGVzY3JpcHRpb24nLCAnZnJlcXVlbmN5JywgJ19tZXRhJywgJ3NvdXJjZScsICdzZXR0aW5ncycsICdzeW5jJywgJ3JldGVudGlvbl9wb2xpY3knXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgICAgICBsZXQgYm9keTtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6IHt9O1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gYC9fdHJhbnNmb3JtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy50cmFuc2Zvcm1faWQudG9TdHJpbmcoKSl9L191cGRhdGVgO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3RyYW5zZm9ybS51cGRhdGVfdHJhbnNmb3JtJyxcbiAgICAgICAgICAgIHBhdGhQYXJ0czoge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybV9pZDogcGFyYW1zLnRyYW5zZm9ybV9pZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHVwZ3JhZGVUcmFuc2Zvcm1zKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY2NlcHRlZFBhdGggPSBbXTtcbiAgICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zICE9PSBudWxsICYmIHBhcmFtcyAhPT0gdm9pZCAwID8gcGFyYW1zIDoge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9fdHJhbnNmb3JtL191cGdyYWRlJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd0cmFuc2Zvcm0udXBncmFkZV90cmFuc2Zvcm1zJ1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy50cmFuc3BvcnQucmVxdWVzdCh7IHBhdGgsIG1ldGhvZCwgcXVlcnlzdHJpbmcsIGJvZHksIG1ldGEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNmb3JtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/update.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function UpdateApi(params, options) {\n    const acceptedPath = ['id', 'index'];\n    const acceptedBody = ['detect_noop', 'doc', 'doc_as_upsert', 'script', 'scripted_upsert', '_source', 'upsert'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/${encodeURIComponent(params.index.toString())}/_update/${encodeURIComponent(params.id.toString())}`;\n    const meta = {\n        name: 'update',\n        pathParts: {\n            id: params.id,\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = UpdateApi;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNENBQTRDLFdBQVcseUNBQXlDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVDQUF1QztBQUNqRjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL3VwZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gVXBkYXRlQXBpKHBhcmFtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFsnaWQnLCAnaW5kZXgnXTtcbiAgICBjb25zdCBhY2NlcHRlZEJvZHkgPSBbJ2RldGVjdF9ub29wJywgJ2RvYycsICdkb2NfYXNfdXBzZXJ0JywgJ3NjcmlwdCcsICdzY3JpcHRlZF91cHNlcnQnLCAnX3NvdXJjZScsICd1cHNlcnQnXTtcbiAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICBjb25zdCB1c2VyQm9keSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5ib2R5O1xuICAgIGxldCBib2R5O1xuICAgIGlmICh0eXBlb2YgdXNlckJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJvZHkgPSB1c2VyQm9keSAhPSBudWxsID8geyAuLi51c2VyQm9keSB9IDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGFjY2VwdGVkQm9keS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB2b2lkIDAgPyBib2R5IDoge307XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBib2R5W2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnUE9TVCc7XG4gICAgY29uc3QgcGF0aCA9IGAvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmluZGV4LnRvU3RyaW5nKCkpfS9fdXBkYXRlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZC50b1N0cmluZygpKX1gO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICd1cGRhdGUnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGlkOiBwYXJhbXMuaWQsXG4gICAgICAgICAgICBpbmRleDogcGFyYW1zLmluZGV4XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFVwZGF0ZUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwZGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function UpdateByQueryApi(params, options) {\n    const acceptedPath = ['index'];\n    const acceptedBody = ['max_docs', 'query', 'script', 'slice', 'conflicts'];\n    const querystring = {};\n    // @ts-expect-error\n    const userBody = params === null || params === void 0 ? void 0 : params.body;\n    let body;\n    if (typeof userBody === 'string') {\n        body = userBody;\n    }\n    else {\n        body = userBody != null ? { ...userBody } : undefined;\n    }\n    for (const key in params) {\n        if (acceptedBody.includes(key)) {\n            body = body !== null && body !== void 0 ? body : {};\n            // @ts-expect-error\n            body[key] = params[key];\n        }\n        else if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/${encodeURIComponent(params.index.toString())}/_update_by_query`;\n    const meta = {\n        name: 'update_by_query',\n        pathParts: {\n            index: params.index\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = UpdateByQueryApi;\n//# sourceMappingURL=update_by_query.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS91cGRhdGVfYnlfcXVlcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNENBQTRDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS91cGRhdGVfYnlfcXVlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmFzeW5jIGZ1bmN0aW9uIFVwZGF0ZUJ5UXVlcnlBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWydpbmRleCddO1xuICAgIGNvbnN0IGFjY2VwdGVkQm9keSA9IFsnbWF4X2RvY3MnLCAncXVlcnknLCAnc2NyaXB0JywgJ3NsaWNlJywgJ2NvbmZsaWN0cyddO1xuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIGNvbnN0IHVzZXJCb2R5ID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmJvZHk7XG4gICAgbGV0IGJvZHk7XG4gICAgaWYgKHR5cGVvZiB1c2VyQm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYm9keSA9IHVzZXJCb2R5ICE9IG51bGwgPyB7IC4uLnVzZXJCb2R5IH0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRCb2R5LmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHZvaWQgMCA/IGJvZHkgOiB7fTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjY2VwdGVkUGF0aC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgIT09ICdib2R5Jykge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcbiAgICBjb25zdCBwYXRoID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuaW5kZXgudG9TdHJpbmcoKSl9L191cGRhdGVfYnlfcXVlcnlgO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIG5hbWU6ICd1cGRhdGVfYnlfcXVlcnknLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIGluZGV4OiBwYXJhbXMuaW5kZXhcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gVXBkYXRlQnlRdWVyeUFwaTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwZGF0ZV9ieV9xdWVyeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query_rethrottle.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query_rethrottle.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nasync function UpdateByQueryRethrottleApi(params, options) {\n    const acceptedPath = ['task_id'];\n    const querystring = {};\n    const body = undefined;\n    for (const key in params) {\n        if (acceptedPath.includes(key)) {\n            continue;\n        }\n        else if (key !== 'body') {\n            // @ts-expect-error\n            querystring[key] = params[key];\n        }\n    }\n    const method = 'POST';\n    const path = `/_update_by_query/${encodeURIComponent(params.task_id.toString())}/_rethrottle`;\n    const meta = {\n        name: 'update_by_query_rethrottle',\n        pathParts: {\n            task_id: params.task_id\n        }\n    };\n    return await this.transport.request({ path, method, querystring, body, meta }, options);\n}\nexports[\"default\"] = UpdateByQueryRethrottleApi;\n//# sourceMappingURL=update_by_query_rethrottle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS91cGRhdGVfYnlfcXVlcnlfcmV0aHJvdHRsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsOENBQThDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS91cGRhdGVfYnlfcXVlcnlfcmV0aHJvdHRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3JcbiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoXG4gKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodFxuICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlclxuICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuYXN5bmMgZnVuY3Rpb24gVXBkYXRlQnlRdWVyeVJldGhyb3R0bGVBcGkocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gWyd0YXNrX2lkJ107XG4gICAgY29uc3QgcXVlcnlzdHJpbmcgPSB7fTtcbiAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBxdWVyeXN0cmluZ1trZXldID0gcGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuICAgIGNvbnN0IHBhdGggPSBgL191cGRhdGVfYnlfcXVlcnkvJHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnRhc2tfaWQudG9TdHJpbmcoKSl9L19yZXRocm90dGxlYDtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICBuYW1lOiAndXBkYXRlX2J5X3F1ZXJ5X3JldGhyb3R0bGUnLFxuICAgICAgICBwYXRoUGFydHM6IHtcbiAgICAgICAgICAgIHRhc2tfaWQ6IHBhcmFtcy50YXNrX2lkXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFVwZGF0ZUJ5UXVlcnlSZXRocm90dGxlQXBpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlX2J5X3F1ZXJ5X3JldGhyb3R0bGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query_rethrottle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/watcher.js":
/*!********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/watcher.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Watcher {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async ackWatch(params, options) {\n        const acceptedPath = ['watch_id', 'action_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.watch_id != null && params.action_id != null) {\n            method = 'PUT';\n            path = `/_watcher/watch/${encodeURIComponent(params.watch_id.toString())}/_ack/${encodeURIComponent(params.action_id.toString())}`;\n        }\n        else {\n            method = 'PUT';\n            path = `/_watcher/watch/${encodeURIComponent(params.watch_id.toString())}/_ack`;\n        }\n        const meta = {\n            name: 'watcher.ack_watch',\n            pathParts: {\n                watch_id: params.watch_id,\n                action_id: params.action_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async activateWatch(params, options) {\n        const acceptedPath = ['watch_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_watcher/watch/${encodeURIComponent(params.watch_id.toString())}/_activate`;\n        const meta = {\n            name: 'watcher.activate_watch',\n            pathParts: {\n                watch_id: params.watch_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deactivateWatch(params, options) {\n        const acceptedPath = ['watch_id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_watcher/watch/${encodeURIComponent(params.watch_id.toString())}/_deactivate`;\n        const meta = {\n            name: 'watcher.deactivate_watch',\n            pathParts: {\n                watch_id: params.watch_id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async deleteWatch(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'DELETE';\n        const path = `/_watcher/watch/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'watcher.delete_watch',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async executeWatch(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['action_modes', 'alternative_input', 'ignore_condition', 'record_execution', 'simulated_actions', 'trigger_data', 'watch'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.id != null) {\n            method = 'PUT';\n            path = `/_watcher/watch/${encodeURIComponent(params.id.toString())}/_execute`;\n        }\n        else {\n            method = 'PUT';\n            path = '/_watcher/watch/_execute';\n        }\n        const meta = {\n            name: 'watcher.execute_watch',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getSettings(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_watcher/settings';\n        const meta = {\n            name: 'watcher.get_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async getWatch(params, options) {\n        const acceptedPath = ['id'];\n        const querystring = {};\n        const body = undefined;\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = `/_watcher/watch/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'watcher.get_watch',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async putWatch(params, options) {\n        const acceptedPath = ['id'];\n        const acceptedBody = ['actions', 'condition', 'input', 'metadata', 'throttle_period', 'transform', 'trigger'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = `/_watcher/watch/${encodeURIComponent(params.id.toString())}`;\n        const meta = {\n            name: 'watcher.put_watch',\n            pathParts: {\n                id: params.id\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async queryWatches(params, options) {\n        const acceptedPath = [];\n        const acceptedBody = ['from', 'size', 'query', 'sort', 'search_after'];\n        const querystring = {};\n        // @ts-expect-error\n        const userBody = params === null || params === void 0 ? void 0 : params.body;\n        let body;\n        if (typeof userBody === 'string') {\n            body = userBody;\n        }\n        else {\n            body = userBody != null ? { ...userBody } : undefined;\n        }\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedBody.includes(key)) {\n                body = body !== null && body !== void 0 ? body : {};\n                // @ts-expect-error\n                body[key] = params[key];\n            }\n            else if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = body != null ? 'POST' : 'GET';\n        const path = '/_watcher/_query/watches';\n        const meta = {\n            name: 'watcher.query_watches'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async start(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_watcher/_start';\n        const meta = {\n            name: 'watcher.start'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stats(params, options) {\n        const acceptedPath = ['metric'];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        let method = '';\n        let path = '';\n        if (params.metric != null) {\n            method = 'GET';\n            path = `/_watcher/stats/${encodeURIComponent(params.metric.toString())}`;\n        }\n        else {\n            method = 'GET';\n            path = '/_watcher/stats';\n        }\n        const meta = {\n            name: 'watcher.stats',\n            pathParts: {\n                metric: params.metric\n            }\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async stop(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'POST';\n        const path = '/_watcher/_stop';\n        const meta = {\n            name: 'watcher.stop'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async updateSettings(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'PUT';\n        const path = '/_watcher/settings';\n        const meta = {\n            name: 'watcher.update_settings'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Watcher;\n//# sourceMappingURL=watcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/watcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/xpack.js":
/*!******************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/api/xpack.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Xpack {\n    constructor(transport) {\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transport = transport;\n    }\n    async info(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_xpack';\n        const meta = {\n            name: 'xpack.info'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n    async usage(params, options) {\n        const acceptedPath = [];\n        const querystring = {};\n        const body = undefined;\n        params = params !== null && params !== void 0 ? params : {};\n        for (const key in params) {\n            if (acceptedPath.includes(key)) {\n                continue;\n            }\n            else if (key !== 'body') {\n                // @ts-expect-error\n                querystring[key] = params[key];\n            }\n        }\n        const method = 'GET';\n        const path = '/_xpack/usage';\n        const meta = {\n            name: 'xpack.usage'\n        };\n        return await this.transport.request({ path, method, querystring, body, meta }, options);\n    }\n}\nexports[\"default\"] = Xpack;\n//# sourceMappingURL=xpack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvYXBpL2FwaS94cGFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyx1Q0FBdUM7QUFDckY7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy9lbGFzdGljc2VhcmNoL2xpYi9hcGkvYXBpL3hwYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBYcGFjayB7XG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyYW5zcG9ydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICB9XG4gICAgYXN5bmMgaW5mbyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXB0ZWRQYXRoID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0ge307XG4gICAgICAgIGNvbnN0IGJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyAhPT0gbnVsbCAmJiBwYXJhbXMgIT09IHZvaWQgMCA/IHBhcmFtcyA6IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChhY2NlcHRlZFBhdGguaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnYm9keScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmdba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBjb25zdCBwYXRoID0gJy9feHBhY2snO1xuICAgICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAgICAgbmFtZTogJ3hwYWNrLmluZm8nXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zcG9ydC5yZXF1ZXN0KHsgcGF0aCwgbWV0aG9kLCBxdWVyeXN0cmluZywgYm9keSwgbWV0YSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgdXNhZ2UocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdGVkUGF0aCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeXN0cmluZyA9IHt9O1xuICAgICAgICBjb25zdCBib2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgIT09IG51bGwgJiYgcGFyYW1zICE9PSB2b2lkIDAgPyBwYXJhbXMgOiB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoYWNjZXB0ZWRQYXRoLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvX3hwYWNrL3VzYWdlJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICd4cGFjay51c2FnZSdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhbnNwb3J0LnJlcXVlc3QoeyBwYXRoLCBtZXRob2QsIHF1ZXJ5c3RyaW5nLCBib2R5LCBtZXRhIH0sIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFhwYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eHBhY2suanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/xpack.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/api/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/api/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable import/export */\n/* eslint-disable @typescript-eslint/no-misused-new */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// This file was automatically generated by elastic/elastic-client-generator-js\n// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,\n// and elastic/elastic-client-generator-js to regenerate this file again.\nconst async_search_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/async_search */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/async_search.js\"));\nconst autoscaling_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/autoscaling */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/autoscaling.js\"));\nconst bulk_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/bulk */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/bulk.js\"));\nconst capabilities_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/capabilities */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/capabilities.js\"));\nconst cat_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/cat */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cat.js\"));\nconst ccr_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ccr */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ccr.js\"));\nconst clear_scroll_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/clear_scroll */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/clear_scroll.js\"));\nconst close_point_in_time_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/close_point_in_time */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/close_point_in_time.js\"));\nconst cluster_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/cluster */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/cluster.js\"));\nconst connector_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/connector */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/connector.js\"));\nconst count_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/count */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/count.js\"));\nconst create_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/create */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/create.js\"));\nconst dangling_indices_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/dangling_indices */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/dangling_indices.js\"));\nconst delete_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/delete */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete.js\"));\nconst delete_by_query_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/delete_by_query */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query.js\"));\nconst delete_by_query_rethrottle_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/delete_by_query_rethrottle */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_by_query_rethrottle.js\"));\nconst delete_script_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/delete_script */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/delete_script.js\"));\nconst enrich_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/enrich */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/enrich.js\"));\nconst eql_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/eql */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/eql.js\"));\nconst esql_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/esql */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/esql.js\"));\nconst exists_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/exists */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists.js\"));\nconst exists_source_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/exists_source */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/exists_source.js\"));\nconst explain_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/explain */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/explain.js\"));\nconst features_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/features */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/features.js\"));\nconst field_caps_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/field_caps */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/field_caps.js\"));\nconst fleet_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/fleet */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/fleet.js\"));\nconst get_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/get */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get.js\"));\nconst get_script_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/get_script */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script.js\"));\nconst get_script_context_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/get_script_context */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_context.js\"));\nconst get_script_languages_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/get_script_languages */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_script_languages.js\"));\nconst get_source_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/get_source */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/get_source.js\"));\nconst graph_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/graph */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/graph.js\"));\nconst health_report_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/health_report */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/health_report.js\"));\nconst ilm_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ilm */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ilm.js\"));\nconst index_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/index */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/index.js\"));\nconst indices_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/indices */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/indices.js\"));\nconst inference_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/inference */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/inference.js\"));\nconst info_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/info */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/info.js\"));\nconst ingest_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ingest */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ingest.js\"));\nconst knn_search_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/knn_search */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/knn_search.js\"));\nconst license_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/license */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/license.js\"));\nconst logstash_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/logstash */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/logstash.js\"));\nconst mget_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/mget */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mget.js\"));\nconst migration_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/migration */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/migration.js\"));\nconst ml_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ml */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ml.js\"));\nconst monitoring_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/monitoring */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/monitoring.js\"));\nconst msearch_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/msearch */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch.js\"));\nconst msearch_template_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/msearch_template */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/msearch_template.js\"));\nconst mtermvectors_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/mtermvectors */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/mtermvectors.js\"));\nconst nodes_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/nodes */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/nodes.js\"));\nconst open_point_in_time_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/open_point_in_time */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/open_point_in_time.js\"));\nconst ping_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ping */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ping.js\"));\nconst profiling_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/profiling */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/profiling.js\"));\nconst put_script_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/put_script */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/put_script.js\"));\nconst query_rules_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/query_rules */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/query_rules.js\"));\nconst rank_eval_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/rank_eval */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rank_eval.js\"));\nconst reindex_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/reindex */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex.js\"));\nconst reindex_rethrottle_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/reindex_rethrottle */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/reindex_rethrottle.js\"));\nconst render_search_template_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/render_search_template */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/render_search_template.js\"));\nconst rollup_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/rollup */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/rollup.js\"));\nconst scripts_painless_execute_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/scripts_painless_execute */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scripts_painless_execute.js\"));\nconst scroll_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/scroll */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/scroll.js\"));\nconst search_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/search */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search.js\"));\nconst search_application_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/search_application */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_application.js\"));\nconst search_mvt_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/search_mvt */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_mvt.js\"));\nconst search_shards_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/search_shards */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_shards.js\"));\nconst search_template_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/search_template */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/search_template.js\"));\nconst searchable_snapshots_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/searchable_snapshots */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/searchable_snapshots.js\"));\nconst security_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/security */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/security.js\"));\nconst shutdown_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/shutdown */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/shutdown.js\"));\nconst simulate_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/simulate */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/simulate.js\"));\nconst slm_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/slm */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/slm.js\"));\nconst snapshot_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/snapshot */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/snapshot.js\"));\nconst sql_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/sql */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/sql.js\"));\nconst ssl_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/ssl */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/ssl.js\"));\nconst synonyms_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/synonyms */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/synonyms.js\"));\nconst tasks_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/tasks */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/tasks.js\"));\nconst terms_enum_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/terms_enum */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/terms_enum.js\"));\nconst termvectors_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/termvectors */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/termvectors.js\"));\nconst text_structure_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/text_structure */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/text_structure.js\"));\nconst transform_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/transform */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/transform.js\"));\nconst update_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/update */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update.js\"));\nconst update_by_query_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/update_by_query */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query.js\"));\nconst update_by_query_rethrottle_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/update_by_query_rethrottle */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/update_by_query_rethrottle.js\"));\nconst watcher_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/watcher */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/watcher.js\"));\nconst xpack_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api/xpack */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/api/xpack.js\"));\nconst kAsyncSearch = Symbol('AsyncSearch');\nconst kAutoscaling = Symbol('Autoscaling');\nconst kCat = Symbol('Cat');\nconst kCcr = Symbol('Ccr');\nconst kCluster = Symbol('Cluster');\nconst kConnector = Symbol('Connector');\nconst kDanglingIndices = Symbol('DanglingIndices');\nconst kEnrich = Symbol('Enrich');\nconst kEql = Symbol('Eql');\nconst kEsql = Symbol('Esql');\nconst kFeatures = Symbol('Features');\nconst kFleet = Symbol('Fleet');\nconst kGraph = Symbol('Graph');\nconst kIlm = Symbol('Ilm');\nconst kIndices = Symbol('Indices');\nconst kInference = Symbol('Inference');\nconst kIngest = Symbol('Ingest');\nconst kLicense = Symbol('License');\nconst kLogstash = Symbol('Logstash');\nconst kMigration = Symbol('Migration');\nconst kMl = Symbol('Ml');\nconst kMonitoring = Symbol('Monitoring');\nconst kNodes = Symbol('Nodes');\nconst kProfiling = Symbol('Profiling');\nconst kQueryRules = Symbol('QueryRules');\nconst kRollup = Symbol('Rollup');\nconst kSearchApplication = Symbol('SearchApplication');\nconst kSearchableSnapshots = Symbol('SearchableSnapshots');\nconst kSecurity = Symbol('Security');\nconst kShutdown = Symbol('Shutdown');\nconst kSimulate = Symbol('Simulate');\nconst kSlm = Symbol('Slm');\nconst kSnapshot = Symbol('Snapshot');\nconst kSql = Symbol('Sql');\nconst kSsl = Symbol('Ssl');\nconst kSynonyms = Symbol('Synonyms');\nconst kTasks = Symbol('Tasks');\nconst kTextStructure = Symbol('TextStructure');\nconst kTransform = Symbol('Transform');\nconst kWatcher = Symbol('Watcher');\nconst kXpack = Symbol('Xpack');\nclass API {\n    constructor() {\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _b, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _c, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _d, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _e, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _f, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _g, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _h, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _j, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _k, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _l, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _m, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _o, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _p, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _q, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _r, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _s, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _t, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _u, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _v, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _w, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _x, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _y, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _z, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _0, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _1, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _2, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _3, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _4, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _5, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _6, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _7, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _8, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _9, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _10, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _11, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _12, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _13, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _14, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _15, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _16, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this[kAsyncSearch] = null;\n        this[kAutoscaling] = null;\n        this[kCat] = null;\n        this[kCcr] = null;\n        this[kCluster] = null;\n        this[kConnector] = null;\n        this[kDanglingIndices] = null;\n        this[kEnrich] = null;\n        this[kEql] = null;\n        this[kEsql] = null;\n        this[kFeatures] = null;\n        this[kFleet] = null;\n        this[kGraph] = null;\n        this[kIlm] = null;\n        this[kIndices] = null;\n        this[kInference] = null;\n        this[kIngest] = null;\n        this[kLicense] = null;\n        this[kLogstash] = null;\n        this[kMigration] = null;\n        this[kMl] = null;\n        this[kMonitoring] = null;\n        this[kNodes] = null;\n        this[kProfiling] = null;\n        this[kQueryRules] = null;\n        this[kRollup] = null;\n        this[kSearchApplication] = null;\n        this[kSearchableSnapshots] = null;\n        this[kSecurity] = null;\n        this[kShutdown] = null;\n        this[kSimulate] = null;\n        this[kSlm] = null;\n        this[kSnapshot] = null;\n        this[kSql] = null;\n        this[kSsl] = null;\n        this[kSynonyms] = null;\n        this[kTasks] = null;\n        this[kTextStructure] = null;\n        this[kTransform] = null;\n        this[kWatcher] = null;\n        this[kXpack] = null;\n    }\n}\nexports[\"default\"] = API;\n_a = kAsyncSearch, _b = kAutoscaling, _c = kCat, _d = kCcr, _e = kCluster, _f = kConnector, _g = kDanglingIndices, _h = kEnrich, _j = kEql, _k = kEsql, _l = kFeatures, _m = kFleet, _o = kGraph, _p = kIlm, _q = kIndices, _r = kInference, _s = kIngest, _t = kLicense, _u = kLogstash, _v = kMigration, _w = kMl, _x = kMonitoring, _y = kNodes, _z = kProfiling, _0 = kQueryRules, _1 = kRollup, _2 = kSearchApplication, _3 = kSearchableSnapshots, _4 = kSecurity, _5 = kShutdown, _6 = kSimulate, _7 = kSlm, _8 = kSnapshot, _9 = kSql, _10 = kSsl, _11 = kSynonyms, _12 = kTasks, _13 = kTextStructure, _14 = kTransform, _15 = kWatcher, _16 = kXpack;\nAPI.prototype.bulk = bulk_1.default;\nAPI.prototype.capabilities = capabilities_1.default;\nAPI.prototype.clearScroll = clear_scroll_1.default;\nAPI.prototype.closePointInTime = close_point_in_time_1.default;\nAPI.prototype.count = count_1.default;\nAPI.prototype.create = create_1.default;\nAPI.prototype.delete = delete_1.default;\nAPI.prototype.deleteByQuery = delete_by_query_1.default;\nAPI.prototype.deleteByQueryRethrottle = delete_by_query_rethrottle_1.default;\nAPI.prototype.deleteScript = delete_script_1.default;\nAPI.prototype.exists = exists_1.default;\nAPI.prototype.existsSource = exists_source_1.default;\nAPI.prototype.explain = explain_1.default;\nAPI.prototype.fieldCaps = field_caps_1.default;\nAPI.prototype.get = get_1.default;\nAPI.prototype.getScript = get_script_1.default;\nAPI.prototype.getScriptContext = get_script_context_1.default;\nAPI.prototype.getScriptLanguages = get_script_languages_1.default;\nAPI.prototype.getSource = get_source_1.default;\nAPI.prototype.healthReport = health_report_1.default;\nAPI.prototype.index = index_1.default;\nAPI.prototype.info = info_1.default;\nAPI.prototype.knnSearch = knn_search_1.default;\nAPI.prototype.mget = mget_1.default;\nAPI.prototype.msearch = msearch_1.default;\nAPI.prototype.msearchTemplate = msearch_template_1.default;\nAPI.prototype.mtermvectors = mtermvectors_1.default;\nAPI.prototype.openPointInTime = open_point_in_time_1.default;\nAPI.prototype.ping = ping_1.default;\nAPI.prototype.putScript = put_script_1.default;\nAPI.prototype.rankEval = rank_eval_1.default;\nAPI.prototype.reindex = reindex_1.default;\nAPI.prototype.reindexRethrottle = reindex_rethrottle_1.default;\nAPI.prototype.renderSearchTemplate = render_search_template_1.default;\nAPI.prototype.scriptsPainlessExecute = scripts_painless_execute_1.default;\nAPI.prototype.scroll = scroll_1.default;\nAPI.prototype.search = search_1.default;\nAPI.prototype.searchMvt = search_mvt_1.default;\nAPI.prototype.searchShards = search_shards_1.default;\nAPI.prototype.searchTemplate = search_template_1.default;\nAPI.prototype.termsEnum = terms_enum_1.default;\nAPI.prototype.termvectors = termvectors_1.default;\nAPI.prototype.update = update_1.default;\nAPI.prototype.updateByQuery = update_by_query_1.default;\nAPI.prototype.updateByQueryRethrottle = update_by_query_rethrottle_1.default;\nObject.defineProperties(API.prototype, {\n    asyncSearch: {\n        get() { return this[kAsyncSearch] === null ? (this[kAsyncSearch] = new async_search_1.default(this.transport)) : this[kAsyncSearch]; }\n    },\n    autoscaling: {\n        get() { return this[kAutoscaling] === null ? (this[kAutoscaling] = new autoscaling_1.default(this.transport)) : this[kAutoscaling]; }\n    },\n    cat: {\n        get() { return this[kCat] === null ? (this[kCat] = new cat_1.default(this.transport)) : this[kCat]; }\n    },\n    ccr: {\n        get() { return this[kCcr] === null ? (this[kCcr] = new ccr_1.default(this.transport)) : this[kCcr]; }\n    },\n    cluster: {\n        get() { return this[kCluster] === null ? (this[kCluster] = new cluster_1.default(this.transport)) : this[kCluster]; }\n    },\n    connector: {\n        get() { return this[kConnector] === null ? (this[kConnector] = new connector_1.default(this.transport)) : this[kConnector]; }\n    },\n    danglingIndices: {\n        get() { return this[kDanglingIndices] === null ? (this[kDanglingIndices] = new dangling_indices_1.default(this.transport)) : this[kDanglingIndices]; }\n    },\n    enrich: {\n        get() { return this[kEnrich] === null ? (this[kEnrich] = new enrich_1.default(this.transport)) : this[kEnrich]; }\n    },\n    eql: {\n        get() { return this[kEql] === null ? (this[kEql] = new eql_1.default(this.transport)) : this[kEql]; }\n    },\n    esql: {\n        get() { return this[kEsql] === null ? (this[kEsql] = new esql_1.default(this.transport)) : this[kEsql]; }\n    },\n    features: {\n        get() { return this[kFeatures] === null ? (this[kFeatures] = new features_1.default(this.transport)) : this[kFeatures]; }\n    },\n    fleet: {\n        get() { return this[kFleet] === null ? (this[kFleet] = new fleet_1.default(this.transport)) : this[kFleet]; }\n    },\n    graph: {\n        get() { return this[kGraph] === null ? (this[kGraph] = new graph_1.default(this.transport)) : this[kGraph]; }\n    },\n    ilm: {\n        get() { return this[kIlm] === null ? (this[kIlm] = new ilm_1.default(this.transport)) : this[kIlm]; }\n    },\n    indices: {\n        get() { return this[kIndices] === null ? (this[kIndices] = new indices_1.default(this.transport)) : this[kIndices]; }\n    },\n    inference: {\n        get() { return this[kInference] === null ? (this[kInference] = new inference_1.default(this.transport)) : this[kInference]; }\n    },\n    ingest: {\n        get() { return this[kIngest] === null ? (this[kIngest] = new ingest_1.default(this.transport)) : this[kIngest]; }\n    },\n    license: {\n        get() { return this[kLicense] === null ? (this[kLicense] = new license_1.default(this.transport)) : this[kLicense]; }\n    },\n    logstash: {\n        get() { return this[kLogstash] === null ? (this[kLogstash] = new logstash_1.default(this.transport)) : this[kLogstash]; }\n    },\n    migration: {\n        get() { return this[kMigration] === null ? (this[kMigration] = new migration_1.default(this.transport)) : this[kMigration]; }\n    },\n    ml: {\n        get() { return this[kMl] === null ? (this[kMl] = new ml_1.default(this.transport)) : this[kMl]; }\n    },\n    monitoring: {\n        get() { return this[kMonitoring] === null ? (this[kMonitoring] = new monitoring_1.default(this.transport)) : this[kMonitoring]; }\n    },\n    nodes: {\n        get() { return this[kNodes] === null ? (this[kNodes] = new nodes_1.default(this.transport)) : this[kNodes]; }\n    },\n    profiling: {\n        get() { return this[kProfiling] === null ? (this[kProfiling] = new profiling_1.default(this.transport)) : this[kProfiling]; }\n    },\n    queryRules: {\n        get() { return this[kQueryRules] === null ? (this[kQueryRules] = new query_rules_1.default(this.transport)) : this[kQueryRules]; }\n    },\n    rollup: {\n        get() { return this[kRollup] === null ? (this[kRollup] = new rollup_1.default(this.transport)) : this[kRollup]; }\n    },\n    searchApplication: {\n        get() { return this[kSearchApplication] === null ? (this[kSearchApplication] = new search_application_1.default(this.transport)) : this[kSearchApplication]; }\n    },\n    searchableSnapshots: {\n        get() { return this[kSearchableSnapshots] === null ? (this[kSearchableSnapshots] = new searchable_snapshots_1.default(this.transport)) : this[kSearchableSnapshots]; }\n    },\n    security: {\n        get() { return this[kSecurity] === null ? (this[kSecurity] = new security_1.default(this.transport)) : this[kSecurity]; }\n    },\n    shutdown: {\n        get() { return this[kShutdown] === null ? (this[kShutdown] = new shutdown_1.default(this.transport)) : this[kShutdown]; }\n    },\n    simulate: {\n        get() { return this[kSimulate] === null ? (this[kSimulate] = new simulate_1.default(this.transport)) : this[kSimulate]; }\n    },\n    slm: {\n        get() { return this[kSlm] === null ? (this[kSlm] = new slm_1.default(this.transport)) : this[kSlm]; }\n    },\n    snapshot: {\n        get() { return this[kSnapshot] === null ? (this[kSnapshot] = new snapshot_1.default(this.transport)) : this[kSnapshot]; }\n    },\n    sql: {\n        get() { return this[kSql] === null ? (this[kSql] = new sql_1.default(this.transport)) : this[kSql]; }\n    },\n    ssl: {\n        get() { return this[kSsl] === null ? (this[kSsl] = new ssl_1.default(this.transport)) : this[kSsl]; }\n    },\n    synonyms: {\n        get() { return this[kSynonyms] === null ? (this[kSynonyms] = new synonyms_1.default(this.transport)) : this[kSynonyms]; }\n    },\n    tasks: {\n        get() { return this[kTasks] === null ? (this[kTasks] = new tasks_1.default(this.transport)) : this[kTasks]; }\n    },\n    textStructure: {\n        get() { return this[kTextStructure] === null ? (this[kTextStructure] = new text_structure_1.default(this.transport)) : this[kTextStructure]; }\n    },\n    transform: {\n        get() { return this[kTransform] === null ? (this[kTransform] = new transform_1.default(this.transport)) : this[kTransform]; }\n    },\n    watcher: {\n        get() { return this[kWatcher] === null ? (this[kWatcher] = new watcher_1.default(this.transport)) : this[kWatcher]; }\n    },\n    xpack: {\n        get() { return this[kXpack] === null ? (this[kXpack] = new xpack_1.default(this.transport)) : this[kXpack]; }\n    }\n});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\") you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_process_1 = tslib_1.__importDefault(__webpack_require__(/*! node:process */ \"node:process\"));\nconst node_url_1 = __webpack_require__(/*! node:url */ \"node:url\");\nconst node_buffer_1 = tslib_1.__importDefault(__webpack_require__(/*! node:buffer */ \"node:buffer\"));\nconst node_os_1 = tslib_1.__importDefault(__webpack_require__(/*! node:os */ \"node:os\"));\nconst transport_1 = __webpack_require__(/*! @elastic/transport */ \"(rsc)/./node_modules/@elastic/transport/index.js\");\nconst BaseConnection_1 = __webpack_require__(/*! @elastic/transport/lib/connection/BaseConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\");\nconst sniffingTransport_1 = tslib_1.__importDefault(__webpack_require__(/*! ./sniffingTransport */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/sniffingTransport.js\"));\nconst helpers_1 = tslib_1.__importDefault(__webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/helpers.js\"));\nconst api_1 = tslib_1.__importDefault(__webpack_require__(/*! ./api */ \"(rsc)/./node_modules/@elastic/elasticsearch/lib/api/index.js\"));\nconst package_json_1 = tslib_1.__importDefault(__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@elastic/elasticsearch/package.json\"));\nconst package_json_2 = tslib_1.__importDefault(__webpack_require__(/*! @elastic/transport/package.json */ \"(rsc)/./node_modules/@elastic/transport/package.json\"));\nconst kChild = Symbol('elasticsearchjs-child');\nconst kInitialOptions = Symbol('elasticsearchjs-initial-options');\nlet clientVersion = package_json_1.default.version;\n/* istanbul ignore next */\nif (clientVersion.includes('-')) {\n    // clean prerelease\n    clientVersion = clientVersion.slice(0, clientVersion.indexOf('-')) + 'p';\n}\nlet transportVersion = package_json_2.default.version; // eslint-disable-line\n/* istanbul ignore next */\nif (transportVersion.includes('-')) {\n    // clean prerelease\n    transportVersion = transportVersion.slice(0, transportVersion.indexOf('-')) + 'p';\n}\nconst nodeVersion = node_process_1.default.versions.node;\nclass Client extends api_1.default {\n    constructor(opts) {\n        var _a, _b, _c, _d;\n        super();\n        Object.defineProperty(this, \"diagnostic\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"connectionPool\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"transport\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serializer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"helpers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // @ts-expect-error kChild symbol is for internal use only\n        if ((opts.cloud != null) && opts[kChild] === undefined) {\n            const { id } = opts.cloud;\n            // the cloud id is `cluster-name:base64encodedurl`\n            // the url is a string divided by two '$', the first is the cloud url\n            // the second the elasticsearch instance, the third the kibana instance\n            const cloudUrls = Buffer.from(id.split(':')[1], 'base64').toString().split('$');\n            opts.node = `https://${cloudUrls[1]}.${cloudUrls[0]}`;\n            // Cloud has better performances with compression enabled\n            // see https://github.com/elastic/elasticsearch-py/pull/704.\n            // So unless the user specifies otherwise, we enable compression.\n            if (opts.compression == null)\n                opts.compression = true;\n            if (opts.tls == null ||\n                (opts.tls != null && opts.tls.secureProtocol == null)) {\n                opts.tls = (_a = opts.tls) !== null && _a !== void 0 ? _a : {};\n                opts.tls.secureProtocol = 'TLSv1_2_method';\n            }\n        }\n        if (opts.node == null && opts.nodes == null) {\n            throw new transport_1.errors.ConfigurationError('Missing node(s) option');\n        }\n        // @ts-expect-error kChild symbol is for internal use only\n        if (opts[kChild] === undefined) {\n            const checkAuth = getAuth((_b = opts.node) !== null && _b !== void 0 ? _b : opts.nodes);\n            if ((checkAuth != null) && checkAuth.username !== '' && checkAuth.password !== '') {\n                opts.auth = Object.assign({}, opts.auth, { username: checkAuth.username, password: checkAuth.password });\n            }\n        }\n        const options = Object.assign({}, {\n            Connection: transport_1.UndiciConnection,\n            Transport: sniffingTransport_1.default,\n            Serializer: transport_1.Serializer,\n            ConnectionPool: (opts.cloud != null) ? transport_1.CloudConnectionPool : transport_1.WeightedConnectionPool,\n            maxRetries: 3,\n            requestTimeout: 30000,\n            pingTimeout: 3000,\n            sniffInterval: false,\n            sniffOnStart: false,\n            sniffEndpoint: '_nodes/_all/http',\n            sniffOnConnectionFault: false,\n            resurrectStrategy: 'ping',\n            compression: false,\n            tls: null,\n            caFingerprint: null,\n            agent: null,\n            headers: {\n                'user-agent': `elasticsearch-js/${clientVersion} (${node_os_1.default.platform()} ${node_os_1.default.release()}-${node_os_1.default.arch()}; Node.js ${nodeVersion}; Transport ${transportVersion})`\n            },\n            nodeFilter: null,\n            generateRequestId: null,\n            name: 'elasticsearch-js',\n            auth: null,\n            opaqueIdPrefix: null,\n            context: null,\n            proxy: null,\n            enableMetaHeader: true,\n            maxResponseSize: null,\n            maxCompressedResponseSize: null,\n            redaction: {\n                type: 'replace',\n                additionalKeys: []\n            }\n        }, opts);\n        if (options.caFingerprint != null && isHttpConnection((_c = opts.node) !== null && _c !== void 0 ? _c : opts.nodes)) {\n            throw new transport_1.errors.ConfigurationError('You can\\'t configure the caFingerprint with a http connection');\n        }\n        if (options.maxResponseSize != null && options.maxResponseSize > node_buffer_1.default.constants.MAX_STRING_LENGTH) {\n            throw new transport_1.errors.ConfigurationError(`The maxResponseSize cannot be bigger than ${node_buffer_1.default.constants.MAX_STRING_LENGTH}`);\n        }\n        if (options.maxCompressedResponseSize != null && options.maxCompressedResponseSize > node_buffer_1.default.constants.MAX_LENGTH) {\n            throw new transport_1.errors.ConfigurationError(`The maxCompressedResponseSize cannot be bigger than ${node_buffer_1.default.constants.MAX_LENGTH}`);\n        }\n        if (options.enableMetaHeader) {\n            options.headers['x-elastic-client-meta'] = `es=${clientVersion},js=${nodeVersion},t=${transportVersion},hc=${nodeVersion}`;\n        }\n        this.name = options.name;\n        // @ts-expect-error kInitialOptions symbol is for internal use only\n        this[kInitialOptions] = options;\n        // @ts-expect-error kChild symbol is for internal use only\n        if (opts[kChild] !== undefined) {\n            // @ts-expect-error kChild symbol is for internal use only\n            this.serializer = opts[kChild].serializer;\n            // @ts-expect-error kChild symbol is for internal use only\n            this.connectionPool = opts[kChild].connectionPool;\n            // @ts-expect-error kChild symbol is for internal use only\n            this.diagnostic = opts[kChild].diagnostic;\n        }\n        else {\n            this.diagnostic = new transport_1.Diagnostic();\n            let serializerOptions;\n            if (opts.disablePrototypePoisoningProtection != null) {\n                if (typeof opts.disablePrototypePoisoningProtection === 'boolean') {\n                    serializerOptions = {\n                        enablePrototypePoisoningProtection: !opts.disablePrototypePoisoningProtection\n                    };\n                }\n                else {\n                    serializerOptions = {\n                        enablePrototypePoisoningProtection: opts.disablePrototypePoisoningProtection\n                    };\n                }\n            }\n            this.serializer = new options.Serializer(serializerOptions);\n            this.connectionPool = new options.ConnectionPool({\n                pingTimeout: options.pingTimeout,\n                resurrectStrategy: options.resurrectStrategy,\n                tls: options.tls,\n                agent: options.agent,\n                proxy: options.proxy,\n                Connection: options.Connection,\n                auth: options.auth,\n                diagnostic: this.diagnostic,\n                caFingerprint: options.caFingerprint\n            });\n            // ensure default connection values are inherited when creating new connections\n            // see https://github.com/elastic/elasticsearch-js/issues/1791\n            const nodes = (_d = options.node) !== null && _d !== void 0 ? _d : options.nodes;\n            let nodeOptions = Array.isArray(nodes) ? nodes : [nodes];\n            nodeOptions = nodeOptions.map(opt => {\n                const { tls, headers, auth, requestTimeout: timeout, agent, proxy, caFingerprint } = options;\n                let defaults = { tls, headers, auth, timeout, agent, proxy, caFingerprint };\n                // strip undefined values from defaults\n                defaults = Object.keys(defaults).reduce((acc, key) => {\n                    const val = defaults[key];\n                    if (val !== undefined)\n                        acc[key] = val;\n                    return acc;\n                }, {});\n                let newOpts;\n                if (typeof opt === 'string') {\n                    newOpts = {\n                        url: new node_url_1.URL(opt)\n                    };\n                }\n                else {\n                    newOpts = opt;\n                }\n                return { ...defaults, ...newOpts };\n            });\n            this.connectionPool.addConnection(nodeOptions);\n        }\n        this.transport = new options.Transport({\n            diagnostic: this.diagnostic,\n            connectionPool: this.connectionPool,\n            serializer: this.serializer,\n            maxRetries: options.maxRetries,\n            requestTimeout: options.requestTimeout,\n            sniffInterval: options.sniffInterval,\n            sniffOnStart: options.sniffOnStart,\n            sniffOnConnectionFault: options.sniffOnConnectionFault,\n            sniffEndpoint: options.sniffEndpoint,\n            compression: options.compression,\n            headers: options.headers,\n            nodeFilter: options.nodeFilter,\n            nodeSelector: options.nodeSelector,\n            generateRequestId: options.generateRequestId,\n            name: options.name,\n            opaqueIdPrefix: options.opaqueIdPrefix,\n            context: options.context,\n            productCheck: 'Elasticsearch',\n            maxResponseSize: options.maxResponseSize,\n            maxCompressedResponseSize: options.maxCompressedResponseSize,\n            vendoredHeaders: {\n                jsonContentType: 'application/vnd.elasticsearch+json; compatible-with=8',\n                ndjsonContentType: 'application/vnd.elasticsearch+x-ndjson; compatible-with=8',\n                accept: 'application/vnd.elasticsearch+json; compatible-with=8,text/plain'\n            },\n            redaction: options.redaction\n        });\n        this.helpers = new helpers_1.default({\n            client: this,\n            metaHeader: options.enableMetaHeader\n                ? `es=${clientVersion},js=${nodeVersion},t=${transportVersion},hc=${nodeVersion}`\n                : null,\n            maxRetries: options.maxRetries\n        });\n    }\n    child(opts) {\n        // Merge the new options with the initial ones\n        // @ts-expect-error kChild symbol is for internal use only\n        const options = Object.assign({}, this[kInitialOptions], opts);\n        // Pass to the child client the parent instances that cannot be overridden\n        // @ts-expect-error kInitialOptions symbol is for internal use only\n        options[kChild] = {\n            connectionPool: this.connectionPool,\n            serializer: this.serializer,\n            diagnostic: this.diagnostic,\n            initialOptions: options\n        };\n        /* istanbul ignore else */\n        if (options.auth !== undefined) {\n            options.headers = (0, BaseConnection_1.prepareHeaders)(options.headers, options.auth);\n        }\n        return new Client(options);\n    }\n    async close() {\n        return await this.connectionPool.empty();\n    }\n}\nexports[\"default\"] = Client;\nfunction isHttpConnection(node) {\n    if (Array.isArray(node)) {\n        return node.some((n) => (typeof n === 'string' ? new node_url_1.URL(n).protocol : n.url.protocol) === 'http:');\n    }\n    else {\n        if (node == null)\n            return false;\n        return (typeof node === 'string' ? new node_url_1.URL(node).protocol : node.url.protocol) === 'http:';\n    }\n}\nfunction getAuth(node) {\n    if (Array.isArray(node)) {\n        for (const url of node) {\n            const auth = getUsernameAndPassword(url);\n            if (auth != null && auth.username !== '' && auth.password !== '') {\n                return auth;\n            }\n        }\n        return null;\n    }\n    else {\n        const auth = getUsernameAndPassword(node);\n        if (auth != null && auth.username !== '' && auth.password !== '') {\n            return auth;\n        }\n        return null;\n    }\n    function getUsernameAndPassword(node) {\n        /* istanbul ignore else */\n        if (typeof node === 'string') {\n            const { username, password } = new node_url_1.URL(node);\n            return {\n                username: decodeURIComponent(username),\n                password: decodeURIComponent(password)\n            };\n        }\n        else if (node != null && node.url instanceof node_url_1.URL) {\n            return {\n                username: decodeURIComponent(node.url.username),\n                password: decodeURIComponent(node.url.password)\n            };\n        }\n        else {\n            return null;\n        }\n    }\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\") you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable @typescript-eslint/promise-function-async */\n/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\nconst node_assert_1 = tslib_1.__importDefault(__webpack_require__(/*! node:assert */ \"node:assert\"));\nconst timersPromises = tslib_1.__importStar(__webpack_require__(/*! node:timers/promises */ \"node:timers/promises\"));\nconst node_stream_1 = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst transport_1 = __webpack_require__(/*! @elastic/transport */ \"(rsc)/./node_modules/@elastic/transport/index.js\");\nconst Arrow_node_1 = __webpack_require__(/*! apache-arrow/Arrow.node */ \"(rsc)/./node_modules/apache-arrow/Arrow.node.js\");\nconst { ResponseError, ConfigurationError } = transport_1.errors;\nconst sleep = timersPromises.setTimeout;\nconst pImmediate = timersPromises.setImmediate;\n/* istanbul ignore next */\nconst noop = () => { };\nconst kClient = Symbol('elasticsearch-client');\nconst kMetaHeader = Symbol('meta header');\nconst kMaxRetries = Symbol('max retries');\nclass Helpers {\n    constructor(opts) {\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _b, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _c, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this[kClient] = opts.client;\n        this[kMetaHeader] = opts.metaHeader;\n        this[kMaxRetries] = opts.maxRetries;\n    }\n    /**\n     * Runs a search operation. The only difference between client.search and this utility,\n     * is that we are only returning the hits to the user and not the full ES response.\n     * This helper automatically adds `filter_path=hits.hits._source` to the querystring,\n     * as it will only need the documents source.\n     * @param {object} params - The Elasticsearch's search parameters.\n     * @param {object} options - The client optional configuration for this request.\n     * @return {array} The documents that matched the request.\n     */\n    async search(params, options = {}) {\n        var _d;\n        appendFilterPath('hits.hits._id,hits.hits._source', params, true);\n        options.meta = true;\n        const { body: result } = await this[kClient].search(params, options);\n        if (((_d = result.hits) === null || _d === void 0 ? void 0 : _d.hits) != null) {\n            return result.hits.hits.map(d => ({\n                // Starting with version 8.14.0, _id is optional, but in our case it's always present.\n                // See @es_quirk documentation in elasticsearch-specification/specification/_global/search/_types/hits.ts\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                _id: d._id,\n                ...d._source\n            }));\n        }\n        return [];\n    }\n    /**\n     * Runs a scroll search operation. This function returns an async iterator, allowing\n     * the user to use a for await loop to get all the results of a given search.\n     * ```js\n     * for await (const result of client.helpers.scrollSearch({ params })) {\n     *   console.log(result)\n     * }\n     * ```\n     * Each result represents the entire body of a single scroll search request,\n     * if you just need to scroll the results, use scrollDocuments.\n     * This function handles automatically retries on 429 status code.\n     * @param {object} params - The Elasticsearch's search parameters.\n     * @param {object} options - The client optional configuration for this request.\n     * @return {iterator} the async iterator\n     */\n    async *scrollSearch(params, options = {}) {\n        var _d, _e, _f, _g;\n        options.meta = true;\n        if (this[kMetaHeader] !== null) {\n            options.headers = (_d = options.headers) !== null && _d !== void 0 ? _d : {};\n            options.headers['x-elastic-client-meta'] = `${this[kMetaHeader]},h=s`;\n        }\n        const wait = (_e = options.wait) !== null && _e !== void 0 ? _e : 5000;\n        const maxRetries = (_f = options.maxRetries) !== null && _f !== void 0 ? _f : this[kMaxRetries];\n        if (Array.isArray(options.ignore)) {\n            options.ignore.push(429);\n        }\n        else {\n            options.ignore = [429];\n        }\n        params.scroll = (_g = params.scroll) !== null && _g !== void 0 ? _g : '1m';\n        appendFilterPath('_scroll_id', params, false);\n        let response;\n        for (let i = 0; i <= maxRetries; i++) {\n            response = await this[kClient].search(params, options);\n            if (response.statusCode !== 429)\n                break;\n            await sleep(wait);\n        }\n        (0, node_assert_1.default)(response !== undefined, 'The response is undefined, please file a bug report');\n        const { redaction = { type: 'replace' } } = options;\n        const errorOptions = { redaction };\n        if (response.statusCode === 429) {\n            throw new ResponseError(response, errorOptions);\n        }\n        let scroll_id = response.body._scroll_id;\n        let stop = false;\n        const clear = async () => {\n            stop = true;\n            await this[kClient].clearScroll({ scroll_id }, { ignore: [400], ...options });\n        };\n        while (response.body.hits != null && response.body.hits.hits.length > 0) {\n            // scroll id is always present in the response, but it might\n            // change over time based on the number of shards\n            scroll_id = response.body._scroll_id;\n            // @ts-expect-error\n            response.clear = clear;\n            addDocumentsGetter(response);\n            // @ts-expect-error\n            yield response;\n            if (stop) {\n                break;\n            }\n            for (let i = 0; i <= maxRetries; i++) {\n                const r = await this[kClient].scroll({\n                    scroll: params.scroll,\n                    rest_total_hits_as_int: params.rest_total_hits_as_int,\n                    scroll_id\n                }, options);\n                response = r;\n                (0, node_assert_1.default)(response !== undefined, 'The response is undefined, please file a bug report');\n                if (response.statusCode !== 429)\n                    break;\n                await sleep(wait);\n            }\n            if (response.statusCode === 429) {\n                throw new ResponseError(response, errorOptions);\n            }\n        }\n        if (!stop) {\n            await clear();\n        }\n    }\n    /**\n     * Runs a scroll search operation. This function returns an async iterator, allowing\n     * the user to use a for await loop to get all the documents of a given search.\n     * ```js\n     * for await (const document of client.helpers.scrollSearch({ params })) {\n     *   console.log(document)\n     * }\n     * ```\n     * Each document is what you will find by running a scrollSearch and iterating on the hits array.\n     * This helper automatically adds `filter_path=hits.hits._source` to the querystring,\n     * as it will only need the documents source.\n     * @param {object} params - The Elasticsearch's search parameters.\n     * @param {object} options - The client optional configuration for this request.\n     * @return {iterator} the async iterator\n     */\n    async *scrollDocuments(params, options = {}) {\n        appendFilterPath('hits.hits._source', params, true);\n        for await (const { documents } of this.scrollSearch(params, options)) {\n            for (const document of documents) {\n                yield document;\n            }\n        }\n    }\n    /**\n     * Creates a msearch helper instance. Once you configure it, you can use the provided\n     * `search` method to add new searches in the queue.\n     * @param {object} options - The configuration of the msearch operations.\n     * @param {object} reqOptions - The client optional configuration for this request.\n     * @return {object} The possible operations to run.\n     */\n    msearch(options = {}, reqOptions = {}) {\n        const client = this[kClient];\n        const { operations = 5, concurrency = 5, flushInterval = 500, retries = this[kMaxRetries], wait = 5000, ...msearchOptions } = options;\n        reqOptions.meta = true;\n        const { redaction = { type: 'replace' } } = reqOptions;\n        const errorOptions = { redaction };\n        let stopReading = false;\n        let stopError = null;\n        let timeoutRef = null;\n        const operationsStream = new node_stream_1.Readable({\n            objectMode: true,\n            read(size) { }\n        });\n        const p = iterate();\n        const helper = {\n            [Symbol.toStringTag]: 'Promise',\n            then(onFulfilled, onRejected) {\n                return p.then(onFulfilled, onRejected);\n            },\n            catch(onRejected) {\n                return p.catch(onRejected);\n            },\n            finally(onFinally) {\n                return p.finally(onFinally);\n            },\n            stop(error = null) {\n                if (stopReading)\n                    return;\n                stopReading = true;\n                stopError = error;\n                operationsStream.push(null);\n            },\n            // TODO: support abort a single search?\n            // NOTE: the validation checks are synchronous and the callback/promise will\n            //       be resolved in the same tick. We might want to fix this in the future.\n            search(header, body) {\n                if (stopReading) {\n                    const error = stopError === null\n                        ? new ConfigurationError('The msearch processor has been stopped')\n                        : stopError;\n                    return Promise.reject(error);\n                }\n                if (!(typeof header === 'object' && header !== null && !Array.isArray(header))) {\n                    return Promise.reject(new ConfigurationError('The header should be an object'));\n                }\n                if (!(typeof body === 'object' && body !== null && !Array.isArray(body))) {\n                    return Promise.reject(new ConfigurationError('The body should be an object'));\n                }\n                let onFulfilled = null;\n                let onRejected = null;\n                const promise = new Promise((resolve, reject) => {\n                    onFulfilled = resolve;\n                    onRejected = reject;\n                });\n                const callback = function callback(err, result) {\n                    err !== null ? onRejected(err) : onFulfilled(result);\n                };\n                operationsStream.push([header, body, callback]);\n                return promise;\n            }\n        };\n        return helper;\n        async function iterate() {\n            const { semaphore, finish } = buildSemaphore();\n            const msearchBody = [];\n            const callbacks = [];\n            let loadedOperations = 0;\n            timeoutRef = setTimeout(onFlushTimeout, flushInterval); // eslint-disable-line\n            try {\n                for await (const operation of operationsStream) {\n                    timeoutRef.refresh();\n                    loadedOperations += 1;\n                    msearchBody.push(operation[0], operation[1]);\n                    callbacks.push(operation[2]);\n                    if (loadedOperations >= operations) {\n                        const send = await semaphore();\n                        send(msearchBody.slice(), callbacks.slice());\n                        msearchBody.length = 0;\n                        callbacks.length = 0;\n                        loadedOperations = 0;\n                    }\n                }\n            }\n            finally {\n                clearTimeout(timeoutRef);\n            }\n            // In some cases the previos http call does not have finished,\n            // or we didn't reach the flush bytes threshold, so we force one last operation.\n            if (loadedOperations > 0) {\n                const send = await semaphore();\n                send(msearchBody, callbacks);\n            }\n            await finish();\n            if (stopError !== null) {\n                throw stopError;\n            }\n            async function onFlushTimeout() {\n                if (loadedOperations === 0)\n                    return;\n                const msearchBodyCopy = msearchBody.slice();\n                const callbacksCopy = callbacks.slice();\n                msearchBody.length = 0;\n                callbacks.length = 0;\n                loadedOperations = 0;\n                try {\n                    const send = await semaphore();\n                    send(msearchBodyCopy, callbacksCopy);\n                }\n                catch (err) {\n                    /* istanbul ignore next */\n                    // @ts-expect-error\n                    helper.stop(err);\n                }\n            }\n        }\n        // This function builds a semaphore using the concurrency\n        // options of the msearch helper. It is used inside the iterator\n        // to guarantee that no more than the number of operations\n        // allowed to run at the same time are executed.\n        // It returns a semaphore function which resolves in the next tick\n        // if we didn't reach the maximim concurrency yet, otherwise it returns\n        // a promise that resolves as soon as one of the running request has finshed.\n        // The semaphore function resolves a send function, which will be used\n        // to send the actual msearch request.\n        // It also returns a finish function, which returns a promise that is resolved\n        // when there are no longer request running.\n        function buildSemaphore() {\n            let resolveSemaphore = null;\n            let resolveFinish = null;\n            let running = 0;\n            return { semaphore, finish };\n            function finish() {\n                return new Promise((resolve, reject) => {\n                    if (running === 0) {\n                        resolve();\n                    }\n                    else {\n                        resolveFinish = resolve;\n                    }\n                });\n            }\n            function semaphore() {\n                if (running < concurrency) {\n                    running += 1;\n                    return pImmediate(send);\n                }\n                else {\n                    return new Promise((resolve, reject) => {\n                        resolveSemaphore = resolve;\n                    });\n                }\n            }\n            function send(msearchBody, callbacks) {\n                /* istanbul ignore if */\n                if (running > concurrency) {\n                    throw new Error('Max concurrency reached');\n                }\n                msearchOperation(msearchBody, callbacks, () => {\n                    running -= 1;\n                    if (resolveSemaphore !== null) {\n                        running += 1;\n                        resolveSemaphore(send);\n                        resolveSemaphore = null;\n                    }\n                    else if (resolveFinish != null && running === 0) {\n                        resolveFinish();\n                    }\n                });\n            }\n        }\n        function msearchOperation(msearchBody, callbacks, done) {\n            let retryCount = retries;\n            // Instead of going full on async-await, which would make the code easier to read,\n            // we have decided to use callback style instead.\n            // This because every time we use async await, V8 will create multiple promises\n            // behind the scenes, making the code slightly slower.\n            tryMsearch(msearchBody, callbacks, retrySearch);\n            function retrySearch(msearchBody, callbacks) {\n                if (msearchBody.length > 0 && retryCount > 0) {\n                    retryCount -= 1;\n                    setTimeout(tryMsearch, wait, msearchBody, callbacks, retrySearch);\n                    return;\n                }\n                done();\n            }\n            // This function never returns an error, if the msearch operation fails,\n            // the error is dispatched to all search executors.\n            function tryMsearch(msearchBody, callbacks, done) {\n                client.msearch(Object.assign({}, msearchOptions, { body: msearchBody }), reqOptions)\n                    .then(results => {\n                    const retryBody = [];\n                    const retryCallbacks = [];\n                    const { responses } = results.body;\n                    for (let i = 0, len = responses.length; i < len; i++) {\n                        const response = responses[i];\n                        if (response.status === 429 && retryCount > 0) {\n                            retryBody.push(msearchBody[i * 2]);\n                            retryBody.push(msearchBody[(i * 2) + 1]);\n                            retryCallbacks.push(callbacks[i]);\n                            continue;\n                        }\n                        const result = { ...results, body: response };\n                        // @ts-expect-error\n                        addDocumentsGetter(result);\n                        if (response.status != null && response.status >= 400) {\n                            callbacks[i](new ResponseError(result, errorOptions), result);\n                        }\n                        else {\n                            callbacks[i](null, result);\n                        }\n                    }\n                    done(retryBody, retryCallbacks);\n                })\n                    .catch(err => {\n                    for (const callback of callbacks) {\n                        callback(err, null);\n                    }\n                    return done([], []);\n                });\n            }\n        }\n    }\n    /**\n     * Creates a bulk helper instance. Once you configure it, you can pick which operation\n     * to execute with the given dataset, index, create, update, and delete.\n     * @param {object} options - The configuration of the bulk operation.\n     * @param {object} reqOptions - The client optional configuration for this request.\n     * @return {object} The possible operations to run with the datasource.\n     */\n    bulk(options, reqOptions = {}) {\n        var _d, _e;\n        (0, node_assert_1.default)(!((_d = reqOptions.asStream) !== null && _d !== void 0 ? _d : false), 'bulk helper: the asStream request option is not supported');\n        const client = this[kClient];\n        const { serializer } = client;\n        if (this[kMetaHeader] !== null) {\n            reqOptions.headers = (_e = reqOptions.headers) !== null && _e !== void 0 ? _e : {};\n            reqOptions.headers['x-elastic-client-meta'] = `${this[kMetaHeader]},h=bp`;\n        }\n        reqOptions.meta = true;\n        const { datasource, onDocument, flushBytes = 5000000, flushInterval = 30000, concurrency = 5, retries = this[kMaxRetries], wait = 5000, onDrop = noop, \n        // onSuccess does not default to noop, to avoid the performance hit\n        // of deserializing every document in the bulk request\n        onSuccess, refreshOnCompletion = false, ...bulkOptions } = options;\n        if (datasource === undefined) {\n            // @ts-expect-error\n            return Promise.reject(new ConfigurationError('bulk helper: the datasource is required'));\n        }\n        if (!(Array.isArray(datasource) || Buffer.isBuffer(datasource) || isReadableStream(datasource) || isAsyncIterator(datasource))) {\n            // @ts-expect-error\n            return Promise.reject(new ConfigurationError('bulk helper: the datasource must be an array or a buffer or a readable stream or an async generator'));\n        }\n        if (onDocument === undefined) {\n            // @ts-expect-error\n            return Promise.reject(new ConfigurationError('bulk helper: the onDocument callback is required'));\n        }\n        let shouldAbort = false;\n        let timeoutRef = null;\n        const stats = {\n            total: 0,\n            failed: 0,\n            retry: 0,\n            successful: 0,\n            noop: 0,\n            time: 0,\n            bytes: 0,\n            aborted: false\n        };\n        const p = iterate();\n        const helper = {\n            [Symbol.toStringTag]: 'Promise',\n            then(onFulfilled, onRejected) {\n                return p.then(onFulfilled, onRejected);\n            },\n            catch(onRejected) {\n                return p.catch(onRejected);\n            },\n            finally(onFinally) {\n                return p.finally(onFinally);\n            },\n            get stats() {\n                return stats;\n            },\n            abort() {\n                clearTimeout(timeoutRef);\n                shouldAbort = true;\n                stats.aborted = true;\n                return this;\n            }\n        };\n        return helper;\n        /**\n         * Function that iterates over the given datasource and start a bulk operation as soon\n         * as it reaches the configured bulk size. It's designed to use the Node.js asynchronous\n         * model at this maximum capacity, as it will collect the next body to send while there is\n         * a running http call. In this way, the CPU time will be used carefully.\n         * The objects will be serialized right away, to approximate the byte length of the body.\n         * It creates an array of strings instead of a ndjson string because the bulkOperation\n         * will navigate the body for matching failed operations with the original document.\n         */\n        async function iterate() {\n            const { semaphore, finish } = buildSemaphore();\n            const startTime = Date.now();\n            const bulkBody = [];\n            let actionBody = '';\n            let payloadBody = '';\n            let chunkBytes = 0;\n            timeoutRef = setTimeout(onFlushTimeout, flushInterval); // eslint-disable-line\n            // @ts-expect-error datasource is an iterable\n            for await (const chunk of datasource) {\n                if (shouldAbort)\n                    break;\n                timeoutRef.refresh();\n                const result = onDocument(chunk);\n                const [action, payload] = Array.isArray(result) ? result : [result, chunk];\n                const operation = Object.keys(action)[0];\n                if (operation === 'index' || operation === 'create') {\n                    actionBody = serializer.serialize(action);\n                    payloadBody = typeof payload === 'string'\n                        ? payload\n                        : serializer.serialize(payload);\n                    chunkBytes += Buffer.byteLength(actionBody) + Buffer.byteLength(payloadBody);\n                    bulkBody.push(actionBody, payloadBody);\n                }\n                else if (operation === 'update') {\n                    actionBody = serializer.serialize(action);\n                    payloadBody = typeof chunk === 'string'\n                        ? `{\"doc\":${chunk}}`\n                        : serializer.serialize({ doc: chunk, ...payload });\n                    chunkBytes += Buffer.byteLength(actionBody) + Buffer.byteLength(payloadBody);\n                    bulkBody.push(actionBody, payloadBody);\n                }\n                else if (operation === 'delete') {\n                    actionBody = serializer.serialize(action);\n                    chunkBytes += Buffer.byteLength(actionBody);\n                    bulkBody.push(actionBody);\n                }\n                else {\n                    clearTimeout(timeoutRef);\n                    throw new ConfigurationError(`Bulk helper invalid action: '${operation}'`);\n                }\n                if (chunkBytes >= flushBytes) {\n                    stats.bytes += chunkBytes;\n                    const bulkBodyCopy = bulkBody.slice();\n                    bulkBody.length = 0;\n                    chunkBytes = 0;\n                    const send = await semaphore();\n                    send(bulkBodyCopy);\n                }\n            }\n            clearTimeout(timeoutRef);\n            // In some cases the previous http call has not finished,\n            // or we didn't reach the flush bytes threshold, so we force one last operation.\n            if (!shouldAbort && chunkBytes > 0) {\n                const send = await semaphore();\n                stats.bytes += chunkBytes;\n                send(bulkBody);\n            }\n            await finish();\n            if (refreshOnCompletion !== false) {\n                await client.indices.refresh({\n                    index: typeof refreshOnCompletion === 'string'\n                        ? refreshOnCompletion\n                        : '_all'\n                }, reqOptions);\n            }\n            stats.time = Date.now() - startTime;\n            stats.total = stats.successful + stats.failed;\n            return stats;\n            async function onFlushTimeout() {\n                if (chunkBytes === 0)\n                    return;\n                stats.bytes += chunkBytes;\n                const bulkBodyCopy = bulkBody.slice();\n                bulkBody.length = 0;\n                chunkBytes = 0;\n                try {\n                    const send = await semaphore();\n                    send(bulkBodyCopy);\n                }\n                catch (err) {\n                    /* istanbul ignore next */\n                    helper.abort(); // eslint-disable-line\n                }\n            }\n        }\n        // This function builds a semaphore using the concurrency\n        // options of the bulk helper. It is used inside the iterator\n        // to guarantee that no more than the number of operations\n        // allowed to run at the same time are executed.\n        // It returns a semaphore function which resolves in the next tick\n        // if we didn't reach the maximum concurrency yet, otherwise it returns\n        // a promise that resolves as soon as one of the running requests has finished.\n        // The semaphore function resolves a send function, which will be used\n        // to send the actual bulk request.\n        // It also returns a finish function, which returns a promise that is resolved\n        // when there are no longer request running. It rejects an error if one\n        // of the request has failed for some reason.\n        function buildSemaphore() {\n            let resolveSemaphore = null;\n            let resolveFinish = null;\n            let rejectFinish = null;\n            let error = null;\n            let running = 0;\n            return { semaphore, finish };\n            function finish() {\n                return new Promise((resolve, reject) => {\n                    if (running === 0) {\n                        if (error !== null) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    }\n                    else {\n                        resolveFinish = resolve;\n                        rejectFinish = reject;\n                    }\n                });\n            }\n            function semaphore() {\n                if (running < concurrency) {\n                    running += 1;\n                    return pImmediate(send);\n                }\n                else {\n                    return new Promise((resolve, reject) => {\n                        resolveSemaphore = resolve;\n                    });\n                }\n            }\n            function send(bulkBody) {\n                /* istanbul ignore if */\n                if (running > concurrency) {\n                    throw new Error('Max concurrency reached');\n                }\n                bulkOperation(bulkBody, err => {\n                    running -= 1;\n                    if (err != null) {\n                        shouldAbort = true;\n                        error = err;\n                    }\n                    if (resolveSemaphore !== null) {\n                        running += 1;\n                        resolveSemaphore(send);\n                        resolveSemaphore = null;\n                    }\n                    else if (resolveFinish != null && rejectFinish != null && running === 0) {\n                        if (error != null) {\n                            rejectFinish(error);\n                        }\n                        else {\n                            resolveFinish();\n                        }\n                    }\n                });\n            }\n        }\n        function bulkOperation(bulkBody, callback) {\n            let retryCount = retries;\n            let isRetrying = false;\n            // Instead of going full on async-await, which would make the code easier to read,\n            // we have decided to use callback style instead.\n            // This because every time we use async await, V8 will create multiple promises\n            // behind the scenes, making the code slightly slower.\n            tryBulk(bulkBody, retryDocuments);\n            function retryDocuments(err, bulkBody) {\n                if (err != null)\n                    return callback(err);\n                if (shouldAbort)\n                    return callback();\n                if (bulkBody.length > 0) {\n                    if (retryCount > 0) {\n                        isRetrying = true;\n                        retryCount -= 1;\n                        stats.retry += bulkBody.length;\n                        setTimeout(tryBulk, wait, bulkBody, retryDocuments);\n                        return;\n                    }\n                    for (let i = 0, len = bulkBody.length; i < len; i = i + 2) {\n                        const operation = Object.keys(serializer.deserialize(bulkBody[i]))[0];\n                        onDrop({\n                            status: 429,\n                            error: null,\n                            operation: serializer.deserialize(bulkBody[i]),\n                            // @ts-expect-error\n                            document: operation !== 'delete'\n                                ? serializer.deserialize(bulkBody[i + 1])\n                                /* istanbul ignore next */\n                                : null,\n                            retried: isRetrying\n                        });\n                        stats.failed += 1;\n                    }\n                }\n                callback();\n            }\n            /**\n             * Zips bulk response items (the action's result) with the original document body.\n             * The raw string version of action and document lines are also included.\n             */\n            function zipBulkResults(responseItems, bulkBody) {\n                const zipped = [];\n                let indexSlice = 0;\n                for (let i = 0, len = responseItems.length; i < len; i++) {\n                    const result = responseItems[i];\n                    const operation = Object.keys(result)[0];\n                    let zipResult;\n                    if (operation === 'delete') {\n                        zipResult = {\n                            result,\n                            raw: { action: bulkBody[indexSlice] }\n                        };\n                        indexSlice += 1;\n                    }\n                    else {\n                        const document = bulkBody[indexSlice + 1];\n                        zipResult = {\n                            result,\n                            raw: { action: bulkBody[indexSlice], document },\n                            // this is a function so that deserialization is only done when needed\n                            // to avoid a performance hit\n                            document: () => serializer.deserialize(document)\n                        };\n                        indexSlice += 2;\n                    }\n                    zipped.push(zipResult);\n                }\n                return zipped;\n            }\n            function tryBulk(bulkBody, callback) {\n                if (shouldAbort)\n                    return callback(null, []);\n                client.bulk(Object.assign({}, bulkOptions, { body: bulkBody }), reqOptions)\n                    .then(response => {\n                    var _d, _e, _f;\n                    const result = response.body;\n                    const results = zipBulkResults(result.items, bulkBody);\n                    if (!result.errors) {\n                        stats.successful += result.items.length;\n                        for (const item of results) {\n                            const { result, document = noop } = item;\n                            if (((_d = result.update) === null || _d === void 0 ? void 0 : _d.result) === 'noop') {\n                                stats.noop++;\n                            }\n                            if (onSuccess != null)\n                                onSuccess({ result, document: document() });\n                        }\n                        return callback(null, []);\n                    }\n                    const retry = [];\n                    for (const item of results) {\n                        const { result, raw, document = noop } = item;\n                        const operation = Object.keys(result)[0];\n                        // @ts-expect-error\n                        const responseItem = result[operation];\n                        (0, node_assert_1.default)(responseItem !== undefined, 'The responseItem is undefined, please file a bug report');\n                        if (responseItem.status >= 400) {\n                            // 429 is the only status code where we might want to retry\n                            // a document, because it was not an error in the document itself,\n                            // but the ES node was handling too many operations.\n                            if (responseItem.status === 429) {\n                                retry.push(raw.action);\n                                /* istanbul ignore next */\n                                if (operation !== 'delete') {\n                                    retry.push((_e = raw.document) !== null && _e !== void 0 ? _e : '');\n                                }\n                            }\n                            else {\n                                onDrop({\n                                    status: responseItem.status,\n                                    error: (_f = responseItem.error) !== null && _f !== void 0 ? _f : null,\n                                    operation: serializer.deserialize(raw.action),\n                                    // @ts-expect-error\n                                    document: document(),\n                                    retried: isRetrying\n                                });\n                                stats.failed += 1;\n                            }\n                        }\n                        else {\n                            stats.successful += 1;\n                            if (onSuccess != null)\n                                onSuccess({ result, document: document() });\n                        }\n                    }\n                    callback(null, retry);\n                })\n                    .catch(err => {\n                    callback(err, []);\n                });\n            }\n        }\n    }\n    /**\n     * Creates an ES|QL helper instance, to help transform the data returned by an ES|QL query into easy-to-use formats.\n     * @param {object} params - Request parameters sent to esql.query()\n     * @returns {object} EsqlHelper instance\n     */\n    esql(params, reqOptions = {}) {\n        var _d;\n        if (this[kMetaHeader] !== null) {\n            reqOptions.headers = (_d = reqOptions.headers) !== null && _d !== void 0 ? _d : {};\n            reqOptions.headers['x-elastic-client-meta'] = `${this[kMetaHeader]},h=qo`;\n        }\n        const client = this[kClient];\n        function toRecords(response) {\n            const { columns, values } = response;\n            return values.map(row => {\n                const doc = {};\n                row.forEach((cell, index) => {\n                    const { name } = columns[index];\n                    // @ts-expect-error\n                    doc[name] = cell;\n                });\n                return doc;\n            });\n        }\n        const metaHeader = this[kMetaHeader];\n        const helper = {\n            /**\n             * Pivots ES|QL query results into an array of row objects, rather than the default format where each row is an array of values.\n             */\n            async toRecords() {\n                params.format = 'json';\n                // @ts-expect-error it's typed as ArrayBuffer but we know it will be JSON\n                const response = await client.esql.query(params, reqOptions);\n                const records = toRecords(response);\n                const { columns } = response;\n                return { records, columns };\n            },\n            async toArrowTable() {\n                var _d;\n                if (metaHeader !== null) {\n                    reqOptions.headers = (_d = reqOptions.headers) !== null && _d !== void 0 ? _d : {};\n                    reqOptions.headers['x-elastic-client-meta'] = `${metaHeader},h=qa`;\n                }\n                params.format = 'arrow';\n                const response = await client.esql.query(params, reqOptions);\n                return (0, Arrow_node_1.tableFromIPC)(response);\n            },\n            async toArrowReader() {\n                var _d;\n                if (metaHeader !== null) {\n                    reqOptions.headers = (_d = reqOptions.headers) !== null && _d !== void 0 ? _d : {};\n                    reqOptions.headers['x-elastic-client-meta'] = `${metaHeader},h=qa`;\n                    reqOptions.asStream = true;\n                }\n                params.format = 'arrow';\n                const response = await client.esql.query(params, reqOptions);\n                return Arrow_node_1.RecordBatchStreamReader.from(response);\n            }\n        };\n        return helper;\n    }\n}\nexports[\"default\"] = Helpers;\n_a = kClient, _b = kMetaHeader, _c = kMaxRetries;\n// Using a getter will improve the overall performances of the code,\n// as we will reed the documents only if needed.\nfunction addDocumentsGetter(result) {\n    Object.defineProperty(result, 'documents', {\n        get() {\n            var _d;\n            if (((_d = this.body.hits) === null || _d === void 0 ? void 0 : _d.hits) != null) {\n                // @ts-expect-error\n                return this.body.hits.hits.map(d => d._source);\n            }\n            return [];\n        }\n    });\n}\nfunction appendFilterPath(filter, params, force) {\n    if (params.filter_path !== undefined) {\n        params.filter_path += ',' + filter; // eslint-disable-line\n    }\n    else if (force) {\n        params.filter_path = filter;\n    }\n}\nfunction isReadableStream(obj) {\n    return obj != null && typeof obj.pipe === 'function';\n}\nfunction isAsyncIterator(obj) {\n    return (obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]) != null;\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/lib/sniffingTransport.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/lib/sniffingTransport.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\") you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_assert_1 = tslib_1.__importDefault(__webpack_require__(/*! node:assert */ \"node:assert\"));\nconst transport_1 = __webpack_require__(/*! @elastic/transport */ \"(rsc)/./node_modules/@elastic/transport/index.js\");\nclass SniffingTransport extends transport_1.Transport {\n    sniff(opts) {\n        var _a;\n        if (this.isSniffing)\n            return;\n        this.isSniffing = true;\n        const request = {\n            method: 'GET',\n            path: (_a = this.sniffEndpoint) !== null && _a !== void 0 ? _a : '/_nodes/_all/http'\n        };\n        this.request(request, { id: opts.requestId, meta: true })\n            .then(result => {\n            var _a, _b;\n            (0, node_assert_1.default)(isObject(result.body), 'The body should be an object');\n            this.isSniffing = false;\n            const protocol = (_b = (_a = result.meta.connection) === null || _a === void 0 ? void 0 : _a.url.protocol) !== null && _b !== void 0 ? _b : 'http:';\n            const hosts = this.connectionPool.nodesToHost(result.body.nodes, protocol);\n            this.connectionPool.update(hosts);\n            result.meta.sniff = { hosts, reason: opts.reason };\n            this.diagnostic.emit('sniff', null, result);\n        })\n            .catch(err => {\n            this.isSniffing = false;\n            err.meta.sniff = { hosts: [], reason: opts.reason };\n            this.diagnostic.emit('sniff', err, null);\n        });\n    }\n}\nexports[\"default\"] = SniffingTransport;\nfunction isObject(obj) {\n    return typeof obj === 'object';\n}\n//# sourceMappingURL=sniffingTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvc25pZmZpbmdUcmFuc3BvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsdURBQU87QUFDL0IsOENBQThDLG1CQUFPLENBQUMsZ0NBQWE7QUFDbkUsb0JBQW9CLG1CQUFPLENBQUMsNEVBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdDQUFnQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvZWxhc3RpY3NlYXJjaC9saWIvc25pZmZpbmdUcmFuc3BvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IG5vZGVfYXNzZXJ0XzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibm9kZTphc3NlcnRcIikpO1xuY29uc3QgdHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiQGVsYXN0aWMvdHJhbnNwb3J0XCIpO1xuY2xhc3MgU25pZmZpbmdUcmFuc3BvcnQgZXh0ZW5kcyB0cmFuc3BvcnRfMS5UcmFuc3BvcnQge1xuICAgIHNuaWZmKG9wdHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5pc1NuaWZmaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzU25pZmZpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHBhdGg6IChfYSA9IHRoaXMuc25pZmZFbmRwb2ludCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJy9fbm9kZXMvX2FsbC9odHRwJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlcXVlc3QocmVxdWVzdCwgeyBpZDogb3B0cy5yZXF1ZXN0SWQsIG1ldGE6IHRydWUgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgKDAsIG5vZGVfYXNzZXJ0XzEuZGVmYXVsdCkoaXNPYmplY3QocmVzdWx0LmJvZHkpLCAnVGhlIGJvZHkgc2hvdWxkIGJlIGFuIG9iamVjdCcpO1xuICAgICAgICAgICAgdGhpcy5pc1NuaWZmaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbCA9IChfYiA9IChfYSA9IHJlc3VsdC5tZXRhLmNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51cmwucHJvdG9jb2wpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdodHRwOic7XG4gICAgICAgICAgICBjb25zdCBob3N0cyA9IHRoaXMuY29ubmVjdGlvblBvb2wubm9kZXNUb0hvc3QocmVzdWx0LmJvZHkubm9kZXMsIHByb3RvY29sKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvblBvb2wudXBkYXRlKGhvc3RzKTtcbiAgICAgICAgICAgIHJlc3VsdC5tZXRhLnNuaWZmID0geyBob3N0cywgcmVhc29uOiBvcHRzLnJlYXNvbiB9O1xuICAgICAgICAgICAgdGhpcy5kaWFnbm9zdGljLmVtaXQoJ3NuaWZmJywgbnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc1NuaWZmaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBlcnIubWV0YS5zbmlmZiA9IHsgaG9zdHM6IFtdLCByZWFzb246IG9wdHMucmVhc29uIH07XG4gICAgICAgICAgICB0aGlzLmRpYWdub3N0aWMuZW1pdCgnc25pZmYnLCBlcnIsIG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTbmlmZmluZ1RyYW5zcG9ydDtcbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNuaWZmaW5nVHJhbnNwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/elasticsearch/lib/sniffingTransport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@elastic/transport/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nconst { default: Diagnostic, events } = __webpack_require__(/*! ./lib/Diagnostic */ \"(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js\")\nconst Transport = (__webpack_require__(/*! ./lib/Transport */ \"(rsc)/./node_modules/@elastic/transport/lib/Transport.js\")[\"default\"])\nconst {\n  BaseConnection,\n  HttpConnection,\n  UndiciConnection\n} = __webpack_require__(/*! ./lib/connection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/index.js\")\nconst {\n  BaseConnectionPool,\n  ClusterConnectionPool,\n  CloudConnectionPool,\n  WeightedConnectionPool\n} = __webpack_require__(/*! ./lib/pool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/index.js\")\nconst Serializer = (__webpack_require__(/*! ./lib/Serializer */ \"(rsc)/./node_modules/@elastic/transport/lib/Serializer.js\")[\"default\"])\nconst errors = __webpack_require__(/*! ./lib/errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\")\n\nmodule.exports = {\n  Diagnostic,\n  Transport,\n  BaseConnection,\n  HttpConnection,\n  UndiciConnection,\n  BaseConnectionPool,\n  ClusterConnectionPool,\n  CloudConnectionPool,\n  WeightedConnectionPool,\n  Serializer,\n  errors,\n  events\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVZOztBQUVaLFFBQVEsOEJBQThCLEVBQUUsbUJBQU8sQ0FBQyxtRkFBa0I7QUFDbEUsa0JBQWtCLG1IQUFrQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLHlGQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsNkVBQVk7QUFDeEIsbUJBQW1CLHFIQUFtQztBQUN0RCxlQUFlLG1CQUFPLENBQUMsMkVBQWM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy90cmFuc3BvcnQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IGRlZmF1bHQ6IERpYWdub3N0aWMsIGV2ZW50cyB9ID0gcmVxdWlyZSgnLi9saWIvRGlhZ25vc3RpYycpXG5jb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9UcmFuc3BvcnQnKS5kZWZhdWx0XG5jb25zdCB7XG4gIEJhc2VDb25uZWN0aW9uLFxuICBIdHRwQ29ubmVjdGlvbixcbiAgVW5kaWNpQ29ubmVjdGlvblxufSA9IHJlcXVpcmUoJy4vbGliL2Nvbm5lY3Rpb24nKVxuY29uc3Qge1xuICBCYXNlQ29ubmVjdGlvblBvb2wsXG4gIENsdXN0ZXJDb25uZWN0aW9uUG9vbCxcbiAgQ2xvdWRDb25uZWN0aW9uUG9vbCxcbiAgV2VpZ2h0ZWRDb25uZWN0aW9uUG9vbFxufSA9IHJlcXVpcmUoJy4vbGliL3Bvb2wnKVxuY29uc3QgU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vbGliL1NlcmlhbGl6ZXInKS5kZWZhdWx0XG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKCcuL2xpYi9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGlhZ25vc3RpYyxcbiAgVHJhbnNwb3J0LFxuICBCYXNlQ29ubmVjdGlvbixcbiAgSHR0cENvbm5lY3Rpb24sXG4gIFVuZGljaUNvbm5lY3Rpb24sXG4gIEJhc2VDb25uZWN0aW9uUG9vbCxcbiAgQ2x1c3RlckNvbm5lY3Rpb25Qb29sLFxuICBDbG91ZENvbm5lY3Rpb25Qb29sLFxuICBXZWlnaHRlZENvbm5lY3Rpb25Qb29sLFxuICBTZXJpYWxpemVyLFxuICBlcnJvcnMsXG4gIGV2ZW50c1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/Diagnostic.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.events = void 0;\nconst node_events_1 = __webpack_require__(/*! node:events */ \"node:events\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nvar events;\n(function (events) {\n    events[\"RESPONSE\"] = \"response\";\n    events[\"REQUEST\"] = \"request\";\n    events[\"SNIFF\"] = \"sniff\";\n    events[\"RESURRECT\"] = \"resurrect\";\n    events[\"SERIALIZATION\"] = \"serialization\";\n    events[\"DESERIALIZATION\"] = \"deserialization\";\n})(events || (exports.events = events = {}));\nclass Diagnostic extends node_events_1.EventEmitter {\n    on(event, listener) {\n        assertSupportedEvent(event);\n        super.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        assertSupportedEvent(event);\n        super.once(event, listener);\n        return this;\n    }\n    off(event, listener) {\n        assertSupportedEvent(event);\n        super.off(event, listener);\n        return this;\n    }\n}\nexports[\"default\"] = Diagnostic;\nfunction assertSupportedEvent(event) {\n    if (!supportedEvents.includes(event)) {\n        throw new errors_1.ConfigurationError(`The event '${event}' is not supported.`);\n    }\n}\n// @ts-expect-error\nconst supportedEvents = Object.keys(events).map(key => events[key]);\n//# sourceMappingURL=Diagnostic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9EaWFnbm9zdGljLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLHNCQUFzQixtQkFBTyxDQUFDLGdDQUFhO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWEsY0FBYyxjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQSw0REFBNEQsTUFBTTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9EaWFnbm9zdGljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV2ZW50cyA9IHZvaWQgMDtcbmNvbnN0IG5vZGVfZXZlbnRzXzEgPSByZXF1aXJlKFwibm9kZTpldmVudHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbnZhciBldmVudHM7XG4oZnVuY3Rpb24gKGV2ZW50cykge1xuICAgIGV2ZW50c1tcIlJFU1BPTlNFXCJdID0gXCJyZXNwb25zZVwiO1xuICAgIGV2ZW50c1tcIlJFUVVFU1RcIl0gPSBcInJlcXVlc3RcIjtcbiAgICBldmVudHNbXCJTTklGRlwiXSA9IFwic25pZmZcIjtcbiAgICBldmVudHNbXCJSRVNVUlJFQ1RcIl0gPSBcInJlc3VycmVjdFwiO1xuICAgIGV2ZW50c1tcIlNFUklBTElaQVRJT05cIl0gPSBcInNlcmlhbGl6YXRpb25cIjtcbiAgICBldmVudHNbXCJERVNFUklBTElaQVRJT05cIl0gPSBcImRlc2VyaWFsaXphdGlvblwiO1xufSkoZXZlbnRzIHx8IChleHBvcnRzLmV2ZW50cyA9IGV2ZW50cyA9IHt9KSk7XG5jbGFzcyBEaWFnbm9zdGljIGV4dGVuZHMgbm9kZV9ldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBhc3NlcnRTdXBwb3J0ZWRFdmVudChldmVudCk7XG4gICAgICAgIHN1cGVyLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBhc3NlcnRTdXBwb3J0ZWRFdmVudChldmVudCk7XG4gICAgICAgIHN1cGVyLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgYXNzZXJ0U3VwcG9ydGVkRXZlbnQoZXZlbnQpO1xuICAgICAgICBzdXBlci5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRGlhZ25vc3RpYztcbmZ1bmN0aW9uIGFzc2VydFN1cHBvcnRlZEV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKCFzdXBwb3J0ZWRFdmVudHMuaW5jbHVkZXMoZXZlbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Db25maWd1cmF0aW9uRXJyb3IoYFRoZSBldmVudCAnJHtldmVudH0nIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxufVxuLy8gQHRzLWV4cGVjdC1lcnJvclxuY29uc3Qgc3VwcG9ydGVkRXZlbnRzID0gT2JqZWN0LmtleXMoZXZlbnRzKS5tYXAoa2V5ID0+IGV2ZW50c1trZXldKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpYWdub3N0aWMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/Serializer.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/Serializer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_querystring_1 = __webpack_require__(/*! node:querystring */ \"node:querystring\");\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst secure_json_parse_1 = tslib_1.__importDefault(__webpack_require__(/*! secure-json-parse */ \"(rsc)/./node_modules/secure-json-parse/index.js\"));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\nconst debug = (0, debug_1.default)('elasticsearch');\nclass Serializer {\n    constructor(opts = {}) {\n        var _b;\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const enabled = (_b = opts.enablePrototypePoisoningProtection) !== null && _b !== void 0 ? _b : false;\n        this[symbols_1.kJsonOptions] = {\n            protoAction: enabled === true || enabled === 'proto' ? 'error' : 'ignore',\n            constructorAction: enabled === true || enabled === 'constructor' ? 'error' : 'ignore'\n        };\n    }\n    /**\n     * Serializes a record into a JSON string\n     */\n    serialize(object) {\n        debug('Serializing', object);\n        let json;\n        try {\n            json = JSON.stringify(object);\n        }\n        catch (err) {\n            throw new errors_1.SerializationError(err.message, object);\n        }\n        return json;\n    }\n    /**\n     * Given a string, attempts to parse it from raw JSON into an object\n     */\n    deserialize(json) {\n        debug('Deserializing', json);\n        let object;\n        try {\n            // @ts-expect-error\n            object = secure_json_parse_1.default.parse(json, this[symbols_1.kJsonOptions]);\n        }\n        catch (err) {\n            throw new errors_1.DeserializationError(err.message, json);\n        }\n        return object;\n    }\n    /**\n     * Serializes an array of records into an ndjson string\n     */\n    ndserialize(array) {\n        debug('ndserialize', array);\n        if (!Array.isArray(array)) {\n            throw new errors_1.SerializationError('The argument provided is not an array', array);\n        }\n        let ndjson = '';\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (typeof array[i] === 'string') {\n                ndjson += array[i] + '\\n'; // eslint-disable-line\n            }\n            else {\n                // @ts-expect-error\n                ndjson += this.serialize(array[i]) + '\\n'; // eslint-disable-line\n            }\n        }\n        return ndjson;\n    }\n    qserialize(object) {\n        debug('qserialize', object);\n        if (object == null)\n            return '';\n        if (typeof object === 'string')\n            return object;\n        // arrays should be serialized as comma separated list\n        const keys = Object.keys(object);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const key = keys[i];\n            // elasticsearch will complain for keys without a value\n            if (object[key] === undefined) {\n                delete object[key]; // eslint-disable-line\n            }\n            else if (Array.isArray(object[key])) {\n                object[key] = object[key].join(',');\n            }\n        }\n        return (0, node_querystring_1.stringify)(object);\n    }\n}\n_a = symbols_1.kJsonOptions;\nexports[\"default\"] = Serializer;\n//# sourceMappingURL=Serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9TZXJpYWxpemVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQiwyQkFBMkIsbUJBQU8sQ0FBQywwQ0FBa0I7QUFDckQsd0NBQXdDLG1CQUFPLENBQUMsc0RBQU87QUFDdkQsb0RBQW9ELG1CQUFPLENBQUMsMEVBQW1CO0FBQy9FLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFVO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUztBQUNyRDtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy90cmFuc3BvcnQvbGliL1NlcmlhbGl6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBub2RlX3F1ZXJ5c3RyaW5nXzEgPSByZXF1aXJlKFwibm9kZTpxdWVyeXN0cmluZ1wiKTtcbmNvbnN0IGRlYnVnXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3Qgc2VjdXJlX2pzb25fcGFyc2VfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJzZWN1cmUtanNvbi1wYXJzZVwiKSk7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IHN5bWJvbHNfMSA9IHJlcXVpcmUoXCIuL3N5bWJvbHNcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdlbGFzdGljc2VhcmNoJyk7XG5jbGFzcyBTZXJpYWxpemVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgdmFyIF9iO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2EsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuYWJsZWQgPSAoX2IgPSBvcHRzLmVuYWJsZVByb3RvdHlwZVBvaXNvbmluZ1Byb3RlY3Rpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICB0aGlzW3N5bWJvbHNfMS5rSnNvbk9wdGlvbnNdID0ge1xuICAgICAgICAgICAgcHJvdG9BY3Rpb246IGVuYWJsZWQgPT09IHRydWUgfHwgZW5hYmxlZCA9PT0gJ3Byb3RvJyA/ICdlcnJvcicgOiAnaWdub3JlJyxcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yQWN0aW9uOiBlbmFibGVkID09PSB0cnVlIHx8IGVuYWJsZWQgPT09ICdjb25zdHJ1Y3RvcicgPyAnZXJyb3InIDogJ2lnbm9yZSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBhIHJlY29yZCBpbnRvIGEgSlNPTiBzdHJpbmdcbiAgICAgKi9cbiAgICBzZXJpYWxpemUob2JqZWN0KSB7XG4gICAgICAgIGRlYnVnKCdTZXJpYWxpemluZycsIG9iamVjdCk7XG4gICAgICAgIGxldCBqc29uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlNlcmlhbGl6YXRpb25FcnJvcihlcnIubWVzc2FnZSwgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBzdHJpbmcsIGF0dGVtcHRzIHRvIHBhcnNlIGl0IGZyb20gcmF3IEpTT04gaW50byBhbiBvYmplY3RcbiAgICAgKi9cbiAgICBkZXNlcmlhbGl6ZShqc29uKSB7XG4gICAgICAgIGRlYnVnKCdEZXNlcmlhbGl6aW5nJywganNvbik7XG4gICAgICAgIGxldCBvYmplY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBvYmplY3QgPSBzZWN1cmVfanNvbl9wYXJzZV8xLmRlZmF1bHQucGFyc2UoanNvbiwgdGhpc1tzeW1ib2xzXzEua0pzb25PcHRpb25zXSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkRlc2VyaWFsaXphdGlvbkVycm9yKGVyci5tZXNzYWdlLCBqc29uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVzIGFuIGFycmF5IG9mIHJlY29yZHMgaW50byBhbiBuZGpzb24gc3RyaW5nXG4gICAgICovXG4gICAgbmRzZXJpYWxpemUoYXJyYXkpIHtcbiAgICAgICAgZGVidWcoJ25kc2VyaWFsaXplJywgYXJyYXkpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuU2VyaWFsaXphdGlvbkVycm9yKCdUaGUgYXJndW1lbnQgcHJvdmlkZWQgaXMgbm90IGFuIGFycmF5JywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZGpzb24gPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFycmF5W2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG5kanNvbiArPSBhcnJheVtpXSArICdcXG4nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgICAgbmRqc29uICs9IHRoaXMuc2VyaWFsaXplKGFycmF5W2ldKSArICdcXG4nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5kanNvbjtcbiAgICB9XG4gICAgcXNlcmlhbGl6ZShvYmplY3QpIHtcbiAgICAgICAgZGVidWcoJ3FzZXJpYWxpemUnLCBvYmplY3QpO1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIC8vIGFycmF5cyBzaG91bGQgYmUgc2VyaWFsaXplZCBhcyBjb21tYSBzZXBhcmF0ZWQgbGlzdFxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAvLyBlbGFzdGljc2VhcmNoIHdpbGwgY29tcGxhaW4gZm9yIGtleXMgd2l0aG91dCBhIHZhbHVlXG4gICAgICAgICAgICBpZiAob2JqZWN0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IG9iamVjdFtrZXldLmpvaW4oJywnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIG5vZGVfcXVlcnlzdHJpbmdfMS5zdHJpbmdpZnkpKG9iamVjdCk7XG4gICAgfVxufVxuX2EgPSBzeW1ib2xzXzEua0pzb25PcHRpb25zO1xuZXhwb3J0cy5kZWZhdWx0ID0gU2VyaWFsaXplcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlcmlhbGl6ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/Serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/Transport.js":
/*!**********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/Transport.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateRequestId = generateRequestId;\nexports.lowerCaseHeaders = lowerCaseHeaders;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst node_os_1 = tslib_1.__importDefault(__webpack_require__(/*! node:os */ \"node:os\"));\nconst node_zlib_1 = tslib_1.__importDefault(__webpack_require__(/*! node:zlib */ \"node:zlib\"));\nconst node_buffer_1 = tslib_1.__importDefault(__webpack_require__(/*! node:buffer */ \"node:buffer\"));\nconst node_util_1 = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_process_1 = tslib_1.__importDefault(__webpack_require__(/*! node:process */ \"node:process\"));\nconst ms_1 = tslib_1.__importDefault(__webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\"));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst BaseConnection_1 = __webpack_require__(/*! ./connection/BaseConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\");\nconst Diagnostic_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Diagnostic */ \"(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js\"));\nconst Serializer_1 = tslib_1.__importDefault(__webpack_require__(/*! ./Serializer */ \"(rsc)/./node_modules/@elastic/transport/lib/Serializer.js\"));\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\nconst promises_1 = __webpack_require__(/*! node:timers/promises */ \"node:timers/promises\");\nconst api_1 = tslib_1.__importStar(__webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\"));\nconst { version: clientVersion } = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@elastic/transport/package.json\"); // eslint-disable-line\nconst debug = (0, debug_1.default)('elasticsearch');\nconst gzip = (0, node_util_1.promisify)(node_zlib_1.default.gzip);\nconst unzip = (0, node_util_1.promisify)(node_zlib_1.default.unzip);\nconst { createGzip } = node_zlib_1.default;\nconst userAgent = `elastic-transport-js/${clientVersion} (${node_os_1.default.platform()} ${node_os_1.default.release()}-${node_os_1.default.arch()}; Node.js ${node_process_1.default.version})`; // eslint-disable-line\nclass Transport {\n    constructor(opts) {\n        var _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _b, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _c, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _d, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _e, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _f, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _g, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _h, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _j, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _k, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _l, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _m, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _o, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _p, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _q, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _r, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _s, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _t, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _u, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _v, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _w, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _x, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _y, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _z, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _0, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _1, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _2, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _3, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _4, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (opts.connectionPool == null) {\n            throw new errors_1.ConfigurationError('The Connection Pool option is not defined');\n        }\n        if (typeof opts.maxRetries === 'number' && opts.maxRetries < 0 && Number.isInteger(opts.maxRetries)) {\n            throw new errors_1.ConfigurationError('The maxRetries option must be a positive integer or zero');\n        }\n        if (opts.sniffInterval === true ||\n            (typeof opts.sniffInterval === 'number' && opts.sniffInterval < 0 && Number.isInteger(opts.sniffInterval))) {\n            throw new errors_1.ConfigurationError('The sniffInterval option must be false or a positive integer');\n        }\n        if (opts.maxResponseSize != null && opts.maxResponseSize > node_buffer_1.default.constants.MAX_STRING_LENGTH) {\n            throw new errors_1.ConfigurationError(`The maxResponseSize cannot be bigger than ${node_buffer_1.default.constants.MAX_STRING_LENGTH}`);\n        }\n        if (opts.maxCompressedResponseSize != null && opts.maxCompressedResponseSize > node_buffer_1.default.constants.MAX_LENGTH) {\n            throw new errors_1.ConfigurationError(`The maxCompressedResponseSize cannot be bigger than ${node_buffer_1.default.constants.MAX_LENGTH}`);\n        }\n        this[symbols_1.kNodeFilter] = (_5 = opts.nodeFilter) !== null && _5 !== void 0 ? _5 : defaultNodeFilter;\n        this[symbols_1.kNodeSelector] = (_6 = opts.nodeSelector) !== null && _6 !== void 0 ? _6 : roundRobinSelector();\n        this[symbols_1.kHeaders] = Object.assign({}, { 'user-agent': userAgent }, opts.compression === true ? { 'accept-encoding': 'gzip,deflate' } : null, lowerCaseHeaders(opts.headers));\n        this[symbols_1.kDiagnostic] = (_7 = opts.diagnostic) !== null && _7 !== void 0 ? _7 : new Diagnostic_1.default();\n        this[symbols_1.kConnectionPool] = opts.connectionPool;\n        this[symbols_1.kSerializer] = (_8 = opts.serializer) !== null && _8 !== void 0 ? _8 : new Serializer_1.default();\n        this[symbols_1.kContext] = (_9 = opts.context) !== null && _9 !== void 0 ? _9 : null;\n        this[symbols_1.kGenerateRequestId] = (_10 = opts.generateRequestId) !== null && _10 !== void 0 ? _10 : generateRequestId();\n        this[symbols_1.kOpaqueIdPrefix] = (_11 = opts.opaqueIdPrefix) !== null && _11 !== void 0 ? _11 : null;\n        this[symbols_1.kName] = (_12 = opts.name) !== null && _12 !== void 0 ? _12 : 'elastic-transport-js';\n        this[symbols_1.kMaxRetries] = typeof opts.maxRetries === 'number' ? opts.maxRetries : 3;\n        this[symbols_1.kCompression] = opts.compression === true;\n        this[symbols_1.kRequestTimeout] = opts.requestTimeout != null ? toMs(opts.requestTimeout) : 30000;\n        this[symbols_1.kRetryOnTimeout] = opts.retryOnTimeout != null ? opts.retryOnTimeout : false;\n        this[symbols_1.kSniffInterval] = (_13 = opts.sniffInterval) !== null && _13 !== void 0 ? _13 : false;\n        this[symbols_1.kSniffEnabled] = typeof this[symbols_1.kSniffInterval] === 'number';\n        this[symbols_1.kNextSniff] = this[symbols_1.kSniffEnabled] ? (Date.now() + this[symbols_1.kSniffInterval]) : 0;\n        this[symbols_1.kIsSniffing] = false;\n        this[symbols_1.kSniffOnConnectionFault] = (_14 = opts.sniffOnConnectionFault) !== null && _14 !== void 0 ? _14 : false;\n        this[symbols_1.kSniffEndpoint] = (_15 = opts.sniffEndpoint) !== null && _15 !== void 0 ? _15 : null;\n        this[symbols_1.kProductCheck] = (_16 = opts.productCheck) !== null && _16 !== void 0 ? _16 : null;\n        this[symbols_1.kMaxResponseSize] = (_17 = opts.maxResponseSize) !== null && _17 !== void 0 ? _17 : node_buffer_1.default.constants.MAX_STRING_LENGTH;\n        this[symbols_1.kMaxCompressedResponseSize] = (_18 = opts.maxCompressedResponseSize) !== null && _18 !== void 0 ? _18 : node_buffer_1.default.constants.MAX_LENGTH;\n        this[symbols_1.kJsonContentType] = (_20 = (_19 = opts.vendoredHeaders) === null || _19 === void 0 ? void 0 : _19.jsonContentType) !== null && _20 !== void 0 ? _20 : 'application/json';\n        this[symbols_1.kNdjsonContentType] = (_22 = (_21 = opts.vendoredHeaders) === null || _21 === void 0 ? void 0 : _21.ndjsonContentType) !== null && _22 !== void 0 ? _22 : 'application/x-ndjson';\n        this[symbols_1.kAcceptHeader] = (_24 = (_23 = opts.vendoredHeaders) === null || _23 === void 0 ? void 0 : _23.accept) !== null && _24 !== void 0 ? _24 : 'application/json, text/plain';\n        this[symbols_1.kRedaction] = (_25 = opts.redaction) !== null && _25 !== void 0 ? _25 : { type: 'replace', additionalKeys: [] };\n        this[symbols_1.kRetryBackoff] = (_26 = opts.retryBackoff) !== null && _26 !== void 0 ? _26 : retryBackoff;\n        this[symbols_1.kOtelTracer] = api_1.default.trace.getTracer('@elastic/transport', clientVersion);\n        if (opts.sniffOnStart === true) {\n            this.sniff({\n                reason: Transport.sniffReasons.SNIFF_ON_START,\n                requestId: this[symbols_1.kGenerateRequestId]({ method: 'GET', path: this[symbols_1.kSniffEndpoint] }, { context: this[symbols_1.kContext] }),\n                context: this[symbols_1.kContext]\n            });\n        }\n    }\n    get connectionPool() {\n        return this[symbols_1.kConnectionPool];\n    }\n    get sniffEnabled() {\n        return this[symbols_1.kSniffEnabled];\n    }\n    get nextSniff() {\n        return this[symbols_1.kNextSniff];\n    }\n    get sniffEndpoint() {\n        return this[symbols_1.kSniffEndpoint];\n    }\n    get isSniffing() {\n        return this[symbols_1.kIsSniffing];\n    }\n    set isSniffing(val) {\n        if (typeof val !== 'boolean') {\n            throw new errors_1.ConfigurationError(`isSniffing must be a boolean, instead got ${typeof val}`);\n        }\n        this[symbols_1.kIsSniffing] = val;\n    }\n    get diagnostic() {\n        return this[symbols_1.kDiagnostic];\n    }\n    async _request(params, options = {}, otelSpan) {\n        var _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21;\n        const connectionParams = {\n            method: params.method,\n            path: params.path\n        };\n        const meta = {\n            context: null,\n            request: {\n                params: connectionParams,\n                options,\n                id: (_5 = options.id) !== null && _5 !== void 0 ? _5 : this[symbols_1.kGenerateRequestId](params, options)\n            },\n            name: this[symbols_1.kName],\n            connection: null,\n            attempts: 0,\n            aborted: false\n        };\n        const returnMeta = (_6 = options.meta) !== null && _6 !== void 0 ? _6 : false;\n        if (this[symbols_1.kContext] != null && options.context != null) {\n            meta.context = Object.assign({}, this[symbols_1.kContext], options.context);\n        }\n        else if (this[symbols_1.kContext] !== null) {\n            meta.context = this[symbols_1.kContext];\n        }\n        else if (options.context != null) {\n            meta.context = options.context;\n        }\n        const result = {\n            // the default body value can't be `null`\n            // as it's a valid JSON value\n            body: undefined,\n            statusCode: 0,\n            headers: {},\n            meta,\n            get warnings() {\n                var _5;\n                if (((_5 = this.headers) === null || _5 === void 0 ? void 0 : _5.warning) == null) {\n                    return null;\n                }\n                const { warning } = this.headers;\n                // if multiple HTTP headers have the same name, Undici represents them as an array\n                const warnings = Array.isArray(warning) ? warning : [warning];\n                return warnings\n                    .flatMap(w => w.split(/(?!\\B\"[^\"]*),(?![^\"]*\"\\B)/))\n                    .filter((warning) => warning.match(/^\\d\\d\\d Elasticsearch-/));\n            }\n        };\n        // We should not retry if we are sending a stream body, because we should store in memory\n        // a copy of the stream to be able to send it again, but since we don't know in advance\n        // the size of the stream, we risk to take too much memory.\n        // Furthermore, copying every time the stream is very a expensive operation.\n        const maxRetries = isStream((_7 = params.body) !== null && _7 !== void 0 ? _7 : params.bulkBody) ? 0 : (typeof options.maxRetries === 'number' ? options.maxRetries : this[symbols_1.kMaxRetries]);\n        const compression = typeof options.compression === 'boolean' ? options.compression : this[symbols_1.kCompression];\n        const signal = options.signal;\n        const maxResponseSize = (_8 = options.maxResponseSize) !== null && _8 !== void 0 ? _8 : this[symbols_1.kMaxResponseSize];\n        const maxCompressedResponseSize = (_9 = options.maxCompressedResponseSize) !== null && _9 !== void 0 ? _9 : this[symbols_1.kMaxCompressedResponseSize];\n        const errorOptions = {\n            redaction: typeof options.redaction === 'object' ? options.redaction : this[symbols_1.kRedaction]\n        };\n        this[symbols_1.kDiagnostic].emit('serialization', null, result);\n        const headers = Object.assign({}, this[symbols_1.kHeaders], lowerCaseHeaders(options.headers));\n        if (options.opaqueId !== undefined) {\n            headers['x-opaque-id'] = typeof this[symbols_1.kOpaqueIdPrefix] === 'string'\n                ? this[symbols_1.kOpaqueIdPrefix] + options.opaqueId // eslint-disable-line\n                : options.opaqueId;\n        }\n        // handle json body\n        if (params.body != null) {\n            if (shouldSerialize(params.body)) {\n                try {\n                    connectionParams.body = this[symbols_1.kSerializer].serialize(params.body);\n                }\n                catch (err) {\n                    this[symbols_1.kDiagnostic].emit('request', err, result);\n                    throw err;\n                }\n                headers['content-type'] = (_10 = headers['content-type']) !== null && _10 !== void 0 ? _10 : this[symbols_1.kJsonContentType];\n                headers.accept = (_11 = headers.accept) !== null && _11 !== void 0 ? _11 : this[symbols_1.kJsonContentType];\n            }\n            else {\n                if (params.body !== '') {\n                    headers['content-type'] = (_12 = headers['content-type']) !== null && _12 !== void 0 ? _12 : 'text/plain';\n                    headers.accept = (_13 = headers.accept) !== null && _13 !== void 0 ? _13 : this[symbols_1.kAcceptHeader];\n                }\n                connectionParams.body = params.body;\n            }\n            // handle ndjson body\n        }\n        else if (params.bulkBody != null) {\n            if (shouldSerialize(params.bulkBody)) {\n                try {\n                    connectionParams.body = this[symbols_1.kSerializer].ndserialize(params.bulkBody);\n                }\n                catch (err) {\n                    this[symbols_1.kDiagnostic].emit('request', err, result);\n                    throw err;\n                }\n            }\n            else {\n                connectionParams.body = params.bulkBody;\n            }\n            if (connectionParams.body !== '') {\n                headers['content-type'] = (_14 = headers['content-type']) !== null && _14 !== void 0 ? _14 : this[symbols_1.kNdjsonContentType];\n                headers.accept = (_15 = headers.accept) !== null && _15 !== void 0 ? _15 : this[symbols_1.kJsonContentType];\n            }\n        }\n        // serializes the querystring\n        if (options.querystring == null) {\n            connectionParams.querystring = this[symbols_1.kSerializer].qserialize(params.querystring);\n        }\n        else {\n            connectionParams.querystring = this[symbols_1.kSerializer].qserialize(Object.assign({}, params.querystring, options.querystring));\n        }\n        // handle compression\n        if (connectionParams.body !== '' && connectionParams.body != null) {\n            if (isStream(connectionParams.body)) {\n                if (compression) {\n                    headers['content-encoding'] = 'gzip';\n                    connectionParams.body = connectionParams.body.pipe(createGzip());\n                }\n            }\n            else if (compression) {\n                try {\n                    connectionParams.body = await gzip(connectionParams.body);\n                }\n                catch (err) {\n                    /* istanbul ignore next */\n                    this[symbols_1.kDiagnostic].emit('request', err, result);\n                    /* istanbul ignore next */\n                    throw err;\n                }\n                headers['content-encoding'] = 'gzip';\n                headers['content-length'] = '' + Buffer.byteLength(connectionParams.body); // eslint-disable-line\n            }\n            else {\n                headers['content-length'] = '' + Buffer.byteLength(connectionParams.body); // eslint-disable-line\n            }\n        }\n        headers.accept = (_16 = headers.accept) !== null && _16 !== void 0 ? _16 : this[symbols_1.kAcceptHeader];\n        connectionParams.headers = headers;\n        while (meta.attempts <= maxRetries) {\n            try {\n                if (signal === null || signal === void 0 ? void 0 : signal.aborted) { // eslint-disable-line\n                    throw new errors_1.RequestAbortedError('Request has been aborted by the user', result, errorOptions);\n                }\n                meta.connection = this.getConnection({\n                    requestId: meta.request.id,\n                    context: meta.context\n                });\n                if (meta.connection === null) {\n                    throw new errors_1.NoLivingConnectionsError('There are no living connections', result, errorOptions);\n                }\n                // generate required OpenTelemetry attributes from the request URL\n                const requestUrl = meta.connection.url;\n                otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttributes({\n                    'url.full': requestUrl.toString(),\n                    'server.address': requestUrl.hostname\n                });\n                if (requestUrl.port === '') {\n                    if (requestUrl.protocol === 'https:') {\n                        otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttribute('server.port', 443);\n                    }\n                    else if (requestUrl.protocol === 'http:') {\n                        otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttribute('server.port', 80);\n                    }\n                }\n                else if (requestUrl.port !== '9200') {\n                    otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttribute('server.port', parseInt(requestUrl.port, 10));\n                }\n                this[symbols_1.kDiagnostic].emit('request', null, result);\n                // perform the actual http request\n                let { statusCode, headers, body } = await meta.connection.request(connectionParams, {\n                    requestId: meta.request.id,\n                    name: this[symbols_1.kName],\n                    context: meta.context,\n                    maxResponseSize,\n                    maxCompressedResponseSize,\n                    signal,\n                    timeout: toMs(options.requestTimeout != null ? options.requestTimeout : this[symbols_1.kRequestTimeout]),\n                    ...(options.asStream === true ? { asStream: true } : null)\n                });\n                result.statusCode = statusCode;\n                result.headers = headers;\n                if (headers['x-found-handling-cluster'] != null) {\n                    otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttribute('db.elasticsearch.cluster.name', headers['x-found-handling-cluster']);\n                }\n                if (headers['x-found-handling-instance'] != null) {\n                    otelSpan === null || otelSpan === void 0 ? void 0 : otelSpan.setAttribute('db.elasticsearch.node.name', headers['x-found-handling-instance']);\n                }\n                if (this[symbols_1.kProductCheck] != null && headers['x-elastic-product'] !== this[symbols_1.kProductCheck] && statusCode >= 200 && statusCode < 300) {\n                    /* eslint-disable @typescript-eslint/prefer-ts-expect-error */\n                    // @ts-ignore\n                    throw new errors_1.ProductNotSupportedError(this[symbols_1.kProductCheck], result, errorOptions);\n                    /* eslint-enable @typescript-eslint/prefer-ts-expect-error */\n                }\n                if (options.asStream === true) {\n                    result.body = body;\n                    this[symbols_1.kDiagnostic].emit('response', null, result);\n                    return returnMeta ? result : body;\n                }\n                const contentEncoding = ((_17 = headers['content-encoding']) !== null && _17 !== void 0 ? _17 : '').toLowerCase();\n                if (contentEncoding.includes('gzip') || contentEncoding.includes('deflate')) {\n                    body = await unzip(body);\n                }\n                if (Buffer.isBuffer(body) && !(0, BaseConnection_1.isBinary)((_18 = headers['content-type']) !== null && _18 !== void 0 ? _18 : '')) {\n                    body = body.toString();\n                }\n                const isHead = params.method === 'HEAD';\n                // we should attempt the payload deserialization only if:\n                //    - a `content-type` is defined and is equal to `application/json`\n                //    - the request is not a HEAD request\n                //    - the payload is not an empty string\n                if (headers['content-type'] !== undefined &&\n                    (((_19 = headers['content-type']) === null || _19 === void 0 ? void 0 : _19.includes('application/json')) ||\n                        ((_20 = headers['content-type']) === null || _20 === void 0 ? void 0 : _20.includes('application/vnd.elasticsearch+json'))) &&\n                    !isHead && body !== '') { // eslint-disable-line\n                    result.body = this[symbols_1.kSerializer].deserialize(body);\n                }\n                else {\n                    // cast to boolean if the request method was HEAD and there was no error\n                    result.body = isHead && statusCode < 400 ? true : body;\n                }\n                // we should ignore the statusCode if the user has configured the `ignore` field with\n                // the statusCode we just got or if the request method is HEAD and the statusCode is 404\n                const ignoreStatusCode = (Array.isArray(options.ignore) && options.ignore.includes(statusCode)) ||\n                    (isHead && statusCode === 404);\n                if (!ignoreStatusCode && (statusCode === 502 || statusCode === 503 || statusCode === 504)) {\n                    // if the statusCode is 502/3/4 we should run our retry strategy\n                    // and mark the connection as dead\n                    this[symbols_1.kConnectionPool].markDead(meta.connection);\n                    // retry logic\n                    if (meta.attempts < maxRetries) {\n                        meta.attempts++;\n                        debug(`Retrying request, there are still ${maxRetries - meta.attempts} attempts`, params);\n                        continue;\n                    }\n                }\n                else {\n                    // everything has worked as expected, let's mark\n                    // the connection as alive (or confirm it)\n                    this[symbols_1.kConnectionPool].markAlive(meta.connection);\n                }\n                if (!ignoreStatusCode && statusCode >= 400) {\n                    throw new errors_1.ResponseError(result, errorOptions);\n                }\n                else {\n                    // cast to boolean if the request method was HEAD\n                    if (isHead && statusCode === 404) {\n                        result.body = false;\n                    }\n                    this[symbols_1.kDiagnostic].emit('response', null, result);\n                    return returnMeta ? result : result.body;\n                }\n            }\n            catch (error) {\n                switch (error.name) {\n                    // should not retry\n                    case 'ProductNotSupportedError':\n                    case 'NoLivingConnectionsError':\n                    case 'DeserializationError':\n                    case 'ResponseError':\n                        this[symbols_1.kDiagnostic].emit('response', error, result);\n                        throw error;\n                    case 'RequestAbortedError': {\n                        meta.aborted = true;\n                        // Wrap the error to get a clean stack trace\n                        const wrappedError = new errors_1.RequestAbortedError(error.message, result, errorOptions);\n                        this[symbols_1.kDiagnostic].emit('response', wrappedError, result);\n                        throw wrappedError;\n                    }\n                    // should maybe retry\n                    // @ts-expect-error `case` fallthrough is intentional: should retry if retryOnTimeout is true\n                    case 'TimeoutError':\n                        if (!this[symbols_1.kRetryOnTimeout]) {\n                            const wrappedError = new errors_1.TimeoutError(error.message, result, errorOptions);\n                            this[symbols_1.kDiagnostic].emit('response', wrappedError, result);\n                            throw wrappedError;\n                        }\n                    // should retry\n                    // eslint-disable-next-line no-fallthrough\n                    case 'ConnectionError': {\n                        // if there is an error in the connection\n                        // let's mark the connection as dead\n                        this[symbols_1.kConnectionPool].markDead(meta.connection);\n                        if (this[symbols_1.kSniffOnConnectionFault]) {\n                            this.sniff({\n                                reason: Transport.sniffReasons.SNIFF_ON_CONNECTION_FAULT,\n                                requestId: meta.request.id,\n                                context: meta.context\n                            });\n                        }\n                        // retry logic\n                        if (meta.attempts < maxRetries) {\n                            meta.attempts++;\n                            debug(`Retrying request, there are still ${maxRetries - meta.attempts} attempts`, params);\n                            // don't use exponential backoff until retrying on each node\n                            if (meta.attempts >= this[symbols_1.kConnectionPool].size) {\n                                // exponential backoff on retries, with jitter\n                                const backoff = (_21 = options.retryBackoff) !== null && _21 !== void 0 ? _21 : this[symbols_1.kRetryBackoff];\n                                const backoffWait = backoff(0, 4, meta.attempts);\n                                if (backoffWait > 0) {\n                                    await (0, promises_1.setTimeout)(backoffWait * 1000);\n                                }\n                            }\n                            continue;\n                        }\n                        // Wrap the error to get a clean stack trace\n                        const wrappedError = error.name === 'TimeoutError'\n                            ? new errors_1.TimeoutError(error.message, result, errorOptions)\n                            : new errors_1.ConnectionError(error.message, result, errorOptions);\n                        this[symbols_1.kDiagnostic].emit('response', wrappedError, result);\n                        throw wrappedError;\n                    }\n                    // edge cases, such as bad compression\n                    default:\n                        this[symbols_1.kDiagnostic].emit('response', error, result);\n                        throw error;\n                }\n            }\n        }\n        return returnMeta ? result : result.body;\n    }\n    async request(params, options = {}) {\n        var _5, _6, _7;\n        // wrap in OpenTelemetry span\n        if (((_5 = params.meta) === null || _5 === void 0 ? void 0 : _5.name) != null) {\n            // gather OpenTelemetry attributes\n            const attributes = {\n                'db.system': 'elasticsearch',\n                'http.request.method': params.method,\n                'db.operation.name': (_6 = params.meta) === null || _6 === void 0 ? void 0 : _6.name\n            };\n            if (((_7 = params.meta) === null || _7 === void 0 ? void 0 : _7.pathParts) != null) {\n                for (const key of Object.keys(params.meta.pathParts)) {\n                    attributes[`db.elasticsearch.path_parts.${key}`] = params.meta.pathParts[key];\n                }\n            }\n            return await this[symbols_1.kOtelTracer].startActiveSpan(params.meta.name, { attributes, kind: api_1.SpanKind.CLIENT }, async (otelSpan) => {\n                var _5;\n                let response;\n                try {\n                    response = await this._request(params, options, otelSpan);\n                }\n                catch (err) {\n                    otelSpan.recordException(err);\n                    otelSpan.setStatus({ code: api_1.SpanStatusCode.ERROR });\n                    otelSpan.setAttribute('error.type', (_5 = err.name) !== null && _5 !== void 0 ? _5 : 'Error');\n                    throw err;\n                }\n                finally {\n                    otelSpan.end();\n                }\n                return response;\n            });\n        }\n        else {\n            return await this._request(params, options);\n        }\n    }\n    getConnection(opts) {\n        const now = Date.now();\n        if (this[symbols_1.kSniffEnabled] && now > this[symbols_1.kNextSniff]) {\n            this[symbols_1.kNextSniff] = now + this[symbols_1.kSniffInterval];\n            this.sniff({\n                reason: Transport.sniffReasons.SNIFF_INTERVAL,\n                requestId: opts.requestId,\n                context: opts.context\n            });\n        }\n        return this[symbols_1.kConnectionPool].getConnection({\n            filter: this[symbols_1.kNodeFilter],\n            selector: this[symbols_1.kNodeSelector],\n            requestId: opts.requestId,\n            name: this[symbols_1.kName],\n            context: opts.context,\n            now\n        });\n    }\n    /* istanbul ignore next */\n    sniff(opts) { }\n}\n_a = symbols_1.kNodeFilter, _b = symbols_1.kNodeSelector, _c = symbols_1.kHeaders, _d = symbols_1.kDiagnostic, _e = symbols_1.kConnectionPool, _f = symbols_1.kSerializer, _g = symbols_1.kContext, _h = symbols_1.kGenerateRequestId, _j = symbols_1.kOpaqueIdPrefix, _k = symbols_1.kName, _l = symbols_1.kMaxRetries, _m = symbols_1.kCompression, _o = symbols_1.kRequestTimeout, _p = symbols_1.kRetryOnTimeout, _q = symbols_1.kSniffEnabled, _r = symbols_1.kNextSniff, _s = symbols_1.kIsSniffing, _t = symbols_1.kSniffInterval, _u = symbols_1.kSniffOnConnectionFault, _v = symbols_1.kSniffEndpoint, _w = symbols_1.kProductCheck, _x = symbols_1.kMaxResponseSize, _y = symbols_1.kMaxCompressedResponseSize, _z = symbols_1.kJsonContentType, _0 = symbols_1.kNdjsonContentType, _1 = symbols_1.kAcceptHeader, _2 = symbols_1.kRedaction, _3 = symbols_1.kRetryBackoff, _4 = symbols_1.kOtelTracer;\nObject.defineProperty(Transport, \"sniffReasons\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n        SNIFF_ON_START: 'sniff-on-start',\n        SNIFF_INTERVAL: 'sniff-interval',\n        SNIFF_ON_CONNECTION_FAULT: 'sniff-on-connection-fault',\n        DEFAULT: 'default'\n    }\n});\nexports[\"default\"] = Transport;\nfunction toMs(time) {\n    if (typeof time === 'string') {\n        return (0, ms_1.default)(time);\n    }\n    return time;\n}\nfunction shouldSerialize(obj) {\n    return typeof obj !== 'string' &&\n        typeof obj.pipe !== 'function' &&\n        !Buffer.isBuffer(obj);\n}\nfunction isStream(obj) {\n    return obj != null && typeof obj.pipe === 'function';\n}\nfunction defaultNodeFilter(node) {\n    return true;\n}\nfunction roundRobinSelector() {\n    let current = -1;\n    return function _roundRobinSelector(connections) {\n        if (++current >= connections.length) {\n            current = 0;\n        }\n        return connections[current];\n    };\n}\nfunction generateRequestId() {\n    const maxInt = 2147483647;\n    let nextReqId = 0;\n    return function genReqId(params, options) {\n        return (nextReqId = (nextReqId + 1) & maxInt);\n    };\n}\nfunction lowerCaseHeaders(oldHeaders) {\n    if (oldHeaders == null)\n        return null;\n    const newHeaders = {};\n    for (const header in oldHeaders) {\n        // @ts-expect-error\n        newHeaders[header.toLowerCase()] = oldHeaders[header];\n    }\n    return newHeaders;\n}\n/**\n * Function for calculating how long to sleep, in seconds, before the next request retry\n * Uses the AWS \"equal jitter\" algorithm noted in this post:\n * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/\n * @param min The minimum number of seconds to wait\n * @param max The maximum number of seconds to wait\n * @param attempt How many retry attempts have been made\n * @returns The number of seconds to wait before the next retry\n */\nfunction retryBackoff(min, max, attempt) {\n    const ceiling = Math.min(max, 2 ** attempt) / 2;\n    return ceiling + ((Math.random() * (ceiling - min)) + min);\n}\n//# sourceMappingURL=Transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/Transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/connection/BaseConnection.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.prepareHeaders = prepareHeaders;\nexports.getIssuerCertificate = getIssuerCertificate;\nexports.isCaFingerprintMatch = isCaFingerprintMatch;\nexports.isBinary = isBinary;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_util_1 = __webpack_require__(/*! node:util */ \"node:util\");\nconst Diagnostic_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Diagnostic */ \"(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js\"));\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\n/**\n * An HTTP connection to a single Elasticsearch node.\n */\nclass BaseConnection {\n    constructor(opts) {\n        var _d, _e, _f, _g, _h, _j, _k;\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"deadCount\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resurrectTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_openRequests\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"weight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxEventListeners\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _b, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _c, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.url = opts.url;\n        this.tls = (_d = opts.tls) !== null && _d !== void 0 ? _d : null;\n        this.id = (_e = opts.id) !== null && _e !== void 0 ? _e : stripAuth(opts.url.href);\n        this.headers = prepareHeaders(opts.headers, opts.auth);\n        this.timeout = (_f = opts.timeout) !== null && _f !== void 0 ? _f : 30000;\n        this.deadCount = 0;\n        this.resurrectTimeout = 0;\n        this.weight = 0;\n        this._openRequests = 0;\n        this.maxEventListeners = (_g = opts.maxEventListeners) !== null && _g !== void 0 ? _g : 100;\n        this[symbols_1.kStatus] = (_h = opts.status) !== null && _h !== void 0 ? _h : BaseConnection.statuses.ALIVE;\n        this[symbols_1.kDiagnostic] = (_j = opts.diagnostic) !== null && _j !== void 0 ? _j : new Diagnostic_1.default();\n        this[symbols_1.kCaFingerprint] = (_k = opts.caFingerprint) !== null && _k !== void 0 ? _k : null;\n        if (!['http:', 'https:'].includes(this.url.protocol)) {\n            throw new errors_1.ConfigurationError(`Invalid protocol: '${this.url.protocol}'`);\n        }\n    }\n    get status() {\n        return this[symbols_1.kStatus];\n    }\n    set status(status) {\n        if (!validStatuses.includes(status)) {\n            throw new errors_1.ConfigurationError(`Unsupported status: '${status}'`);\n        }\n        this[symbols_1.kStatus] = status;\n    }\n    get diagnostic() {\n        return this[symbols_1.kDiagnostic];\n    }\n    async request(params, options) {\n        throw new errors_1.ConfigurationError('The request method should be implemented by extended classes');\n    }\n    /* istanbul ignore next */\n    async close() {\n        throw new errors_1.ConfigurationError('The close method should be implemented by extended classes');\n    }\n    // Handles console.log and utils.inspect invocations.\n    // We want to hide `auth`, `agent` and `tls` since they made\n    // the logs very hard to read. The user can still\n    // access them with `instance.agent` and `instance.tls`.\n    [(_a = symbols_1.kStatus, _b = symbols_1.kCaFingerprint, _c = symbols_1.kDiagnostic, node_util_1.inspect.custom)](depth, options) {\n        const { authorization, ...headers } = this.headers;\n        return {\n            url: stripAuth(this.url.toString()),\n            id: this.id,\n            headers,\n            status: this.status\n        };\n    }\n    toJSON() {\n        const { authorization, ...headers } = this.headers;\n        return {\n            url: stripAuth(this.url.toString()),\n            id: this.id,\n            headers,\n            status: this.status\n        };\n    }\n}\nObject.defineProperty(BaseConnection, \"statuses\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n        ALIVE: 'alive',\n        DEAD: 'dead'\n    }\n});\nexports[\"default\"] = BaseConnection;\nconst validStatuses = Object.keys(BaseConnection.statuses)\n    // @ts-expect-error\n    .map(k => BaseConnection.statuses[k]);\nfunction stripAuth(url) {\n    if (!url.includes('@'))\n        return url;\n    return url.slice(0, url.indexOf('//') + 2) + url.slice(url.indexOf('@') + 1);\n}\nfunction prepareHeaders(headers = {}, auth) {\n    if (auth != null && headers.authorization == null) {\n        /* istanbul ignore else */\n        if (isApiKeyAuth(auth)) {\n            if (typeof auth.apiKey === 'object') {\n                headers.authorization = 'ApiKey ' + Buffer.from(`${auth.apiKey.id}:${auth.apiKey.api_key}`).toString('base64');\n            }\n            else {\n                headers.authorization = `ApiKey ${auth.apiKey}`;\n            }\n        }\n        else if (isBearerAuth(auth)) {\n            headers.authorization = `Bearer ${auth.bearer}`;\n        }\n        else if (auth.username != null && auth.password != null) {\n            headers.authorization = 'Basic ' + Buffer.from(`${auth.username}:${auth.password}`).toString('base64');\n        }\n    }\n    return headers;\n}\nfunction isApiKeyAuth(auth) {\n    return auth.apiKey != null;\n}\nfunction isBearerAuth(auth) {\n    return auth.bearer != null;\n}\nfunction getIssuerCertificate(socket) {\n    let certificate = socket.getPeerCertificate(true);\n    while (certificate !== null && Object.keys(certificate).length > 0) {\n        // invalid certificate\n        if (certificate.issuerCertificate == null) {\n            return null;\n        }\n        // We have reached the root certificate.\n        // In case of self-signed certificates, `issuerCertificate` may be a circular reference.\n        if (certificate.fingerprint256 === certificate.issuerCertificate.fingerprint256) {\n            break;\n        }\n        // continue the loop\n        certificate = certificate.issuerCertificate;\n    }\n    return certificate;\n}\nfunction isCaFingerprintMatch(cert1, cert2) {\n    if (typeof cert1 === 'string' && typeof cert2 === 'string') {\n        const c1 = cert1.toLowerCase().replace(/:/g, '');\n        const c2 = cert2.toLowerCase().replace(/:/g, '');\n        return c1 === c2;\n    }\n    return cert1 === cert2;\n}\nfunction isBinary(contentType) {\n    const binaryTypes = [\n        'application/vnd.mapbox-vector-tile',\n        'application/vnd.apache.arrow.stream',\n        'application/vnd.elasticsearch+arrow+stream',\n        'application/smile',\n        'application/vnd.elasticsearch+smile',\n        'application/cbor',\n        'application/vnd.elasticsearch+cbor'\n    ];\n    return binaryTypes\n        .map(type => contentType.includes(type))\n        .includes(true);\n}\n//# sourceMappingURL=BaseConnection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/connection/HttpConnection.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/connection/HttpConnection.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nconst hpagent_1 = tslib_1.__importDefault(__webpack_require__(/*! hpagent */ \"(rsc)/./node_modules/hpagent/index.js\"));\nconst node_http_1 = tslib_1.__importDefault(__webpack_require__(/*! node:http */ \"node:http\"));\nconst node_https_1 = tslib_1.__importDefault(__webpack_require__(/*! node:https */ \"node:https\"));\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst node_buffer_1 = tslib_1.__importDefault(__webpack_require__(/*! node:buffer */ \"node:buffer\"));\nconst BaseConnection_1 = tslib_1.__importStar(__webpack_require__(/*! ./BaseConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\"));\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\nconst node_stream_1 = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst promises_1 = __webpack_require__(/*! node:timers/promises */ \"node:timers/promises\");\nconst debug = (0, debug_1.default)('elasticsearch');\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/;\nconst MAX_BUFFER_LENGTH = node_buffer_1.default.constants.MAX_LENGTH;\nconst MAX_STRING_LENGTH = node_buffer_1.default.constants.MAX_STRING_LENGTH;\nconst noop = () => { };\n/**\n * A connection to an Elasticsearch node, managed by the `http` client in the standard library\n */\nclass HttpConnection extends BaseConnection_1.default {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"agent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"makeRequest\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof opts.agent === 'function') {\n            this.agent = opts.agent(opts);\n        }\n        else if (typeof opts.agent === 'boolean') {\n            this.agent = undefined;\n        }\n        else {\n            if (opts.agent != null && !isHttpAgentOptions(opts.agent)) {\n                throw new errors_1.ConfigurationError('Bad agent configuration for Http agent');\n            }\n            const agentOptions = Object.assign({}, {\n                keepAlive: true,\n                keepAliveMsecs: 1000,\n                maxSockets: 256,\n                maxFreeSockets: 256,\n                scheduling: 'lifo'\n            }, opts.agent);\n            if (opts.proxy != null) {\n                const proxyAgentOptions = {\n                    ...agentOptions,\n                    proxy: opts.proxy\n                };\n                this.agent = this.url.protocol === 'http:'\n                    ? new hpagent_1.default.HttpProxyAgent(proxyAgentOptions)\n                    : new hpagent_1.default.HttpsProxyAgent(Object.assign({}, proxyAgentOptions, this.tls));\n            }\n            else {\n                this.agent = this.url.protocol === 'http:'\n                    ? new node_http_1.default.Agent(agentOptions)\n                    : new node_https_1.default.Agent(Object.assign({}, agentOptions, this.tls));\n            }\n        }\n        this.makeRequest = this.url.protocol === 'http:'\n            ? node_http_1.default.request\n            : node_https_1.default.request;\n    }\n    async request(params, options) {\n        return await new Promise((resolve, reject) => {\n            var _a, _b;\n            let cleanedListeners = false;\n            const maxResponseSize = (_a = options.maxResponseSize) !== null && _a !== void 0 ? _a : MAX_STRING_LENGTH;\n            const maxCompressedResponseSize = (_b = options.maxCompressedResponseSize) !== null && _b !== void 0 ? _b : MAX_BUFFER_LENGTH;\n            const requestParams = this.buildRequestObject(params, options);\n            // https://github.com/nodejs/node/commit/b961d9fd83\n            if (INVALID_PATH_REGEX.test(requestParams.path)) {\n                return reject(new TypeError(`ERR_UNESCAPED_CHARACTERS: ${requestParams.path}`));\n            }\n            debug('Starting a new request', params);\n            let request;\n            try {\n                request = this.makeRequest(requestParams);\n            }\n            catch (err) {\n                return reject(err);\n            }\n            const abortListener = () => {\n                request.destroy(new errors_1.RequestAbortedError('Request aborted'));\n            };\n            this._openRequests++;\n            if (options.signal != null) {\n                options.signal.addEventListener('abort', abortListener, { once: true });\n            }\n            const onResponse = (response) => {\n                var _a, _b;\n                cleanListeners();\n                request.on('error', noop); // There are some edge cases where the request emits an error while processing the response.\n                this._openRequests--;\n                if (options.asStream === true) {\n                    return resolve({\n                        body: response,\n                        statusCode: response.statusCode,\n                        headers: response.headers\n                    });\n                }\n                const contentEncoding = ((_a = response.headers['content-encoding']) !== null && _a !== void 0 ? _a : '').toLowerCase();\n                const isCompressed = contentEncoding.includes('gzip') || contentEncoding.includes('deflate');\n                const bodyIsBinary = (0, BaseConnection_1.isBinary)((_b = response.headers['content-type']) !== null && _b !== void 0 ? _b : '');\n                /* istanbul ignore else */\n                if (response.headers['content-length'] !== undefined) {\n                    const contentLength = Number(response.headers['content-length']);\n                    if (isCompressed && contentLength > maxCompressedResponseSize) {\n                        response.destroy();\n                        return reject(new errors_1.RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed buffer (${maxCompressedResponseSize})`));\n                    }\n                    else if (contentLength > maxResponseSize) {\n                        response.destroy();\n                        return reject(new errors_1.RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed string (${maxResponseSize})`));\n                    }\n                }\n                // if the response is compressed, we must handle it\n                // as buffer for allowing decompression later\n                let payload = isCompressed || bodyIsBinary ? new Array() : '';\n                const onData = isCompressed || bodyIsBinary ? onDataAsBuffer : onDataAsString;\n                let currentLength = 0;\n                function onDataAsBuffer(chunk) {\n                    currentLength += Buffer.byteLength(chunk);\n                    if (currentLength > maxCompressedResponseSize) {\n                        response.destroy(new errors_1.RequestAbortedError(`The content length (${currentLength}) is bigger than the maximum allowed buffer (${maxCompressedResponseSize})`));\n                    }\n                    else {\n                        payload.push(chunk);\n                    }\n                }\n                function onDataAsString(chunk) {\n                    currentLength += Buffer.byteLength(chunk);\n                    if (currentLength > maxResponseSize) {\n                        response.destroy(new errors_1.RequestAbortedError(`The content length (${currentLength}) is bigger than the maximum allowed string (${maxResponseSize})`));\n                    }\n                    else {\n                        payload = `${payload}${chunk}`;\n                    }\n                }\n                const onEnd = (err) => {\n                    response.removeListener('data', onData);\n                    response.removeListener('end', onEnd);\n                    response.removeListener('error', onEnd);\n                    request.removeListener('error', noop);\n                    if (err != null) {\n                        // @ts-expect-error\n                        if (err.message === 'aborted' && err.code === 'ECONNRESET') {\n                            response.destroy();\n                            return reject(new errors_1.ConnectionError('Response aborted while reading the body'));\n                        }\n                        if (err.name === 'RequestAbortedError') {\n                            return reject(err);\n                        }\n                        return reject(new errors_1.ConnectionError(err.message));\n                    }\n                    resolve({\n                        body: isCompressed || bodyIsBinary ? Buffer.concat(payload) : payload,\n                        statusCode: response.statusCode,\n                        headers: response.headers\n                    });\n                };\n                if (!isCompressed && !bodyIsBinary) {\n                    response.setEncoding('utf8');\n                }\n                this.diagnostic.emit('deserialization', null, options);\n                response.on('data', onData);\n                response.on('error', onEnd);\n                response.on('end', onEnd);\n            };\n            const onTimeout = () => {\n                cleanListeners();\n                this._openRequests--;\n                request.once('error', () => { }); // we need to catch the request aborted error\n                request.destroy();\n                reject(new errors_1.TimeoutError('Request timed out'));\n            };\n            const onError = (err) => {\n                var _a, _b, _c, _d, _e, _f, _g, _h;\n                cleanListeners();\n                this._openRequests--;\n                let message = err.message;\n                if (err.name === 'RequestAbortedError') {\n                    return reject(err);\n                }\n                // @ts-expect-error\n                if (err.code === 'ECONNRESET') {\n                    message += ` - Local: ${(_b = (_a = request.socket) === null || _a === void 0 ? void 0 : _a.localAddress) !== null && _b !== void 0 ? _b : 'unknown'}:${(_d = (_c = request.socket) === null || _c === void 0 ? void 0 : _c.localPort) !== null && _d !== void 0 ? _d : 'unknown'}, Remote: ${(_f = (_e = request.socket) === null || _e === void 0 ? void 0 : _e.remoteAddress) !== null && _f !== void 0 ? _f : 'unknown'}:${(_h = (_g = request.socket) === null || _g === void 0 ? void 0 : _g.remotePort) !== null && _h !== void 0 ? _h : 'unknown'}`;\n                }\n                reject(new errors_1.ConnectionError(message));\n            };\n            const onSocket = (socket) => {\n                /* istanbul ignore else */\n                if (!socket.isSessionReused()) {\n                    socket.once('secureConnect', () => {\n                        const issuerCertificate = (0, BaseConnection_1.getIssuerCertificate)(socket);\n                        /* istanbul ignore next */\n                        if (issuerCertificate == null) {\n                            onError(new Error('Invalid or malformed certificate'));\n                            request.once('error', () => { }); // we need to catch the request aborted error\n                            return request.destroy();\n                        }\n                        // Check if fingerprint matches\n                        /* istanbul ignore else */\n                        if (!(0, BaseConnection_1.isCaFingerprintMatch)(this[symbols_1.kCaFingerprint], issuerCertificate.fingerprint256)) {\n                            onError(new Error('Server certificate CA fingerprint does not match the value configured in caFingerprint'));\n                            request.once('error', () => { }); // we need to catch the request aborted error\n                            return request.destroy();\n                        }\n                    });\n                }\n            };\n            request.on('response', onResponse);\n            request.on('timeout', onTimeout);\n            request.on('error', onError);\n            if (this[symbols_1.kCaFingerprint] != null && requestParams.protocol === 'https:') {\n                request.on('socket', onSocket);\n            }\n            // Disables the Nagle algorithm\n            request.setNoDelay(true);\n            // starts the request\n            if (isStream(params.body)) {\n                (0, node_stream_1.pipeline)(params.body, request, err => {\n                    /* istanbul ignore if  */\n                    if (err != null && !cleanedListeners) {\n                        cleanListeners();\n                        this._openRequests--;\n                        reject(err);\n                    }\n                });\n            }\n            else {\n                request.end(params.body);\n            }\n            return request;\n            function cleanListeners() {\n                request.removeListener('response', onResponse);\n                request.removeListener('timeout', onTimeout);\n                request.removeListener('error', onError);\n                request.removeListener('socket', onSocket);\n                if (options.signal != null) {\n                    if ('removeEventListener' in options.signal) {\n                        options.signal.removeEventListener('abort', abortListener);\n                    }\n                    else {\n                        options.signal.removeListener('abort', abortListener);\n                    }\n                }\n                cleanedListeners = true;\n            }\n        });\n    }\n    async close() {\n        debug('Closing connection', this.id);\n        while (this._openRequests > 0) {\n            await (0, promises_1.setTimeout)(1000);\n        }\n        /* istanbul ignore else */\n        if (this.agent !== undefined) {\n            this.agent.destroy();\n        }\n    }\n    buildRequestObject(params, options) {\n        var _a;\n        const url = this.url;\n        let search = url.search;\n        let pathname = url.pathname;\n        const request = {\n            protocol: url.protocol,\n            hostname: url.hostname[0] === '['\n                ? url.hostname.slice(1, -1)\n                : url.hostname,\n            path: '',\n            // https://github.com/elastic/elasticsearch-js/issues/843\n            port: url.port !== '' ? url.port : undefined,\n            headers: this.headers,\n            agent: this.agent,\n            timeout: (_a = options.timeout) !== null && _a !== void 0 ? _a : this.timeout\n        };\n        const paramsKeys = Object.keys(params);\n        for (let i = 0, len = paramsKeys.length; i < len; i++) {\n            const key = paramsKeys[i];\n            if (key === 'path') {\n                pathname = resolve(pathname, params[key]);\n            }\n            else if (key === 'querystring' && Boolean(params[key])) {\n                if (search === '') {\n                    search = `?${params[key]}`;\n                }\n                else {\n                    search += `&${params[key]}`;\n                }\n            }\n            else if (key === 'headers') {\n                request.headers = Object.assign({}, request.headers, params.headers);\n            }\n            else {\n                // @ts-expect-error\n                request[key] = params[key];\n            }\n        }\n        request.path = pathname + search;\n        return request;\n    }\n}\nexports[\"default\"] = HttpConnection;\nfunction isStream(obj) {\n    return obj != null && typeof obj.pipe === 'function';\n}\nfunction resolve(host, path) {\n    const hostEndWithSlash = host[host.length - 1] === '/';\n    const pathStartsWithSlash = path[0] === '/';\n    if (hostEndWithSlash && pathStartsWithSlash) {\n        return host + path.slice(1);\n    }\n    else if (hostEndWithSlash !== pathStartsWithSlash) {\n        return host + path;\n    }\n    else {\n        return host + '/' + path;\n    }\n}\n/* istanbul ignore next */\nfunction isHttpAgentOptions(opts) {\n    if (opts.keepAliveTimeout != null)\n        return false;\n    if (opts.keepAliveMaxTimeout != null)\n        return false;\n    if (opts.keepAliveTimeoutThreshold != null)\n        return false;\n    if (opts.pipelining != null)\n        return false;\n    if (opts.maxHeaderSize != null)\n        return false;\n    if (opts.connections != null)\n        return false;\n    return true;\n}\n//# sourceMappingURL=HttpConnection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/connection/HttpConnection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/connection/UndiciConnection.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/connection/UndiciConnection.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst node_buffer_1 = tslib_1.__importDefault(__webpack_require__(/*! node:buffer */ \"node:buffer\"));\nconst BaseConnection_1 = tslib_1.__importStar(__webpack_require__(/*! ./BaseConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\"));\nconst undici_1 = __webpack_require__(/*! undici */ \"(rsc)/./node_modules/undici/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\nconst debug = (0, debug_1.default)('elasticsearch');\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/;\nconst MAX_BUFFER_LENGTH = node_buffer_1.default.constants.MAX_LENGTH;\nconst MAX_STRING_LENGTH = node_buffer_1.default.constants.MAX_STRING_LENGTH;\n/**\n * A connection to an Elasticsearch node, managed by the Undici HTTP client library\n */\nclass Connection extends BaseConnection_1.default {\n    constructor(opts) {\n        var _a;\n        super(opts);\n        Object.defineProperty(this, \"pool\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (opts.proxy != null) {\n            throw new errors_1.ConfigurationError('Undici connection can\\'t work with proxies');\n        }\n        if (typeof opts.agent === 'function' || typeof opts.agent === 'boolean') {\n            throw new errors_1.ConfigurationError('Undici connection agent options can\\'t be a function or a boolean');\n        }\n        if (opts.agent != null && !isUndiciAgentOptions(opts.agent)) {\n            throw new errors_1.ConfigurationError('Bad agent configuration for Undici agent');\n        }\n        const undiciOptions = {\n            keepAliveTimeout: 600e3,\n            keepAliveMaxTimeout: 600e3,\n            keepAliveTimeoutThreshold: 1000,\n            pipelining: 1,\n            maxHeaderSize: 16384,\n            connections: 256,\n            headersTimeout: this.timeout,\n            bodyTimeout: this.timeout,\n            ...opts.agent\n        };\n        if (this[symbols_1.kCaFingerprint] !== null) {\n            const caFingerprint = this[symbols_1.kCaFingerprint];\n            const connector = (0, undici_1.buildConnector)(((_a = this.tls) !== null && _a !== void 0 ? _a : {}));\n            undiciOptions.connect = function (opts, cb) {\n                connector(opts, (err, socket) => {\n                    if (err != null) {\n                        return cb(err, null);\n                    }\n                    if (caFingerprint !== null && isTlsSocket(opts, socket)) {\n                        const issuerCertificate = (0, BaseConnection_1.getIssuerCertificate)(socket);\n                        /* istanbul ignore next */\n                        if (issuerCertificate == null) {\n                            socket.destroy();\n                            return cb(new Error('Invalid or malformed certificate'), null);\n                        }\n                        // Check if fingerprint matches\n                        /* istanbul ignore else */\n                        if (!(0, BaseConnection_1.isCaFingerprintMatch)(caFingerprint, issuerCertificate.fingerprint256)) {\n                            socket.destroy();\n                            return cb(new Error('Server certificate CA fingerprint does not match the value configured in caFingerprint'), null);\n                        }\n                    }\n                    return cb(null, socket);\n                });\n            };\n        }\n        else if (this.tls !== null) {\n            undiciOptions.connect = this.tls;\n        }\n        this.pool = new undici_1.Pool(this.url.toString(), undiciOptions);\n    }\n    async request(params, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        const maxResponseSize = (_a = options.maxResponseSize) !== null && _a !== void 0 ? _a : MAX_STRING_LENGTH;\n        const maxCompressedResponseSize = (_b = options.maxCompressedResponseSize) !== null && _b !== void 0 ? _b : MAX_BUFFER_LENGTH;\n        const requestParams = {\n            method: params.method,\n            path: params.path + (params.querystring == null || params.querystring === '' ? '' : `?${params.querystring}`),\n            headers: Object.assign({}, this.headers, params.headers),\n            body: params.body,\n            signal: (_c = options.signal) !== null && _c !== void 0 ? _c : new AbortController().signal\n        };\n        if (requestParams.path[0] !== '/') {\n            requestParams.path = `/${requestParams.path}`;\n        }\n        // undici does not support per-request timeouts,\n        // to address this issue, we default to the constructor\n        // timeout (which is handled by undici) and create a local\n        // setTimeout callback if the request-specific timeout\n        // is different from the constructor timeout.\n        let timedout = false;\n        let timeoutId;\n        if (options.timeout != null && options.timeout !== this.timeout) {\n            timeoutId = setTimeout(() => {\n                timedout = true;\n                requestParams.signal.dispatchEvent(new Event('abort'));\n            }, options.timeout);\n        }\n        // https://github.com/nodejs/node/commit/b961d9fd83\n        if (INVALID_PATH_REGEX.test(requestParams.path)) {\n            throw new TypeError(`ERR_UNESCAPED_CHARACTERS: ${requestParams.path}`);\n        }\n        debug('Starting a new request', params);\n        let response;\n        try {\n            // @ts-expect-error method it's fine as string\n            response = (await this.pool.request(requestParams));\n            if (timeoutId != null)\n                clearTimeout(timeoutId);\n        }\n        catch (err) {\n            if (timeoutId != null)\n                clearTimeout(timeoutId);\n            switch (err.code) {\n                case 'UND_ERR_ABORTED':\n                case DOMException.ABORT_ERR:\n                    throw (timedout ? new errors_1.TimeoutError('Request timed out') : new errors_1.RequestAbortedError('Request aborted'));\n                case 'UND_ERR_HEADERS_TIMEOUT':\n                    throw new errors_1.TimeoutError('Request timed out');\n                case 'UND_ERR_SOCKET':\n                    throw new errors_1.ConnectionError(`${err.message} - Local: ${(_e = (_d = err.socket) === null || _d === void 0 ? void 0 : _d.localAddress) !== null && _e !== void 0 ? _e : 'unknown'}:${(_g = (_f = err.socket) === null || _f === void 0 ? void 0 : _f.localPort) !== null && _g !== void 0 ? _g : 'unknown'}, Remote: ${(_j = (_h = err.socket) === null || _h === void 0 ? void 0 : _h.remoteAddress) !== null && _j !== void 0 ? _j : 'unknown'}:${(_l = (_k = err.socket) === null || _k === void 0 ? void 0 : _k.remotePort) !== null && _l !== void 0 ? _l : 'unknown'}`); // eslint-disable-line\n                default:\n                    throw new errors_1.ConnectionError(err.message);\n            }\n        }\n        if (options.asStream === true) {\n            return {\n                statusCode: response.statusCode,\n                headers: response.headers,\n                body: response.body\n            };\n        }\n        // @ts-expect-error Assume header is not string[] for now.\n        const contentEncoding = ((_m = response.headers['content-encoding']) !== null && _m !== void 0 ? _m : '').toLowerCase();\n        const isCompressed = contentEncoding.includes('gzip') || contentEncoding.includes('deflate'); // eslint-disable-line\n        const bodyIsBinary = (0, BaseConnection_1.isBinary)((_o = response.headers['content-type']) !== null && _o !== void 0 ? _o : '');\n        /* istanbul ignore else */\n        if (response.headers['content-length'] !== undefined) {\n            const contentLength = Number(response.headers['content-length']);\n            if (isCompressed && contentLength > maxCompressedResponseSize) { // eslint-disable-line\n                response.body.destroy();\n                throw new errors_1.RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed buffer (${maxCompressedResponseSize})`);\n            }\n            else if (contentLength > maxResponseSize) {\n                response.body.destroy();\n                throw new errors_1.RequestAbortedError(`The content length (${contentLength}) is bigger than the maximum allowed string (${maxResponseSize})`);\n            }\n        }\n        this.diagnostic.emit('deserialization', null, options);\n        try {\n            if (isCompressed || bodyIsBinary) { // eslint-disable-line\n                let currentLength = 0;\n                const payload = [];\n                for await (const chunk of response.body) {\n                    currentLength += Buffer.byteLength(chunk);\n                    if (currentLength > maxCompressedResponseSize) {\n                        response.body.destroy();\n                        throw new errors_1.RequestAbortedError(`The content length (${currentLength}) is bigger than the maximum allowed buffer (${maxCompressedResponseSize})`);\n                    }\n                    payload.push(chunk);\n                }\n                return {\n                    statusCode: response.statusCode,\n                    headers: response.headers,\n                    body: Buffer.concat(payload)\n                };\n            }\n            else {\n                let payload = '';\n                let currentLength = 0;\n                response.body.setEncoding('utf8');\n                for await (const chunk of response.body) {\n                    currentLength += Buffer.byteLength(chunk);\n                    if (currentLength > maxResponseSize) {\n                        response.body.destroy();\n                        throw new errors_1.RequestAbortedError(`The content length (${currentLength}) is bigger than the maximum allowed string (${maxResponseSize})`);\n                    }\n                    payload += chunk;\n                }\n                return {\n                    statusCode: response.statusCode,\n                    headers: response.headers,\n                    body: payload\n                };\n            }\n        }\n        catch (err) {\n            if (err.name === 'RequestAbortedError') {\n                throw err;\n            }\n            throw new errors_1.ConnectionError(err.message);\n        }\n    }\n    async close() {\n        debug('Closing connection', this.id);\n        await this.pool.close();\n    }\n}\nexports[\"default\"] = Connection;\n/* istanbul ignore next */\nfunction isUndiciAgentOptions(opts) {\n    if (opts.keepAlive != null)\n        return false;\n    if (opts.keepAliveMsecs != null)\n        return false;\n    if (opts.maxSockets != null)\n        return false;\n    if (opts.maxFreeSockets != null)\n        return false;\n    if (opts.scheduling != null)\n        return false;\n    if (opts.proxy != null)\n        return false;\n    return true;\n}\nfunction isTlsSocket(opts, socket) {\n    return socket !== null && opts.protocol === 'https:';\n}\n//# sourceMappingURL=UndiciConnection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/connection/UndiciConnection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/connection/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/connection/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the 'License'); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UndiciConnection = exports.HttpConnection = exports.BaseConnection = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst BaseConnection_1 = tslib_1.__importDefault(__webpack_require__(/*! ./BaseConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/BaseConnection.js\"));\nexports.BaseConnection = BaseConnection_1.default;\nconst HttpConnection_1 = tslib_1.__importDefault(__webpack_require__(/*! ./HttpConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/HttpConnection.js\"));\nexports.HttpConnection = HttpConnection_1.default;\nconst UndiciConnection_1 = tslib_1.__importDefault(__webpack_require__(/*! ./UndiciConnection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/UndiciConnection.js\"));\nexports.UndiciConnection = UndiciConnection_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9jb25uZWN0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsc0JBQXNCLEdBQUcsc0JBQXNCO0FBQzFFLGdCQUFnQixtQkFBTyxDQUFDLHVEQUFPO0FBQy9CLGlEQUFpRCxtQkFBTyxDQUFDLGtHQUFrQjtBQUMzRSxzQkFBc0I7QUFDdEIsaURBQWlELG1CQUFPLENBQUMsa0dBQWtCO0FBQzNFLHNCQUFzQjtBQUN0QixtREFBbUQsbUJBQU8sQ0FBQyxzR0FBb0I7QUFDL0Usd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9jb25uZWN0aW9uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTsgeW91IG1heVxuICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5kaWNpQ29ubmVjdGlvbiA9IGV4cG9ydHMuSHR0cENvbm5lY3Rpb24gPSBleHBvcnRzLkJhc2VDb25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IEJhc2VDb25uZWN0aW9uXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9CYXNlQ29ubmVjdGlvblwiKSk7XG5leHBvcnRzLkJhc2VDb25uZWN0aW9uID0gQmFzZUNvbm5lY3Rpb25fMS5kZWZhdWx0O1xuY29uc3QgSHR0cENvbm5lY3Rpb25fMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0h0dHBDb25uZWN0aW9uXCIpKTtcbmV4cG9ydHMuSHR0cENvbm5lY3Rpb24gPSBIdHRwQ29ubmVjdGlvbl8xLmRlZmF1bHQ7XG5jb25zdCBVbmRpY2lDb25uZWN0aW9uXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9VbmRpY2lDb25uZWN0aW9uXCIpKTtcbmV4cG9ydHMuVW5kaWNpQ29ubmVjdGlvbiA9IFVuZGljaUNvbm5lY3Rpb25fMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/connection/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/errors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProductNotSupportedError = exports.RequestAbortedError = exports.ResponseError = exports.ConfigurationError = exports.DeserializationError = exports.SerializationError = exports.NoLivingConnectionsError = exports.ConnectionError = exports.TimeoutError = exports.ElasticsearchClientError = void 0;\nconst security_1 = __webpack_require__(/*! ./security */ \"(rsc)/./node_modules/@elastic/transport/lib/security.js\");\nclass ElasticsearchClientError extends Error {\n    constructor(message, options) {\n        super(message);\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = 'ElasticsearchClientError';\n        this.options = {\n            redaction: {\n                type: 'replace',\n                additionalKeys: []\n            }\n        };\n        if (isObject(options)) {\n            this.options.redaction = { ...this.options.redaction, ...options.redaction };\n        }\n    }\n}\nexports.ElasticsearchClientError = ElasticsearchClientError;\nclass TimeoutError extends ElasticsearchClientError {\n    constructor(message, meta, options) {\n        super(message, options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, TimeoutError);\n        this.name = 'TimeoutError';\n        this.message = message !== null && message !== void 0 ? message : 'Timeout Error';\n        if (isObject(meta))\n            meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n        this.meta = meta;\n    }\n}\nexports.TimeoutError = TimeoutError;\nclass ConnectionError extends ElasticsearchClientError {\n    constructor(message, meta, options) {\n        super(message, options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, ConnectionError);\n        this.name = 'ConnectionError';\n        this.message = message !== null && message !== void 0 ? message : 'Connection Error';\n        if (isObject(meta))\n            meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n        this.meta = meta;\n    }\n}\nexports.ConnectionError = ConnectionError;\nclass NoLivingConnectionsError extends ElasticsearchClientError {\n    constructor(message, meta, options) {\n        super(message, options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, NoLivingConnectionsError);\n        this.name = 'NoLivingConnectionsError';\n        this.message = message !== null && message !== void 0 ? message : 'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.';\n        this.meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n    }\n}\nexports.NoLivingConnectionsError = NoLivingConnectionsError;\nclass SerializationError extends ElasticsearchClientError {\n    constructor(message, data) {\n        super(message);\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, SerializationError);\n        this.name = 'SerializationError';\n        this.message = message !== null && message !== void 0 ? message : 'Serialization Error';\n        this.data = data;\n    }\n}\nexports.SerializationError = SerializationError;\nclass DeserializationError extends ElasticsearchClientError {\n    constructor(message, data) {\n        super(message);\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, DeserializationError);\n        this.name = 'DeserializationError';\n        this.message = message !== null && message !== void 0 ? message : 'Deserialization Error';\n        this.data = data;\n    }\n}\nexports.DeserializationError = DeserializationError;\nclass ConfigurationError extends ElasticsearchClientError {\n    constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, ConfigurationError);\n        this.name = 'ConfigurationError';\n        this.message = message !== null && message !== void 0 ? message : 'Configuration Error';\n    }\n}\nexports.ConfigurationError = ConfigurationError;\nclass ResponseError extends ElasticsearchClientError {\n    constructor(meta, options) {\n        var _a;\n        super('Response Error', options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, ResponseError);\n        this.name = 'ResponseError';\n        if (meta.statusCode === 410) {\n            this.message = 'This API is unavailable in the version of Elasticsearch you are using.';\n        }\n        else if (isObject(meta.body) && meta.body.error != null && meta.body.error.type != null) {\n            this.message = meta.body.error.type;\n            if (isObject(meta.body.error.caused_by)) {\n                const { type, reason } = meta.body.error.caused_by;\n                const causedBy = [\n                    '\\tCaused by:',\n                    `\\t\\t${type}: ${reason}`\n                ].join('\\n');\n                this.message += `\\n${causedBy}`;\n            }\n            if (Array.isArray(meta.body.error.root_cause) && meta.body.error.root_cause.length !== 0) {\n                const formatRootCause = (entry) => `\\t\\t${entry.type}: ${entry.reason}`;\n                const rootCauses = [\n                    '\\tRoot causes:',\n                    ...meta.body.error.root_cause.map(formatRootCause)\n                ].join('\\n');\n                this.message += `\\n${rootCauses}`;\n            }\n        }\n        else if (typeof meta.body === 'object' && meta.body != null) {\n            this.message = JSON.stringify(meta.body);\n        }\n        else {\n            this.message = (_a = meta.body) !== null && _a !== void 0 ? _a : 'Response Error';\n        }\n        this.meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n    }\n    get body() {\n        return this.meta.body;\n    }\n    get statusCode() {\n        if (isObject(this.meta.body) && typeof this.meta.body.status === 'number') {\n            return this.meta.body.status;\n        }\n        return this.meta.statusCode;\n    }\n    get headers() {\n        return this.meta.headers;\n    }\n}\nexports.ResponseError = ResponseError;\nclass RequestAbortedError extends ElasticsearchClientError {\n    constructor(message, meta, options) {\n        super(message, options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, RequestAbortedError);\n        this.name = 'RequestAbortedError';\n        this.message = message !== null && message !== void 0 ? message : 'Request aborted';\n        if (isObject(meta))\n            meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n        this.meta = meta;\n    }\n}\nexports.RequestAbortedError = RequestAbortedError;\nclass ProductNotSupportedError extends ElasticsearchClientError {\n    constructor(product, meta, options) {\n        super('Product Not Supported Error', options);\n        Object.defineProperty(this, \"meta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Error.captureStackTrace(this, ProductNotSupportedError);\n        this.name = 'ProductNotSupportedError';\n        this.message = `The client noticed that the server is not ${product} and we do not support this unknown product.`;\n        if (isObject(meta))\n            meta = (0, security_1.redactDiagnostic)(meta, this.options.redaction);\n        this.meta = meta;\n    }\n}\nexports.ProductNotSupportedError = ProductNotSupportedError;\nfunction isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js":
/*!************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst node_url_1 = __webpack_require__(/*! node:url */ \"node:url\");\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst Diagnostic_1 = tslib_1.__importDefault(__webpack_require__(/*! ../Diagnostic */ \"(rsc)/./node_modules/@elastic/transport/lib/Diagnostic.js\"));\nconst symbols_1 = __webpack_require__(/*! ../symbols */ \"(rsc)/./node_modules/@elastic/transport/lib/symbols.js\");\nconst connection_1 = __webpack_require__(/*! ../connection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@elastic/transport/lib/errors.js\");\nconst debug = (0, debug_1.default)('elasticsearch');\n/**\n * Manages the HTTP connections to each Elasticsearch node,\n * keeping track of which are currently dead or alive, and\n * provides the functionality for deciding which node to send\n * a request to.\n */\nclass BaseConnectionPool {\n    constructor(opts) {\n        var _b;\n        Object.defineProperty(this, \"connections\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"Connection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"diagnostic\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"auth\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_agent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_proxy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_tls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, _a, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // list of nodes and weights\n        this.connections = [];\n        // how many nodes we have in our scheduler\n        this.size = this.connections.length;\n        this.Connection = opts.Connection;\n        this.diagnostic = (_b = opts.diagnostic) !== null && _b !== void 0 ? _b : new Diagnostic_1.default();\n        this.auth = opts.auth;\n        this._tls = opts.tls;\n        this._agent = opts.agent;\n        this._proxy = opts.proxy;\n        this[symbols_1.kCaFingerprint] = opts.caFingerprint;\n    }\n    markAlive(connection) {\n        connection.status = connection_1.BaseConnection.statuses.ALIVE;\n        return this;\n    }\n    markDead(connection) {\n        connection.status = connection_1.BaseConnection.statuses.DEAD;\n        return this;\n    }\n    getConnection(opts) {\n        throw new errors_1.ConfigurationError('The getConnection method should be implemented by extended classes');\n    }\n    /**\n     * Creates a new connection instance.\n     */\n    createConnection(opts) {\n        if (typeof opts === 'string') {\n            opts = this.urlToHost(opts);\n        }\n        if (this.auth != null) {\n            opts.auth = this.auth;\n        }\n        else if (opts.url.username !== '' && opts.url.password !== '') {\n            opts.auth = {\n                username: decodeURIComponent(opts.url.username),\n                password: decodeURIComponent(opts.url.password)\n            };\n        }\n        /* istanbul ignore else */\n        if (opts.tls == null)\n            opts.tls = this._tls;\n        /* istanbul ignore else */\n        if (opts.agent == null)\n            opts.agent = this._agent;\n        /* istanbul ignore else */\n        if (opts.proxy == null)\n            opts.proxy = this._proxy;\n        /* istanbul ignore else */\n        if (opts.diagnostic == null)\n            opts.diagnostic = this.diagnostic;\n        /* istanbul ignore else */\n        if (opts.caFingerprint == null)\n            opts.caFingerprint = this[symbols_1.kCaFingerprint];\n        const connection = new this.Connection(opts);\n        for (const conn of this.connections) {\n            if (conn.id === connection.id) {\n                throw new Error(`Connection with id '${connection.id}' is already present`);\n            }\n        }\n        return connection;\n    }\n    /**\n     * Adds a new connection to the pool.\n     *\n     * @param connection Connection options, or the URL of a node\n     * @returns This ConnectionPool instance\n     */\n    addConnection(connection) {\n        if (Array.isArray(connection)) {\n            const connections = [];\n            for (const conn of connection) {\n                connections.push(this.createConnection(conn));\n            }\n            return this.update([...this.connections, ...connections]);\n        }\n        else {\n            return this.update([...this.connections, this.createConnection(connection)]);\n        }\n    }\n    /**\n     * Removes a connection from the pool.\n     *\n     * @param connection The connection to remove\n     * @returns This ConnectionPool instance\n     */\n    removeConnection(connection) {\n        debug('Removing connection', connection);\n        return this.update(this.connections.filter(c => c.id !== connection.id));\n    }\n    /**\n     * Empties the connection pool.\n     *\n     * @returns {ConnectionPool}\n     */\n    async empty() {\n        debug('Emptying the connection pool');\n        const connections = this.connections;\n        this.connections = [];\n        this.size = 0;\n        for (const connection of connections) {\n            await connection.close();\n        }\n    }\n    /**\n     * Update the ConnectionPool with new connections.\n     *\n     * @param nodes array of connections\n     * @returns {ConnectionPool}\n     */\n    update(nodes) {\n        debug('Updating the connection pool');\n        const newConnections = [];\n        const oldConnections = [];\n        for (const node of nodes) {\n            // if we already have a given connection in the pool\n            // we mark it as alive and we do not close the connection\n            // to avoid socket issues\n            const connectionById = this.connections.find(c => c.id === node.id);\n            const connectionByUrl = this.connections.find(c => c.id === node.url.href);\n            if (connectionById != null) {\n                debug(`The connection with id '${node.id}' is already present`);\n                this.markAlive(connectionById);\n                newConnections.push(connectionById);\n                // in case the user has passed a single url (or an array of urls),\n                // the connection id will be the full href; to avoid closing valid connections\n                // because are not present in the pool, we check also the node url,\n                // and if is already present we update its id with the ES provided one.\n            }\n            else if (connectionByUrl != null) {\n                connectionByUrl.id = node.id;\n                this.markAlive(connectionByUrl);\n                newConnections.push(connectionByUrl);\n            }\n            else {\n                if (node instanceof connection_1.BaseConnection) {\n                    newConnections.push(node);\n                }\n                else {\n                    newConnections.push(this.createConnection(node));\n                }\n            }\n        }\n        const ids = nodes.map(c => c.id);\n        // remove all the dead connections and old connections\n        for (const connection of this.connections) {\n            if (!ids.includes(connection.id)) {\n                oldConnections.push(connection);\n            }\n        }\n        // close old connections\n        for (const connection of oldConnections) {\n            connection.close().catch(/* istanbul ignore next */ () => { });\n        }\n        this.connections = newConnections;\n        this.size = this.connections.length;\n        return this;\n    }\n    /**\n     * Transforms the nodes objects to a host object.\n     *\n     * @param {object} nodes\n     * @returns {array} hosts\n     */\n    nodesToHost(nodes, protocol) {\n        const ids = Object.keys(nodes);\n        const hosts = [];\n        for (let i = 0, len = ids.length; i < len; i++) {\n            const node = nodes[ids[i]];\n            // newly-added nodes do not have http assigned yet, so skip\n            if (node.http === undefined)\n                continue;\n            // If there is no protocol in\n            // the `publish_address` new URL will throw\n            // the publish_address can have two forms:\n            //   - ip:port\n            //   - hostname/ip:port\n            // if we encounter the second case, we should\n            // use the hostname instead of the ip\n            let address = node.http.publish_address;\n            const parts = address.split('/');\n            // the url is in the form of hostname/ip:port\n            if (parts.length > 1) {\n                const hostname = parts[0];\n                const port = parts[1].match(/((?::))(?:[0-9]+)$/g)[0].slice(1);\n                address = `${hostname}:${port}`;\n            }\n            address = address.slice(0, 4) === 'http'\n                /* istanbul ignore next */\n                ? address\n                : `${protocol}//${address}`;\n            hosts.push({\n                url: new node_url_1.URL(address),\n                id: ids[i]\n            });\n        }\n        return hosts;\n    }\n    /**\n     * Transforms an url string to a host object\n     *\n     * @param {string} url\n     * @returns {object} host\n     */\n    urlToHost(url) {\n        return {\n            url: new node_url_1.URL(url)\n        };\n    }\n}\n_a = symbols_1.kCaFingerprint;\nexports[\"default\"] = BaseConnectionPool;\n//# sourceMappingURL=BaseConnectionPool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9wb29sL0Jhc2VDb25uZWN0aW9uUG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsdURBQU87QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsMEJBQVU7QUFDckMsd0NBQXdDLG1CQUFPLENBQUMsc0RBQU87QUFDdkQsNkNBQTZDLG1CQUFPLENBQUMsZ0ZBQWU7QUFDcEUsa0JBQWtCLG1CQUFPLENBQUMsMEVBQVk7QUFDdEMscUJBQXFCLG1CQUFPLENBQUMsc0ZBQWU7QUFDNUMsaUJBQWlCLG1CQUFPLENBQUMsd0VBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUyxHQUFHLEtBQUs7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsU0FBUyxJQUFJLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL3RyYW5zcG9ydC9saWIvcG9vbC9CYXNlQ29ubmVjdGlvblBvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBub2RlX3VybF8xID0gcmVxdWlyZShcIm5vZGU6dXJsXCIpO1xuY29uc3QgZGVidWdfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBEaWFnbm9zdGljXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRGlhZ25vc3RpY1wiKSk7XG5jb25zdCBzeW1ib2xzXzEgPSByZXF1aXJlKFwiLi4vc3ltYm9sc1wiKTtcbmNvbnN0IGNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb25uZWN0aW9uXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnZWxhc3RpY3NlYXJjaCcpO1xuLyoqXG4gKiBNYW5hZ2VzIHRoZSBIVFRQIGNvbm5lY3Rpb25zIHRvIGVhY2ggRWxhc3RpY3NlYXJjaCBub2RlLFxuICoga2VlcGluZyB0cmFjayBvZiB3aGljaCBhcmUgY3VycmVudGx5IGRlYWQgb3IgYWxpdmUsIGFuZFxuICogcHJvdmlkZXMgdGhlIGZ1bmN0aW9uYWxpdHkgZm9yIGRlY2lkaW5nIHdoaWNoIG5vZGUgdG8gc2VuZFxuICogYSByZXF1ZXN0IHRvLlxuICovXG5jbGFzcyBCYXNlQ29ubmVjdGlvblBvb2wge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgdmFyIF9iO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25uZWN0aW9uc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzaXplXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIkNvbm5lY3Rpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGlhZ25vc3RpY1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhdXRoXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9hZ2VudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcHJveHlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX3Rsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgX2EsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGxpc3Qgb2Ygbm9kZXMgYW5kIHdlaWdodHNcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICAvLyBob3cgbWFueSBub2RlcyB3ZSBoYXZlIGluIG91ciBzY2hlZHVsZXJcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMuQ29ubmVjdGlvbiA9IG9wdHMuQ29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5kaWFnbm9zdGljID0gKF9iID0gb3B0cy5kaWFnbm9zdGljKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgRGlhZ25vc3RpY18xLmRlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5hdXRoID0gb3B0cy5hdXRoO1xuICAgICAgICB0aGlzLl90bHMgPSBvcHRzLnRscztcbiAgICAgICAgdGhpcy5fYWdlbnQgPSBvcHRzLmFnZW50O1xuICAgICAgICB0aGlzLl9wcm94eSA9IG9wdHMucHJveHk7XG4gICAgICAgIHRoaXNbc3ltYm9sc18xLmtDYUZpbmdlcnByaW50XSA9IG9wdHMuY2FGaW5nZXJwcmludDtcbiAgICB9XG4gICAgbWFya0FsaXZlKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29ubmVjdGlvbi5zdGF0dXMgPSBjb25uZWN0aW9uXzEuQmFzZUNvbm5lY3Rpb24uc3RhdHVzZXMuQUxJVkU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBtYXJrRGVhZChjb25uZWN0aW9uKSB7XG4gICAgICAgIGNvbm5lY3Rpb24uc3RhdHVzID0gY29ubmVjdGlvbl8xLkJhc2VDb25uZWN0aW9uLnN0YXR1c2VzLkRFQUQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRDb25uZWN0aW9uKG9wdHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkNvbmZpZ3VyYXRpb25FcnJvcignVGhlIGdldENvbm5lY3Rpb24gbWV0aG9kIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBieSBleHRlbmRlZCBjbGFzc2VzJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29ubmVjdGlvbiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBjcmVhdGVDb25uZWN0aW9uKG9wdHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgb3B0cyA9IHRoaXMudXJsVG9Ib3N0KG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF1dGggIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0cy5hdXRoID0gdGhpcy5hdXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdHMudXJsLnVzZXJuYW1lICE9PSAnJyAmJiBvcHRzLnVybC5wYXNzd29yZCAhPT0gJycpIHtcbiAgICAgICAgICAgIG9wdHMuYXV0aCA9IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KG9wdHMudXJsLnVzZXJuYW1lKSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogZGVjb2RlVVJJQ29tcG9uZW50KG9wdHMudXJsLnBhc3N3b3JkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAob3B0cy50bHMgPT0gbnVsbClcbiAgICAgICAgICAgIG9wdHMudGxzID0gdGhpcy5fdGxzO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAob3B0cy5hZ2VudCA9PSBudWxsKVxuICAgICAgICAgICAgb3B0cy5hZ2VudCA9IHRoaXMuX2FnZW50O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAob3B0cy5wcm94eSA9PSBudWxsKVxuICAgICAgICAgICAgb3B0cy5wcm94eSA9IHRoaXMuX3Byb3h5O1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAob3B0cy5kaWFnbm9zdGljID09IG51bGwpXG4gICAgICAgICAgICBvcHRzLmRpYWdub3N0aWMgPSB0aGlzLmRpYWdub3N0aWM7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChvcHRzLmNhRmluZ2VycHJpbnQgPT0gbnVsbClcbiAgICAgICAgICAgIG9wdHMuY2FGaW5nZXJwcmludCA9IHRoaXNbc3ltYm9sc18xLmtDYUZpbmdlcnByaW50XTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyB0aGlzLkNvbm5lY3Rpb24ob3B0cyk7XG4gICAgICAgIGZvciAoY29uc3QgY29ubiBvZiB0aGlzLmNvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICBpZiAoY29ubi5pZCA9PT0gY29ubmVjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29ubmVjdGlvbiB3aXRoIGlkICcke2Nvbm5lY3Rpb24uaWR9JyBpcyBhbHJlYWR5IHByZXNlbnRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBjb25uZWN0aW9uIHRvIHRoZSBwb29sLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb24gQ29ubmVjdGlvbiBvcHRpb25zLCBvciB0aGUgVVJMIG9mIGEgbm9kZVxuICAgICAqIEByZXR1cm5zIFRoaXMgQ29ubmVjdGlvblBvb2wgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBhZGRDb25uZWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25zID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbm4gb2YgY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLnB1c2godGhpcy5jcmVhdGVDb25uZWN0aW9uKGNvbm4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShbLi4udGhpcy5jb25uZWN0aW9ucywgLi4uY29ubmVjdGlvbnNdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZShbLi4udGhpcy5jb25uZWN0aW9ucywgdGhpcy5jcmVhdGVDb25uZWN0aW9uKGNvbm5lY3Rpb24pXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNvbm5lY3Rpb24gZnJvbSB0aGUgcG9vbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uIFRoZSBjb25uZWN0aW9uIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIFRoaXMgQ29ubmVjdGlvblBvb2wgaW5zdGFuY2VcbiAgICAgKi9cbiAgICByZW1vdmVDb25uZWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgZGVidWcoJ1JlbW92aW5nIGNvbm5lY3Rpb24nLCBjb25uZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKHRoaXMuY29ubmVjdGlvbnMuZmlsdGVyKGMgPT4gYy5pZCAhPT0gY29ubmVjdGlvbi5pZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbXB0aWVzIHRoZSBjb25uZWN0aW9uIHBvb2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Q29ubmVjdGlvblBvb2x9XG4gICAgICovXG4gICAgYXN5bmMgZW1wdHkoKSB7XG4gICAgICAgIGRlYnVnKCdFbXB0eWluZyB0aGUgY29ubmVjdGlvbiBwb29sJyk7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25zID0gdGhpcy5jb25uZWN0aW9ucztcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3Rpb24gb2YgY29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIENvbm5lY3Rpb25Qb29sIHdpdGggbmV3IGNvbm5lY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGVzIGFycmF5IG9mIGNvbm5lY3Rpb25zXG4gICAgICogQHJldHVybnMge0Nvbm5lY3Rpb25Qb29sfVxuICAgICAqL1xuICAgIHVwZGF0ZShub2Rlcykge1xuICAgICAgICBkZWJ1ZygnVXBkYXRpbmcgdGhlIGNvbm5lY3Rpb24gcG9vbCcpO1xuICAgICAgICBjb25zdCBuZXdDb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBvbGRDb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdpdmVuIGNvbm5lY3Rpb24gaW4gdGhlIHBvb2xcbiAgICAgICAgICAgIC8vIHdlIG1hcmsgaXQgYXMgYWxpdmUgYW5kIHdlIGRvIG5vdCBjbG9zZSB0aGUgY29ubmVjdGlvblxuICAgICAgICAgICAgLy8gdG8gYXZvaWQgc29ja2V0IGlzc3Vlc1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbkJ5SWQgPSB0aGlzLmNvbm5lY3Rpb25zLmZpbmQoYyA9PiBjLmlkID09PSBub2RlLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25CeVVybCA9IHRoaXMuY29ubmVjdGlvbnMuZmluZChjID0+IGMuaWQgPT09IG5vZGUudXJsLmhyZWYpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25CeUlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhgVGhlIGNvbm5lY3Rpb24gd2l0aCBpZCAnJHtub2RlLmlkfScgaXMgYWxyZWFkeSBwcmVzZW50YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrQWxpdmUoY29ubmVjdGlvbkJ5SWQpO1xuICAgICAgICAgICAgICAgIG5ld0Nvbm5lY3Rpb25zLnB1c2goY29ubmVjdGlvbkJ5SWQpO1xuICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIHVzZXIgaGFzIHBhc3NlZCBhIHNpbmdsZSB1cmwgKG9yIGFuIGFycmF5IG9mIHVybHMpLFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb25uZWN0aW9uIGlkIHdpbGwgYmUgdGhlIGZ1bGwgaHJlZjsgdG8gYXZvaWQgY2xvc2luZyB2YWxpZCBjb25uZWN0aW9uc1xuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgYXJlIG5vdCBwcmVzZW50IGluIHRoZSBwb29sLCB3ZSBjaGVjayBhbHNvIHRoZSBub2RlIHVybCxcbiAgICAgICAgICAgICAgICAvLyBhbmQgaWYgaXMgYWxyZWFkeSBwcmVzZW50IHdlIHVwZGF0ZSBpdHMgaWQgd2l0aCB0aGUgRVMgcHJvdmlkZWQgb25lLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29ubmVjdGlvbkJ5VXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uQnlVcmwuaWQgPSBub2RlLmlkO1xuICAgICAgICAgICAgICAgIHRoaXMubWFya0FsaXZlKGNvbm5lY3Rpb25CeVVybCk7XG4gICAgICAgICAgICAgICAgbmV3Q29ubmVjdGlvbnMucHVzaChjb25uZWN0aW9uQnlVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBjb25uZWN0aW9uXzEuQmFzZUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29ubmVjdGlvbnMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0Nvbm5lY3Rpb25zLnB1c2godGhpcy5jcmVhdGVDb25uZWN0aW9uKG5vZGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWRzID0gbm9kZXMubWFwKGMgPT4gYy5pZCk7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgdGhlIGRlYWQgY29ubmVjdGlvbnMgYW5kIG9sZCBjb25uZWN0aW9uc1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3Rpb24gb2YgdGhpcy5jb25uZWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFpZHMuaW5jbHVkZXMoY29ubmVjdGlvbi5pZCkpIHtcbiAgICAgICAgICAgICAgICBvbGRDb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNsb3NlIG9sZCBjb25uZWN0aW9uc1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3Rpb24gb2Ygb2xkQ29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKS5jYXRjaCgvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoKSA9PiB7IH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbnMgPSBuZXdDb25uZWN0aW9ucztcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSBub2RlcyBvYmplY3RzIHRvIGEgaG9zdCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbm9kZXNcbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9IGhvc3RzXG4gICAgICovXG4gICAgbm9kZXNUb0hvc3Qobm9kZXMsIHByb3RvY29sKSB7XG4gICAgICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKG5vZGVzKTtcbiAgICAgICAgY29uc3QgaG9zdHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGlkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2lkc1tpXV07XG4gICAgICAgICAgICAvLyBuZXdseS1hZGRlZCBub2RlcyBkbyBub3QgaGF2ZSBodHRwIGFzc2lnbmVkIHlldCwgc28gc2tpcFxuICAgICAgICAgICAgaWYgKG5vZGUuaHR0cCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcHJvdG9jb2wgaW5cbiAgICAgICAgICAgIC8vIHRoZSBgcHVibGlzaF9hZGRyZXNzYCBuZXcgVVJMIHdpbGwgdGhyb3dcbiAgICAgICAgICAgIC8vIHRoZSBwdWJsaXNoX2FkZHJlc3MgY2FuIGhhdmUgdHdvIGZvcm1zOlxuICAgICAgICAgICAgLy8gICAtIGlwOnBvcnRcbiAgICAgICAgICAgIC8vICAgLSBob3N0bmFtZS9pcDpwb3J0XG4gICAgICAgICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgdGhlIHNlY29uZCBjYXNlLCB3ZSBzaG91bGRcbiAgICAgICAgICAgIC8vIHVzZSB0aGUgaG9zdG5hbWUgaW5zdGVhZCBvZiB0aGUgaXBcbiAgICAgICAgICAgIGxldCBhZGRyZXNzID0gbm9kZS5odHRwLnB1Ymxpc2hfYWRkcmVzcztcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gYWRkcmVzcy5zcGxpdCgnLycpO1xuICAgICAgICAgICAgLy8gdGhlIHVybCBpcyBpbiB0aGUgZm9ybSBvZiBob3N0bmFtZS9pcDpwb3J0XG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RuYW1lID0gcGFydHNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydCA9IHBhcnRzWzFdLm1hdGNoKC8oKD86OikpKD86WzAtOV0rKSQvZylbMF0uc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9IGAke2hvc3RuYW1lfToke3BvcnR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIDQpID09PSAnaHR0cCdcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgID8gYWRkcmVzc1xuICAgICAgICAgICAgICAgIDogYCR7cHJvdG9jb2x9Ly8ke2FkZHJlc3N9YDtcbiAgICAgICAgICAgIGhvc3RzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVybDogbmV3IG5vZGVfdXJsXzEuVVJMKGFkZHJlc3MpLFxuICAgICAgICAgICAgICAgIGlkOiBpZHNbaV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3N0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhbiB1cmwgc3RyaW5nIHRvIGEgaG9zdCBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBob3N0XG4gICAgICovXG4gICAgdXJsVG9Ib3N0KHVybCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXJsOiBuZXcgbm9kZV91cmxfMS5VUkwodXJsKVxuICAgICAgICB9O1xuICAgIH1cbn1cbl9hID0gc3ltYm9sc18xLmtDYUZpbmdlcnByaW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZUNvbm5lY3Rpb25Qb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZUNvbm5lY3Rpb25Qb29sLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/pool/CloudConnectionPool.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/pool/CloudConnectionPool.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst BaseConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./BaseConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js\"));\nclass CloudConnectionPool extends BaseConnectionPool_1.default {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"cloudConnection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cloudConnection = null;\n    }\n    /**\n     * Returns the only cloud connection.\n     *\n     * @returns {object} connection\n     */\n    getConnection(opts) {\n        return this.cloudConnection;\n    }\n    /**\n     * Empties the connection pool.\n     *\n     * @returns {ConnectionPool}\n     */\n    async empty() {\n        await super.empty();\n        this.cloudConnection = null;\n    }\n    /**\n     * Update the ConnectionPool with new connections.\n     *\n     * @param {array} array of connections\n     * @returns {ConnectionPool}\n     */\n    update(connections) {\n        super.update(connections);\n        this.cloudConnection = this.connections[0];\n        return this;\n    }\n}\nexports[\"default\"] = CloudConnectionPool;\n//# sourceMappingURL=CloudConnectionPool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9wb29sL0Nsb3VkQ29ubmVjdGlvblBvb2wuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQixxREFBcUQsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9wb29sL0Nsb3VkQ29ubmVjdGlvblBvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBCYXNlQ29ubmVjdGlvblBvb2xfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VDb25uZWN0aW9uUG9vbFwiKSk7XG5jbGFzcyBDbG91ZENvbm5lY3Rpb25Qb29sIGV4dGVuZHMgQmFzZUNvbm5lY3Rpb25Qb29sXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xvdWRDb25uZWN0aW9uXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2xvdWRDb25uZWN0aW9uID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb25seSBjbG91ZCBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge29iamVjdH0gY29ubmVjdGlvblxuICAgICAqL1xuICAgIGdldENvbm5lY3Rpb24ob3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG91ZENvbm5lY3Rpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtcHRpZXMgdGhlIGNvbm5lY3Rpb24gcG9vbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtDb25uZWN0aW9uUG9vbH1cbiAgICAgKi9cbiAgICBhc3luYyBlbXB0eSgpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5jbG91ZENvbm5lY3Rpb24gPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIENvbm5lY3Rpb25Qb29sIHdpdGggbmV3IGNvbm5lY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHthcnJheX0gYXJyYXkgb2YgY29ubmVjdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7Q29ubmVjdGlvblBvb2x9XG4gICAgICovXG4gICAgdXBkYXRlKGNvbm5lY3Rpb25zKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShjb25uZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuY2xvdWRDb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uc1swXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ2xvdWRDb25uZWN0aW9uUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsb3VkQ29ubmVjdGlvblBvb2wuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/pool/CloudConnectionPool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/pool/ClusterConnectionPool.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/pool/ClusterConnectionPool.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst BaseConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./BaseConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js\"));\nconst node_assert_1 = tslib_1.__importDefault(__webpack_require__(/*! node:assert */ \"node:assert\"));\nconst debug_1 = tslib_1.__importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst connection_1 = __webpack_require__(/*! ../connection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/index.js\");\nconst debug = (0, debug_1.default)('elasticsearch');\nclass ClusterConnectionPool extends BaseConnectionPool_1.default {\n    constructor(opts) {\n        var _a, _b;\n        super(opts);\n        Object.defineProperty(this, \"dead\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resurrectTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resurrectTimeoutCutoff\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pingTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resurrectStrategy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.dead = [];\n        // the resurrect timeout is 60s\n        this.resurrectTimeout = 1000 * 60;\n        // number of consecutive failures after which\n        // the timeout doesn't increase\n        this.resurrectTimeoutCutoff = 5;\n        this.pingTimeout = (_a = opts.pingTimeout) !== null && _a !== void 0 ? _a : 3000;\n        const resurrectStrategy = (_b = opts.resurrectStrategy) !== null && _b !== void 0 ? _b : 'ping';\n        this.resurrectStrategy = ClusterConnectionPool.resurrectStrategies[resurrectStrategy];\n        (0, node_assert_1.default)(this.resurrectStrategy != null, `Invalid resurrection strategy: '${resurrectStrategy}'`);\n    }\n    /**\n     * Marks a connection as 'alive'.\n     * If needed removes the connection from the dead list\n     * and then resets the `deadCount`.\n     *\n     * @param {object} connection\n     */\n    markAlive(connection) {\n        const { id } = connection;\n        debug(`Marking as 'alive' connection '${id}'`);\n        const index = this.dead.indexOf(id);\n        if (index > -1)\n            this.dead.splice(index, 1);\n        connection.status = connection_1.BaseConnection.statuses.ALIVE;\n        connection.deadCount = 0;\n        connection.resurrectTimeout = 0;\n        return this;\n    }\n    /**\n     * Marks a connection as 'dead'.\n     * If needed adds the connection to the dead list\n     * and then increments the `deadCount`.\n     *\n     * @param {object} connection\n     */\n    markDead(connection) {\n        const { id } = connection;\n        debug(`Marking as 'dead' connection '${id}'`);\n        if (!this.dead.includes(id)) {\n            // It might happen that `markDead` is called jsut after\n            // a pool update, and in such case we will add to the dead\n            // list a node that no longer exist. The following check verify\n            // that the connection is still part of the pool before\n            // marking it as dead.\n            for (let i = 0; i < this.size; i++) {\n                if (this.connections[i].id === id) {\n                    this.dead.push(id);\n                    break;\n                }\n            }\n        }\n        connection.status = connection_1.BaseConnection.statuses.DEAD;\n        connection.deadCount++;\n        // resurrectTimeout formula:\n        // `resurrectTimeout * 2 ** min(deadCount - 1, resurrectTimeoutCutoff)`\n        connection.resurrectTimeout = Date.now() + this.resurrectTimeout * Math.pow(2, Math.min(connection.deadCount - 1, this.resurrectTimeoutCutoff));\n        // sort the dead list in ascending order\n        // based on the resurrectTimeout\n        this.dead.sort((a, b) => {\n            const conn1 = this.connections.find(c => c.id === a);\n            const conn2 = this.connections.find(c => c.id === b);\n            return conn1.resurrectTimeout - conn2.resurrectTimeout;\n        });\n        return this;\n    }\n    /**\n     * If enabled, tries to resurrect a connection with the given\n     * resurrect strategy ('ping', 'optimistic', 'none').\n     *\n     * @param {object} { now, requestId }\n     */\n    resurrect(opts) {\n        if (this.resurrectStrategy === 0 || this.dead.length === 0) {\n            debug('Nothing to resurrect');\n            return;\n        }\n        // the dead list is sorted in ascending order based on the timeout\n        // so the first element will always be the one with the smaller timeout\n        const connection = this.connections.find(c => c.id === this.dead[0]);\n        if (opts.now < connection.resurrectTimeout) {\n            debug('Nothing to resurrect');\n            return;\n        }\n        const { id } = connection;\n        // ping strategy\n        if (this.resurrectStrategy === 1) {\n            connection.request({ method: 'HEAD', path: '/' }, { timeout: this.pingTimeout, requestId: opts.requestId, name: opts.name, context: opts.context })\n                .then(({ statusCode }) => {\n                let isAlive = true;\n                if (statusCode === 502 || statusCode === 503 || statusCode === 504) {\n                    debug(`Resurrect: connection '${id}' is still dead`);\n                    this.markDead(connection);\n                    isAlive = false;\n                }\n                else {\n                    debug(`Resurrect: connection '${id}' is now alive`);\n                    this.markAlive(connection);\n                }\n                this.diagnostic.emit('resurrect', null, {\n                    strategy: 'ping',\n                    name: opts.name,\n                    request: { id: opts.requestId },\n                    isAlive,\n                    connection\n                });\n            })\n                .catch((err) => {\n                this.markDead(connection);\n                this.diagnostic.emit('resurrect', err, {\n                    strategy: 'ping',\n                    name: opts.name,\n                    request: { id: opts.requestId },\n                    isAlive: false,\n                    connection\n                });\n            });\n            // optimistic strategy\n        }\n        else {\n            debug(`Resurrect: optimistic resurrection for connection '${id}'`);\n            this.dead.splice(this.dead.indexOf(id), 1);\n            connection.status = connection_1.BaseConnection.statuses.ALIVE;\n            this.diagnostic.emit('resurrect', null, {\n                strategy: 'optimistic',\n                name: opts.name,\n                request: { id: opts.requestId },\n                isAlive: true,\n                connection\n            });\n        }\n    }\n    /**\n     * Returns an alive connection if present,\n     * otherwise returns a dead connection.\n     * By default it filters the `master` only nodes.\n     * It uses the selector to choose which\n     * connection return.\n     *\n     * @param {object} options (filter and selector)\n     * @returns {object|null} connection\n     */\n    getConnection(opts) {\n        const filter = opts.filter != null ? opts.filter : () => true;\n        const selector = opts.selector != null ? opts.selector : (c) => c[0];\n        this.resurrect({\n            now: opts.now,\n            requestId: opts.requestId,\n            name: opts.name,\n            context: opts.context\n        });\n        const noAliveConnections = this.size === this.dead.length;\n        // TODO: can we cache this?\n        const connections = [];\n        for (let i = 0; i < this.size; i++) {\n            const connection = this.connections[i];\n            if (noAliveConnections || connection.status === connection_1.BaseConnection.statuses.ALIVE) {\n                if (filter(connection)) {\n                    connections.push(connection);\n                }\n            }\n        }\n        if (connections.length === 0)\n            return null;\n        return selector(connections);\n    }\n    /**\n     * Empties the connection pool.\n     *\n     * @returns {ConnectionPool}\n     */\n    async empty() {\n        await super.empty();\n        this.dead = [];\n    }\n    /**\n     * Update the ConnectionPool with new connections.\n     *\n     * @param {array} array of connections\n     * @returns {ConnectionPool}\n     */\n    update(connections) {\n        super.update(connections);\n        this.dead = [];\n        return this;\n    }\n}\nObject.defineProperty(ClusterConnectionPool, \"resurrectStrategies\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n        none: 0,\n        ping: 1,\n        optimistic: 2\n    }\n});\nexports[\"default\"] = ClusterConnectionPool;\n//# sourceMappingURL=ClusterConnectionPool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/pool/ClusterConnectionPool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/pool/WeightedConnectionPool.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/pool/WeightedConnectionPool.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst connection_1 = __webpack_require__(/*! ../connection */ \"(rsc)/./node_modules/@elastic/transport/lib/connection/index.js\");\nconst BaseConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./BaseConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js\"));\nconst noFilter = () => true;\nclass WeightedConnectionPool extends BaseConnectionPool_1.default {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxWeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"greatestCommonDivisor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"currentWeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // index choosen last time\n        this.index = -1;\n        // max weight of all nodes\n        this.maxWeight = 0;\n        // greatest common divisor of all nodes weights\n        this.greatestCommonDivisor = 0;\n        // current weight in scheduling\n        this.currentWeight = 0;\n    }\n    /**\n     * Returns a connection, even if the connection might be dead.\n     *\n     * @param {object} options (filter)\n     * @returns {object|null} connection\n     */\n    getConnection(opts) {\n        const filter = opts.filter != null ? opts.filter : noFilter;\n        // we should be able to find the next node in 1 array scan,\n        // if we don't, it means that we are in an infinite loop\n        let counter = 0;\n        while (counter++ < this.size) {\n            // 0 <= index < size\n            this.index = (this.index + 1) % this.size;\n            if (this.index === 0) {\n                this.currentWeight = this.currentWeight - this.greatestCommonDivisor;\n                if (this.currentWeight <= 0) {\n                    this.currentWeight = this.maxWeight;\n                    /* istanbul ignore if */\n                    if (this.currentWeight === 0) {\n                        return null;\n                    }\n                }\n            }\n            const connection = this.connections[this.index];\n            if (connection.weight >= this.currentWeight && filter(connection)) {\n                return connection;\n            }\n        }\n        return null;\n    }\n    /**\n     * Set the weight of a connection to the maximum value.\n     * If sniffing is not enabled and there is only\n     * one node, this method is a noop.\n     *\n     * @param {object} connection\n     */\n    markAlive(connection) {\n        if (this.size === 1 || connection.status === connection_1.BaseConnection.statuses.ALIVE)\n            return this;\n        connection.status = connection_1.BaseConnection.statuses.ALIVE;\n        connection.deadCount = 0;\n        connection.weight = Math.round(1000 / this.size);\n        this.maxWeight = Math.max(...(this.connections.map(c => c.weight)));\n        this.greatestCommonDivisor = this.connections.map(c => c.weight).reduce(getGreatestCommonDivisor, 0);\n        return this;\n    }\n    /**\n     * Decreases the connection weight.\n     * If sniffing is not enabled and there is only\n     * one node, this method is a noop.\n     *\n     * @param {object} connection\n     */\n    markDead(connection) {\n        if (this.size === 1)\n            return this;\n        connection.status = connection_1.BaseConnection.statuses.DEAD;\n        connection.deadCount++;\n        connection.weight -= Math.round(Math.pow(Math.log2(connection.weight), connection.deadCount));\n        /* istanbul ignore if */\n        if (connection.weight <= 0)\n            connection.weight = 1;\n        this.maxWeight = Math.max(...(this.connections.map(c => c.weight)));\n        this.greatestCommonDivisor = this.connections.map(c => c.weight).reduce(getGreatestCommonDivisor, 0);\n        return this;\n    }\n    /**\n     * Empties the connection pool.\n     *\n     * @returns {ConnectionPool}\n     */\n    async empty() {\n        await super.empty();\n        this.maxWeight = 0;\n        this.greatestCommonDivisor = 0;\n        this.index = -1;\n        this.currentWeight = 0;\n    }\n    /**\n     * Update the ConnectionPool with new connections.\n     *\n     * @param {array} array of connections\n     * @returns {ConnectionPool}\n     */\n    update(connections) {\n        super.update(connections);\n        this.connections.forEach(connection => {\n            connection.weight = Math.round(1000 / this.size);\n        });\n        this.maxWeight = Math.max(...(this.connections.map(c => c.weight)));\n        this.greatestCommonDivisor = this.connections.map(c => c.weight).reduce(getGreatestCommonDivisor, 0);\n        this.index = -1;\n        this.currentWeight = 0;\n        return this;\n    }\n}\nexports[\"default\"] = WeightedConnectionPool;\nfunction getGreatestCommonDivisor(a, b) {\n    if (b === 0)\n        return a;\n    return getGreatestCommonDivisor(b, a % b);\n}\n//# sourceMappingURL=WeightedConnectionPool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9wb29sL1dlaWdodGVkQ29ubmVjdGlvblBvb2wuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQyxzRkFBZTtBQUM1QyxxREFBcUQsbUJBQU8sQ0FBQyxvR0FBc0I7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW5zZmFsbC9Eb3dubG9hZHMvc2VhcmNoLWVuZ2luZS9zZXJ2aWNlcy93ZWIvbm9kZV9tb2R1bGVzL0BlbGFzdGljL3RyYW5zcG9ydC9saWIvcG9vbC9XZWlnaHRlZENvbm5lY3Rpb25Qb29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvclxuICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGhcbiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0XG4gKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyXG4gKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY29uc3QgY29ubmVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2Nvbm5lY3Rpb25cIik7XG5jb25zdCBCYXNlQ29ubmVjdGlvblBvb2xfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VDb25uZWN0aW9uUG9vbFwiKSk7XG5jb25zdCBub0ZpbHRlciA9ICgpID0+IHRydWU7XG5jbGFzcyBXZWlnaHRlZENvbm5lY3Rpb25Qb29sIGV4dGVuZHMgQmFzZUNvbm5lY3Rpb25Qb29sXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5kZXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4V2VpZ2h0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdyZWF0ZXN0Q29tbW9uRGl2aXNvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjdXJyZW50V2VpZ2h0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGluZGV4IGNob29zZW4gbGFzdCB0aW1lXG4gICAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgLy8gbWF4IHdlaWdodCBvZiBhbGwgbm9kZXNcbiAgICAgICAgdGhpcy5tYXhXZWlnaHQgPSAwO1xuICAgICAgICAvLyBncmVhdGVzdCBjb21tb24gZGl2aXNvciBvZiBhbGwgbm9kZXMgd2VpZ2h0c1xuICAgICAgICB0aGlzLmdyZWF0ZXN0Q29tbW9uRGl2aXNvciA9IDA7XG4gICAgICAgIC8vIGN1cnJlbnQgd2VpZ2h0IGluIHNjaGVkdWxpbmdcbiAgICAgICAgdGhpcy5jdXJyZW50V2VpZ2h0ID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvbm5lY3Rpb24sIGV2ZW4gaWYgdGhlIGNvbm5lY3Rpb24gbWlnaHQgYmUgZGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIChmaWx0ZXIpXG4gICAgICogQHJldHVybnMge29iamVjdHxudWxsfSBjb25uZWN0aW9uXG4gICAgICovXG4gICAgZ2V0Q29ubmVjdGlvbihvcHRzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IG9wdHMuZmlsdGVyICE9IG51bGwgPyBvcHRzLmZpbHRlciA6IG5vRmlsdGVyO1xuICAgICAgICAvLyB3ZSBzaG91bGQgYmUgYWJsZSB0byBmaW5kIHRoZSBuZXh0IG5vZGUgaW4gMSBhcnJheSBzY2FuLFxuICAgICAgICAvLyBpZiB3ZSBkb24ndCwgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgaW4gYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIHdoaWxlIChjb3VudGVyKysgPCB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIC8vIDAgPD0gaW5kZXggPCBzaXplXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gKHRoaXMuaW5kZXggKyAxKSAlIHRoaXMuc2l6ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V2VpZ2h0ID0gdGhpcy5jdXJyZW50V2VpZ2h0IC0gdGhpcy5ncmVhdGVzdENvbW1vbkRpdmlzb3I7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdlaWdodCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFdlaWdodCA9IHRoaXMubWF4V2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uc1t0aGlzLmluZGV4XTtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLndlaWdodCA+PSB0aGlzLmN1cnJlbnRXZWlnaHQgJiYgZmlsdGVyKGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgd2VpZ2h0IG9mIGEgY29ubmVjdGlvbiB0byB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBJZiBzbmlmZmluZyBpcyBub3QgZW5hYmxlZCBhbmQgdGhlcmUgaXMgb25seVxuICAgICAqIG9uZSBub2RlLCB0aGlzIG1ldGhvZCBpcyBhIG5vb3AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29ubmVjdGlvblxuICAgICAqL1xuICAgIG1hcmtBbGl2ZShjb25uZWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnNpemUgPT09IDEgfHwgY29ubmVjdGlvbi5zdGF0dXMgPT09IGNvbm5lY3Rpb25fMS5CYXNlQ29ubmVjdGlvbi5zdGF0dXNlcy5BTElWRSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBjb25uZWN0aW9uLnN0YXR1cyA9IGNvbm5lY3Rpb25fMS5CYXNlQ29ubmVjdGlvbi5zdGF0dXNlcy5BTElWRTtcbiAgICAgICAgY29ubmVjdGlvbi5kZWFkQ291bnQgPSAwO1xuICAgICAgICBjb25uZWN0aW9uLndlaWdodCA9IE1hdGgucm91bmQoMTAwMCAvIHRoaXMuc2l6ZSk7XG4gICAgICAgIHRoaXMubWF4V2VpZ2h0ID0gTWF0aC5tYXgoLi4uKHRoaXMuY29ubmVjdGlvbnMubWFwKGMgPT4gYy53ZWlnaHQpKSk7XG4gICAgICAgIHRoaXMuZ3JlYXRlc3RDb21tb25EaXZpc29yID0gdGhpcy5jb25uZWN0aW9ucy5tYXAoYyA9PiBjLndlaWdodCkucmVkdWNlKGdldEdyZWF0ZXN0Q29tbW9uRGl2aXNvciwgMCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNyZWFzZXMgdGhlIGNvbm5lY3Rpb24gd2VpZ2h0LlxuICAgICAqIElmIHNuaWZmaW5nIGlzIG5vdCBlbmFibGVkIGFuZCB0aGVyZSBpcyBvbmx5XG4gICAgICogb25lIG5vZGUsIHRoaXMgbWV0aG9kIGlzIGEgbm9vcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25uZWN0aW9uXG4gICAgICovXG4gICAgbWFya0RlYWQoY29ubmVjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5zaXplID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGNvbm5lY3Rpb24uc3RhdHVzID0gY29ubmVjdGlvbl8xLkJhc2VDb25uZWN0aW9uLnN0YXR1c2VzLkRFQUQ7XG4gICAgICAgIGNvbm5lY3Rpb24uZGVhZENvdW50Kys7XG4gICAgICAgIGNvbm5lY3Rpb24ud2VpZ2h0IC09IE1hdGgucm91bmQoTWF0aC5wb3coTWF0aC5sb2cyKGNvbm5lY3Rpb24ud2VpZ2h0KSwgY29ubmVjdGlvbi5kZWFkQ291bnQpKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChjb25uZWN0aW9uLndlaWdodCA8PSAwKVxuICAgICAgICAgICAgY29ubmVjdGlvbi53ZWlnaHQgPSAxO1xuICAgICAgICB0aGlzLm1heFdlaWdodCA9IE1hdGgubWF4KC4uLih0aGlzLmNvbm5lY3Rpb25zLm1hcChjID0+IGMud2VpZ2h0KSkpO1xuICAgICAgICB0aGlzLmdyZWF0ZXN0Q29tbW9uRGl2aXNvciA9IHRoaXMuY29ubmVjdGlvbnMubWFwKGMgPT4gYy53ZWlnaHQpLnJlZHVjZShnZXRHcmVhdGVzdENvbW1vbkRpdmlzb3IsIDApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1wdGllcyB0aGUgY29ubmVjdGlvbiBwb29sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0Nvbm5lY3Rpb25Qb29sfVxuICAgICAqL1xuICAgIGFzeW5jIGVtcHR5KCkge1xuICAgICAgICBhd2FpdCBzdXBlci5lbXB0eSgpO1xuICAgICAgICB0aGlzLm1heFdlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuZ3JlYXRlc3RDb21tb25EaXZpc29yID0gMDtcbiAgICAgICAgdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmN1cnJlbnRXZWlnaHQgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIENvbm5lY3Rpb25Qb29sIHdpdGggbmV3IGNvbm5lY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHthcnJheX0gYXJyYXkgb2YgY29ubmVjdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7Q29ubmVjdGlvblBvb2x9XG4gICAgICovXG4gICAgdXBkYXRlKGNvbm5lY3Rpb25zKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShjb25uZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbnMuZm9yRWFjaChjb25uZWN0aW9uID0+IHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ud2VpZ2h0ID0gTWF0aC5yb3VuZCgxMDAwIC8gdGhpcy5zaXplKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWF4V2VpZ2h0ID0gTWF0aC5tYXgoLi4uKHRoaXMuY29ubmVjdGlvbnMubWFwKGMgPT4gYy53ZWlnaHQpKSk7XG4gICAgICAgIHRoaXMuZ3JlYXRlc3RDb21tb25EaXZpc29yID0gdGhpcy5jb25uZWN0aW9ucy5tYXAoYyA9PiBjLndlaWdodCkucmVkdWNlKGdldEdyZWF0ZXN0Q29tbW9uRGl2aXNvciwgMCk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5jdXJyZW50V2VpZ2h0ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV2VpZ2h0ZWRDb25uZWN0aW9uUG9vbDtcbmZ1bmN0aW9uIGdldEdyZWF0ZXN0Q29tbW9uRGl2aXNvcihhLCBiKSB7XG4gICAgaWYgKGIgPT09IDApXG4gICAgICAgIHJldHVybiBhO1xuICAgIHJldHVybiBnZXRHcmVhdGVzdENvbW1vbkRpdmlzb3IoYiwgYSAlIGIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2VpZ2h0ZWRDb25uZWN0aW9uUG9vbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/pool/WeightedConnectionPool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/pool/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/pool/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the 'License'); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CloudConnectionPool = exports.ClusterConnectionPool = exports.WeightedConnectionPool = exports.BaseConnectionPool = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nconst BaseConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./BaseConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/BaseConnectionPool.js\"));\nexports.BaseConnectionPool = BaseConnectionPool_1.default;\nconst WeightedConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./WeightedConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/WeightedConnectionPool.js\"));\nexports.WeightedConnectionPool = WeightedConnectionPool_1.default;\nconst ClusterConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./ClusterConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/ClusterConnectionPool.js\"));\nexports.ClusterConnectionPool = ClusterConnectionPool_1.default;\nconst CloudConnectionPool_1 = tslib_1.__importDefault(__webpack_require__(/*! ./CloudConnectionPool */ \"(rsc)/./node_modules/@elastic/transport/lib/pool/CloudConnectionPool.js\"));\nexports.CloudConnectionPool = CloudConnectionPool_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9wb29sL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsNkJBQTZCLEdBQUcsOEJBQThCLEdBQUcsMEJBQTBCO0FBQ3pILGdCQUFnQixtQkFBTyxDQUFDLHVEQUFPO0FBQy9CLHFEQUFxRCxtQkFBTyxDQUFDLG9HQUFzQjtBQUNuRiwwQkFBMEI7QUFDMUIseURBQXlELG1CQUFPLENBQUMsNEdBQTBCO0FBQzNGLDhCQUE4QjtBQUM5Qix3REFBd0QsbUJBQU8sQ0FBQywwR0FBeUI7QUFDekYsNkJBQTZCO0FBQzdCLHNEQUFzRCxtQkFBTyxDQUFDLHNHQUF1QjtBQUNyRiwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy90cmFuc3BvcnQvbGliL3Bvb2wvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpOyB5b3UgbWF5XG4gKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbG91ZENvbm5lY3Rpb25Qb29sID0gZXhwb3J0cy5DbHVzdGVyQ29ubmVjdGlvblBvb2wgPSBleHBvcnRzLldlaWdodGVkQ29ubmVjdGlvblBvb2wgPSBleHBvcnRzLkJhc2VDb25uZWN0aW9uUG9vbCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBCYXNlQ29ubmVjdGlvblBvb2xfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VDb25uZWN0aW9uUG9vbFwiKSk7XG5leHBvcnRzLkJhc2VDb25uZWN0aW9uUG9vbCA9IEJhc2VDb25uZWN0aW9uUG9vbF8xLmRlZmF1bHQ7XG5jb25zdCBXZWlnaHRlZENvbm5lY3Rpb25Qb29sXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9XZWlnaHRlZENvbm5lY3Rpb25Qb29sXCIpKTtcbmV4cG9ydHMuV2VpZ2h0ZWRDb25uZWN0aW9uUG9vbCA9IFdlaWdodGVkQ29ubmVjdGlvblBvb2xfMS5kZWZhdWx0O1xuY29uc3QgQ2x1c3RlckNvbm5lY3Rpb25Qb29sXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9DbHVzdGVyQ29ubmVjdGlvblBvb2xcIikpO1xuZXhwb3J0cy5DbHVzdGVyQ29ubmVjdGlvblBvb2wgPSBDbHVzdGVyQ29ubmVjdGlvblBvb2xfMS5kZWZhdWx0O1xuY29uc3QgQ2xvdWRDb25uZWN0aW9uUG9vbF8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQ2xvdWRDb25uZWN0aW9uUG9vbFwiKSk7XG5leHBvcnRzLkNsb3VkQ29ubmVjdGlvblBvb2wgPSBDbG91ZENvbm5lY3Rpb25Qb29sXzEuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/pool/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/security.js":
/*!*********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/security.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.redactObject = redactObject;\nexports.redactDiagnostic = redactDiagnostic;\nconst secretKeys = [\n    'authorization',\n    'password',\n    'apikey',\n    'x-elastic-app-auth'\n];\n/**\n * Clones an object and recursively loops through all keys, redacting their values if the key matches any of a list of strings.\n * @param obj: Object to clone and redact\n * @param additionalKeys: Extra keys that can be matched for redaction. Does not overwrite the default set.\n */\nfunction redactObject(obj, additionalKeys = []) {\n    const toRedact = [...secretKeys, ...additionalKeys].map(key => key.toLowerCase());\n    // `seen` stores each Object it sees, so we can prevent infinite recursion due to circular references\n    const seen = new Map();\n    return doRedact(obj);\n    function doRedact(obj) {\n        if (typeof obj !== 'object' || obj == null)\n            return obj;\n        const newObj = {};\n        Object.entries(obj).forEach(([key, value]) => {\n            // pull auth info out of URL objects\n            if (value instanceof URL) {\n                value = `${value.origin}${value.pathname}${value.search}`;\n            }\n            else if (typeof value === 'object' && value !== null) {\n                if (Array.isArray(value)) {\n                    // if it's an array, redact each item\n                    value = value.map(v => doRedact(v));\n                }\n                else {\n                    if (seen.get(value) !== true) {\n                        // if this Object hasn't been seen, recursively redact it\n                        seen.set(value, true);\n                        value = doRedact(value);\n                    }\n                    else {\n                        // if it has been seen, set the value that goes in newObj to null\n                        // this is what prevents the circular references\n                        value = null;\n                    }\n                }\n            }\n            // check if redaction is needed for this key\n            if (toRedact.includes(key.toLowerCase())) {\n                newObj[key] = '[redacted]';\n            }\n            else {\n                newObj[key] = value;\n            }\n        });\n        return newObj;\n    }\n}\n/**\n * Redacts a DiagnosticResult object using the provided options.\n * - 'off' does nothing\n * - 'remove' removes most optional properties, replaces non-optional properties with the simplest possible alternative\n * - 'replace' runs `redactObject`, which replaces secret keys with `[redacted]`\n */\nfunction redactDiagnostic(diag, options) {\n    var _a;\n    switch (options.type) {\n        case 'off':\n            break;\n        case 'remove':\n            delete diag.headers;\n            delete diag.meta.sniff;\n            delete diag.meta.request.params.headers;\n            diag.meta.request.options = {};\n            diag.meta.connection = null;\n            break;\n        case 'replace':\n            diag = redactObject(diag, (_a = options.additionalKeys) !== null && _a !== void 0 ? _a : []);\n            break;\n    }\n    return diag;\n}\n//# sourceMappingURL=security.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9zZWN1cml0eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsYUFBYSxFQUFFLGVBQWUsRUFBRSxhQUFhO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy90cmFuc3BvcnQvbGliL3NlY3VyaXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWRhY3RPYmplY3QgPSByZWRhY3RPYmplY3Q7XG5leHBvcnRzLnJlZGFjdERpYWdub3N0aWMgPSByZWRhY3REaWFnbm9zdGljO1xuY29uc3Qgc2VjcmV0S2V5cyA9IFtcbiAgICAnYXV0aG9yaXphdGlvbicsXG4gICAgJ3Bhc3N3b3JkJyxcbiAgICAnYXBpa2V5JyxcbiAgICAneC1lbGFzdGljLWFwcC1hdXRoJ1xuXTtcbi8qKlxuICogQ2xvbmVzIGFuIG9iamVjdCBhbmQgcmVjdXJzaXZlbHkgbG9vcHMgdGhyb3VnaCBhbGwga2V5cywgcmVkYWN0aW5nIHRoZWlyIHZhbHVlcyBpZiB0aGUga2V5IG1hdGNoZXMgYW55IG9mIGEgbGlzdCBvZiBzdHJpbmdzLlxuICogQHBhcmFtIG9iajogT2JqZWN0IHRvIGNsb25lIGFuZCByZWRhY3RcbiAqIEBwYXJhbSBhZGRpdGlvbmFsS2V5czogRXh0cmEga2V5cyB0aGF0IGNhbiBiZSBtYXRjaGVkIGZvciByZWRhY3Rpb24uIERvZXMgbm90IG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBzZXQuXG4gKi9cbmZ1bmN0aW9uIHJlZGFjdE9iamVjdChvYmosIGFkZGl0aW9uYWxLZXlzID0gW10pIHtcbiAgICBjb25zdCB0b1JlZGFjdCA9IFsuLi5zZWNyZXRLZXlzLCAuLi5hZGRpdGlvbmFsS2V5c10ubWFwKGtleSA9PiBrZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgLy8gYHNlZW5gIHN0b3JlcyBlYWNoIE9iamVjdCBpdCBzZWVzLCBzbyB3ZSBjYW4gcHJldmVudCBpbmZpbml0ZSByZWN1cnNpb24gZHVlIHRvIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICBjb25zdCBzZWVuID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBkb1JlZGFjdChvYmopO1xuICAgIGZ1bmN0aW9uIGRvUmVkYWN0KG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7fTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIC8vIHB1bGwgYXV0aCBpbmZvIG91dCBvZiBVUkwgb2JqZWN0c1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBgJHt2YWx1ZS5vcmlnaW59JHt2YWx1ZS5wYXRobmFtZX0ke3ZhbHVlLnNlYXJjaH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGFuIGFycmF5LCByZWRhY3QgZWFjaCBpdGVtXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUubWFwKHYgPT4gZG9SZWRhY3QodikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZW4uZ2V0KHZhbHVlKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBPYmplY3QgaGFzbid0IGJlZW4gc2VlbiwgcmVjdXJzaXZlbHkgcmVkYWN0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuLnNldCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRvUmVkYWN0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0IGhhcyBiZWVuIHNlZW4sIHNldCB0aGUgdmFsdWUgdGhhdCBnb2VzIGluIG5ld09iaiB0byBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIHdoYXQgcHJldmVudHMgdGhlIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHJlZGFjdGlvbiBpcyBuZWVkZWQgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICBpZiAodG9SZWRhY3QuaW5jbHVkZXMoa2V5LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSAnW3JlZGFjdGVkXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG59XG4vKipcbiAqIFJlZGFjdHMgYSBEaWFnbm9zdGljUmVzdWx0IG9iamVjdCB1c2luZyB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cbiAqIC0gJ29mZicgZG9lcyBub3RoaW5nXG4gKiAtICdyZW1vdmUnIHJlbW92ZXMgbW9zdCBvcHRpb25hbCBwcm9wZXJ0aWVzLCByZXBsYWNlcyBub24tb3B0aW9uYWwgcHJvcGVydGllcyB3aXRoIHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBhbHRlcm5hdGl2ZVxuICogLSAncmVwbGFjZScgcnVucyBgcmVkYWN0T2JqZWN0YCwgd2hpY2ggcmVwbGFjZXMgc2VjcmV0IGtleXMgd2l0aCBgW3JlZGFjdGVkXWBcbiAqL1xuZnVuY3Rpb24gcmVkYWN0RGlhZ25vc3RpYyhkaWFnLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIHN3aXRjaCAob3B0aW9ucy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ29mZic6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgIGRlbGV0ZSBkaWFnLmhlYWRlcnM7XG4gICAgICAgICAgICBkZWxldGUgZGlhZy5tZXRhLnNuaWZmO1xuICAgICAgICAgICAgZGVsZXRlIGRpYWcubWV0YS5yZXF1ZXN0LnBhcmFtcy5oZWFkZXJzO1xuICAgICAgICAgICAgZGlhZy5tZXRhLnJlcXVlc3Qub3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgZGlhZy5tZXRhLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlcGxhY2UnOlxuICAgICAgICAgICAgZGlhZyA9IHJlZGFjdE9iamVjdChkaWFnLCAoX2EgPSBvcHRpb25zLmFkZGl0aW9uYWxLZXlzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGRpYWc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWN1cml0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/security.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/lib/symbols.js":
/*!********************************************************!*\
  !*** ./node_modules/@elastic/transport/lib/symbols.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.kOtelTracer = exports.kRetryBackoff = exports.kRedaction = exports.kAcceptHeader = exports.kNdjsonContentType = exports.kJsonContentType = exports.kMaxCompressedResponseSize = exports.kMaxResponseSize = exports.kCaFingerprint = exports.kProductCheck = exports.kStatus = exports.kJsonOptions = exports.kNodeSelector = exports.kNodeFilter = exports.kHeaders = exports.kDiagnostic = exports.kSerializer = exports.kConnectionPool = exports.kContext = exports.kGenerateRequestId = exports.kOpaqueIdPrefix = exports.kName = exports.kMaxRetries = exports.kCompression = exports.kRetryOnTimeout = exports.kRequestTimeout = exports.kSniffEndpoint = exports.kSniffOnConnectionFault = exports.kSniffInterval = exports.kIsSniffing = exports.kNextSniff = exports.kSniffEnabled = void 0;\nexports.kSniffEnabled = Symbol('sniff enabled');\nexports.kNextSniff = Symbol('next sniff');\nexports.kIsSniffing = Symbol('is sniffing');\nexports.kSniffInterval = Symbol('sniff interval');\nexports.kSniffOnConnectionFault = Symbol('sniff on connection fault');\nexports.kSniffEndpoint = Symbol('sniff endpoint');\nexports.kRequestTimeout = Symbol('request timeout');\nexports.kRetryOnTimeout = Symbol('retry on timeout');\nexports.kCompression = Symbol('compression');\nexports.kMaxRetries = Symbol('max retries');\nexports.kName = Symbol('name');\nexports.kOpaqueIdPrefix = Symbol('opaque id prefix');\nexports.kGenerateRequestId = Symbol('generate request id');\nexports.kContext = Symbol('context');\nexports.kConnectionPool = Symbol('connection pool');\nexports.kSerializer = Symbol('serializer');\nexports.kDiagnostic = Symbol('diagnostics');\nexports.kHeaders = Symbol('headers');\nexports.kNodeFilter = Symbol('node filter');\nexports.kNodeSelector = Symbol('node selector');\nexports.kJsonOptions = Symbol('secure json parse options');\nexports.kStatus = Symbol('status');\nexports.kProductCheck = Symbol('product check');\nexports.kCaFingerprint = Symbol('ca fingerprint');\nexports.kMaxResponseSize = Symbol('max response size');\nexports.kMaxCompressedResponseSize = Symbol('max compressed response size');\nexports.kJsonContentType = Symbol('json content type');\nexports.kNdjsonContentType = Symbol('ndjson content type');\nexports.kAcceptHeader = Symbol('accept header');\nexports.kRedaction = Symbol('redaction');\nexports.kRetryBackoff = Symbol('retry backoff');\nexports.kOtelTracer = Symbol('opentelemetry tracer');\n//# sourceMappingURL=symbols.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVsYXN0aWMvdHJhbnNwb3J0L2xpYi9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcsa0JBQWtCLEdBQUcscUJBQXFCLEdBQUcsMEJBQTBCLEdBQUcsd0JBQXdCLEdBQUcsa0NBQWtDLEdBQUcsd0JBQXdCLEdBQUcsc0JBQXNCLEdBQUcscUJBQXFCLEdBQUcsZUFBZSxHQUFHLG9CQUFvQixHQUFHLHFCQUFxQixHQUFHLG1CQUFtQixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLHVCQUF1QixHQUFHLGdCQUFnQixHQUFHLDBCQUEwQixHQUFHLHVCQUF1QixHQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRyxzQkFBc0IsR0FBRywrQkFBK0IsR0FBRyxzQkFBc0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxxQkFBcUI7QUFDbndCLHFCQUFxQjtBQUNyQixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QiwrQkFBK0I7QUFDL0Isc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCLG1CQUFtQjtBQUNuQixhQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQixnQkFBZ0I7QUFDaEIsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLGVBQWU7QUFDZixxQkFBcUI7QUFDckIsc0JBQXNCO0FBQ3RCLHdCQUF3QjtBQUN4QixrQ0FBa0M7QUFDbEMsd0JBQXdCO0FBQ3hCLDBCQUEwQjtBQUMxQixxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluc2ZhbGwvRG93bmxvYWRzL3NlYXJjaC1lbmdpbmUvc2VydmljZXMvd2ViL25vZGVfbW9kdWxlcy9AZWxhc3RpYy90cmFuc3BvcnQvbGliL3N5bWJvbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yXG4gKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aFxuICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHRcbiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXJcbiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXlcbiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMua090ZWxUcmFjZXIgPSBleHBvcnRzLmtSZXRyeUJhY2tvZmYgPSBleHBvcnRzLmtSZWRhY3Rpb24gPSBleHBvcnRzLmtBY2NlcHRIZWFkZXIgPSBleHBvcnRzLmtOZGpzb25Db250ZW50VHlwZSA9IGV4cG9ydHMua0pzb25Db250ZW50VHlwZSA9IGV4cG9ydHMua01heENvbXByZXNzZWRSZXNwb25zZVNpemUgPSBleHBvcnRzLmtNYXhSZXNwb25zZVNpemUgPSBleHBvcnRzLmtDYUZpbmdlcnByaW50ID0gZXhwb3J0cy5rUHJvZHVjdENoZWNrID0gZXhwb3J0cy5rU3RhdHVzID0gZXhwb3J0cy5rSnNvbk9wdGlvbnMgPSBleHBvcnRzLmtOb2RlU2VsZWN0b3IgPSBleHBvcnRzLmtOb2RlRmlsdGVyID0gZXhwb3J0cy5rSGVhZGVycyA9IGV4cG9ydHMua0RpYWdub3N0aWMgPSBleHBvcnRzLmtTZXJpYWxpemVyID0gZXhwb3J0cy5rQ29ubmVjdGlvblBvb2wgPSBleHBvcnRzLmtDb250ZXh0ID0gZXhwb3J0cy5rR2VuZXJhdGVSZXF1ZXN0SWQgPSBleHBvcnRzLmtPcGFxdWVJZFByZWZpeCA9IGV4cG9ydHMua05hbWUgPSBleHBvcnRzLmtNYXhSZXRyaWVzID0gZXhwb3J0cy5rQ29tcHJlc3Npb24gPSBleHBvcnRzLmtSZXRyeU9uVGltZW91dCA9IGV4cG9ydHMua1JlcXVlc3RUaW1lb3V0ID0gZXhwb3J0cy5rU25pZmZFbmRwb2ludCA9IGV4cG9ydHMua1NuaWZmT25Db25uZWN0aW9uRmF1bHQgPSBleHBvcnRzLmtTbmlmZkludGVydmFsID0gZXhwb3J0cy5rSXNTbmlmZmluZyA9IGV4cG9ydHMua05leHRTbmlmZiA9IGV4cG9ydHMua1NuaWZmRW5hYmxlZCA9IHZvaWQgMDtcbmV4cG9ydHMua1NuaWZmRW5hYmxlZCA9IFN5bWJvbCgnc25pZmYgZW5hYmxlZCcpO1xuZXhwb3J0cy5rTmV4dFNuaWZmID0gU3ltYm9sKCduZXh0IHNuaWZmJyk7XG5leHBvcnRzLmtJc1NuaWZmaW5nID0gU3ltYm9sKCdpcyBzbmlmZmluZycpO1xuZXhwb3J0cy5rU25pZmZJbnRlcnZhbCA9IFN5bWJvbCgnc25pZmYgaW50ZXJ2YWwnKTtcbmV4cG9ydHMua1NuaWZmT25Db25uZWN0aW9uRmF1bHQgPSBTeW1ib2woJ3NuaWZmIG9uIGNvbm5lY3Rpb24gZmF1bHQnKTtcbmV4cG9ydHMua1NuaWZmRW5kcG9pbnQgPSBTeW1ib2woJ3NuaWZmIGVuZHBvaW50Jyk7XG5leHBvcnRzLmtSZXF1ZXN0VGltZW91dCA9IFN5bWJvbCgncmVxdWVzdCB0aW1lb3V0Jyk7XG5leHBvcnRzLmtSZXRyeU9uVGltZW91dCA9IFN5bWJvbCgncmV0cnkgb24gdGltZW91dCcpO1xuZXhwb3J0cy5rQ29tcHJlc3Npb24gPSBTeW1ib2woJ2NvbXByZXNzaW9uJyk7XG5leHBvcnRzLmtNYXhSZXRyaWVzID0gU3ltYm9sKCdtYXggcmV0cmllcycpO1xuZXhwb3J0cy5rTmFtZSA9IFN5bWJvbCgnbmFtZScpO1xuZXhwb3J0cy5rT3BhcXVlSWRQcmVmaXggPSBTeW1ib2woJ29wYXF1ZSBpZCBwcmVmaXgnKTtcbmV4cG9ydHMua0dlbmVyYXRlUmVxdWVzdElkID0gU3ltYm9sKCdnZW5lcmF0ZSByZXF1ZXN0IGlkJyk7XG5leHBvcnRzLmtDb250ZXh0ID0gU3ltYm9sKCdjb250ZXh0Jyk7XG5leHBvcnRzLmtDb25uZWN0aW9uUG9vbCA9IFN5bWJvbCgnY29ubmVjdGlvbiBwb29sJyk7XG5leHBvcnRzLmtTZXJpYWxpemVyID0gU3ltYm9sKCdzZXJpYWxpemVyJyk7XG5leHBvcnRzLmtEaWFnbm9zdGljID0gU3ltYm9sKCdkaWFnbm9zdGljcycpO1xuZXhwb3J0cy5rSGVhZGVycyA9IFN5bWJvbCgnaGVhZGVycycpO1xuZXhwb3J0cy5rTm9kZUZpbHRlciA9IFN5bWJvbCgnbm9kZSBmaWx0ZXInKTtcbmV4cG9ydHMua05vZGVTZWxlY3RvciA9IFN5bWJvbCgnbm9kZSBzZWxlY3RvcicpO1xuZXhwb3J0cy5rSnNvbk9wdGlvbnMgPSBTeW1ib2woJ3NlY3VyZSBqc29uIHBhcnNlIG9wdGlvbnMnKTtcbmV4cG9ydHMua1N0YXR1cyA9IFN5bWJvbCgnc3RhdHVzJyk7XG5leHBvcnRzLmtQcm9kdWN0Q2hlY2sgPSBTeW1ib2woJ3Byb2R1Y3QgY2hlY2snKTtcbmV4cG9ydHMua0NhRmluZ2VycHJpbnQgPSBTeW1ib2woJ2NhIGZpbmdlcnByaW50Jyk7XG5leHBvcnRzLmtNYXhSZXNwb25zZVNpemUgPSBTeW1ib2woJ21heCByZXNwb25zZSBzaXplJyk7XG5leHBvcnRzLmtNYXhDb21wcmVzc2VkUmVzcG9uc2VTaXplID0gU3ltYm9sKCdtYXggY29tcHJlc3NlZCByZXNwb25zZSBzaXplJyk7XG5leHBvcnRzLmtKc29uQ29udGVudFR5cGUgPSBTeW1ib2woJ2pzb24gY29udGVudCB0eXBlJyk7XG5leHBvcnRzLmtOZGpzb25Db250ZW50VHlwZSA9IFN5bWJvbCgnbmRqc29uIGNvbnRlbnQgdHlwZScpO1xuZXhwb3J0cy5rQWNjZXB0SGVhZGVyID0gU3ltYm9sKCdhY2NlcHQgaGVhZGVyJyk7XG5leHBvcnRzLmtSZWRhY3Rpb24gPSBTeW1ib2woJ3JlZGFjdGlvbicpO1xuZXhwb3J0cy5rUmV0cnlCYWNrb2ZmID0gU3ltYm9sKCdyZXRyeSBiYWNrb2ZmJyk7XG5leHBvcnRzLmtPdGVsVHJhY2VyID0gU3ltYm9sKCdvcGVudGVsZW1ldHJ5IHRyYWNlcicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3ltYm9scy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@elastic/transport/lib/symbols.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/elasticsearch/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@elastic/elasticsearch/package.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@elastic/elasticsearch","version":"8.16.2","versionCanary":"8.16.2-canary.0","description":"The official Elasticsearch client for Node.js","main":"./index.js","types":"index.d.ts","exports":{"require":"./index.js","import":"./index.js","types":"./index.d.ts"},"scripts":{"test":"npm run build && npm run lint && tap","test:unit":"npm run build && tap","test:unit-bun":"bun run build && bunx tap","test:esm":"npm run build && cd test/esm/ && npm install && node test-import.mjs","test:coverage-100":"npm run build && tap --coverage --100","test:coverage-report":"npm run build && tap --coverage && nyc report --reporter=text-lcov > coverage.lcov","test:coverage-ui":"npm run build && tap --coverage --coverage-report=html","test:integration":"tsc && node test/integration/index.js","lint":"ts-standard src","lint:fix":"ts-standard --fix src","license-checker":"license-checker --production --onlyAllow=\'MIT;Apache-2.0;Apache1.1;ISC;BSD-3-Clause;BSD-2-Clause;0BSD\'","prebuild":"npm run clean-build && npm run lint","build":"tsc && rm lib/package.json && mv lib/src/* lib/ && rm -rf lib/src","clean-build":"rimraf ./lib && mkdir lib","prepublishOnly":"npm run build"},"keywords":["elasticsearch","elastic","kibana","mapping","REST","search","client","index"],"contributors":[{"name":"Elastic Client Library Maintainers","company":"Elastic BV"}],"license":"Apache-2.0","repository":{"type":"git","url":"https://github.com/elastic/elasticsearch-js.git"},"bugs":{"url":"https://github.com/elastic/elasticsearch-js/issues"},"homepage":"http://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html","engines":{"node":">=18"},"devDependencies":{"@elastic/request-converter":"^8.16.1","@sinonjs/fake-timers":"github:sinonjs/fake-timers#0bfffc1","@types/debug":"^4.1.7","@types/ms":"^0.7.31","@types/node":"^18.19.55","@types/sinonjs__fake-timers":"^8.1.2","@types/split2":"^3.2.1","@types/stoppable":"^1.1.1","@types/tap":"^15.0.7","chai":"^4.3.7","cross-zip":"^4.0.0","desm":"^1.2.0","into-stream":"^7.0.0","js-yaml":"^4.1.0","license-checker":"^25.0.1","minimist":"^1.2.6","ms":"^2.1.3","node-abort-controller":"^3.0.1","node-fetch":"^2.6.7","ora":"^5.4.1","proxy":"^1.0.2","rimraf":"^3.0.2","semver":"^7.3.7","split2":"^4.1.0","stoppable":"^1.1.0","tap":"^21.0.1","ts-node":"^10.7.0","ts-standard":"^12.0.2","typescript":"^4.6.4","workq":"^3.0.0","xmlbuilder2":"^3.0.2","zx":"^7.2.2"},"dependencies":{"@elastic/transport":"^8.9.1","apache-arrow":"^18.0.0","tslib":"^2.4.0"},"tap":{"disable-coverage":true,"files":["test/unit/{*,**/*}.test.ts"]}}');

/***/ }),

/***/ "(rsc)/./node_modules/@elastic/transport/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@elastic/transport/package.json ***!
  \******************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@elastic/transport","version":"8.9.1","description":"Transport classes and utilities shared among Node.js Elastic client libraries","main":"./index.js","types":"index.d.ts","exports":{".":"./index.js","./package.json":"./package.json","./connection/BaseConnection":"./lib/connection/BaseConnection.js","./lib/connection/BaseConnection":"./lib/connection/BaseConnection.js","./pool/BaseConnectionPool":"./lib/pool/BaseConnectionPool.js","./lib/pool/BaseConnectionPool":"./lib/pool/BaseConnectionPool.js","./pool/CloudConnectionPool":"./lib/pool/CloudConnectionPool.js","./lib/pool/CloudConnectionPool":"./lib/pool/CloudConnectionPool.js","./pool/ClusterConnectionPool":"./lib/pool/ClusterConnectionPool.js","./lib/pool/ClusterConnectionPool":"./lib/pool/ClusterConnectionPool.js","./Diagnostic":"./lib/Diagnostic.js","./lib/Diagnostic":"./lib/Diagnostic.js","./errors":"./lib/errors.js","./lib/errors":"./lib/errors.js","./connection/HttpConnection":"./lib/connection/HttpConnection.js","./lib/connection/HttpConnection":"./lib/connection/HttpConnection.js","./connection":"./lib/connection/index.js","./lib/connection":"./lib/connection/index.js","./pool":"./lib/pool/index.js","./lib/pool":"./lib/pool/index.js","./security":"./lib/security.js","./lib/security":"./lib/security.js","./Serializer":"./lib/Serializer.js","./lib/Serializer":"./lib/Serializer.js","./symbols":"./lib/symbols.js","./lib/symbols":"./lib/symbols.js","./Transport":"./lib/Transport.js","./lib/Transport":"./lib/Transport.js","./types":"./lib/types.js","./lib/types":"./lib/types.js","./connection/UndiciConnection":"./lib/connection/UndiciConnection.js","./lib/connection/UndiciConnection":"./lib/connection/UndiciConnection.js","./pool/WeightedConnectionPool":"./lib/pool/WeightedConnectionPool.js","./lib/pool/WeightedConnectionPool":"./lib/pool/WeightedConnectionPool.js"},"scripts":{"test":"npm run build && npm run lint && tap test/{unit,acceptance}/{*,**/*}.test.ts","test:unit":"npm run build && tap test/unit/{*,**/*}.test.ts --disable-coverage","test:acceptance":"npm run build && tap test/acceptance/*.test.ts --disable-coverage","test:coverage-100":"npm run build && tap test/{unit,acceptance}/{*,**/*}.test.ts --show-full-coverage","test:coverage-report":"npm test && tap report --coverage-report=lcov","test:coverage-ui":"npm run build && tap test/{unit,acceptance}/{*,**/*}.test.ts --coverage-report=html","lint":"ts-standard src","lint:fix":"ts-standard --fix src","license-checker":"license-checker --production --onlyAllow=\'MIT;Apache-2.0;Apache1.1;ISC;BSD-3-Clause;BSD-2-Clause;0BSD\'","prebuild":"npm run clean-build && npm run lint","build":"tsc","clean-build":"rimraf ./lib && mkdir lib","prepublishOnly":"npm run build"},"repository":{"type":"git","url":"git+https://github.com/elastic/elastic-transport-js.git"},"keywords":[],"author":{"name":"Elastic Client Library Maintainers","company":"Elastic BV"},"license":"Apache-2.0","bugs":{"url":"https://github.com/elastic/elastic-transport-js/issues"},"homepage":"https://github.com/elastic/elastic-transport-js#readme","engines":{"node":">=18"},"devDependencies":{"@opentelemetry/sdk-trace-base":"1.27.0","@sinonjs/fake-timers":"13.0.4","@tapjs/clock":"3.0.0","@types/debug":"4.1.12","@types/ms":"0.7.34","@types/node":"20.17.0","@types/sinonjs__fake-timers":"8.1.5","@types/stoppable":"1.1.3","@types/tap":"15.0.12","into-stream":"6.0.0","license-checker":"25.0.1","node-abort-controller":"3.1.1","proxy":"1.0.2","rimraf":"6.0.1","stoppable":"1.1.0","tap":"21.0.1","ts-node":"10.9.2","ts-standard":"12.0.2","typescript":"5.6.3","workq":"3.0.0"},"dependencies":{"@opentelemetry/api":"1.x","debug":"^4.3.4","hpagent":"^1.0.0","ms":"^2.1.3","secure-json-parse":"^2.4.0","tslib":"^2.4.0","undici":"^6.12.0"},"tap":{"allow-incomplete-coverage":true,"plugin":["@tapjs/clock","@tapjs/before"]}}');

/***/ })

};
;