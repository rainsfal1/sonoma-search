"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hpagent";
exports.ids = ["vendor-chunks/hpagent"];
exports.modules = {

/***/ "(rsc)/./node_modules/hpagent/index.js":
/*!***************************************!*\
  !*** ./node_modules/hpagent/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst https = __webpack_require__(/*! https */ \"https\")\nconst http = __webpack_require__(/*! http */ \"http\")\nconst { URL } = __webpack_require__(/*! url */ \"url\")\n\nclass HttpProxyAgent extends http.Agent {\n  constructor (options) {\n    const { proxy, proxyRequestOptions, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n    this.proxyRequestOptions = proxyRequestOptions || {}\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { ...this.proxyRequestOptions.headers, connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false,\n      timeout: options.timeout || 0\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        callback(null, socket)\n      } else {\n        socket.destroy()\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'))\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nclass HttpsProxyAgent extends https.Agent {\n  constructor (options) {\n    const { proxy, proxyRequestOptions, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n    this.proxyRequestOptions = proxyRequestOptions || {}\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { ...this.proxyRequestOptions.headers, connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false,\n      timeout: options.timeout || 0\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    // Necessary for the TLS check with the proxy to succeed.\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({ ...options, socket })\n        callback(null, secureSocket)\n      } else {\n        socket.destroy()\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'))\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHBhZ2VudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0IsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLFFBQVEsTUFBTSxFQUFFLG1CQUFPLENBQUMsZ0JBQUs7O0FBRTdCO0FBQ0E7QUFDQSxZQUFZLHNDQUFzQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhLEdBQUcsYUFBYTtBQUM1QztBQUNBLGlCQUFpQixtR0FBbUcsYUFBYSxHQUFHLGFBQWEsR0FBRztBQUNwSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsOENBQThDLEdBQUcsOENBQThDO0FBQ25JLCtEQUErRCxPQUFPO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxzQ0FBc0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYSxHQUFHLGFBQWE7QUFDNUM7QUFDQSxpQkFBaUIsbUdBQW1HLGFBQWEsR0FBRyxhQUFhLEdBQUc7QUFDcEo7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLDhDQUE4QyxHQUFHLDhDQUE4QztBQUNuSSwrREFBK0QsT0FBTztBQUN0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG9CQUFvQjtBQUMxRTtBQUNBLFFBQVE7QUFDUjtBQUNBLDRDQUE0QyxvQkFBb0I7QUFDaEU7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbnNmYWxsL0Rvd25sb2Fkcy9zZWFyY2gtZW5naW5lL3NlcnZpY2VzL3dlYi9ub2RlX21vZHVsZXMvaHBhZ2VudC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpXG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpXG5jb25zdCB7IFVSTCB9ID0gcmVxdWlyZSgndXJsJylcblxuY2xhc3MgSHR0cFByb3h5QWdlbnQgZXh0ZW5kcyBodHRwLkFnZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHByb3h5LCBwcm94eVJlcXVlc3RPcHRpb25zLCAuLi5vcHRzIH0gPSBvcHRpb25zXG4gICAgc3VwZXIob3B0cylcbiAgICB0aGlzLnByb3h5ID0gdHlwZW9mIHByb3h5ID09PSAnc3RyaW5nJ1xuICAgICAgPyBuZXcgVVJMKHByb3h5KVxuICAgICAgOiBwcm94eVxuICAgIHRoaXMucHJveHlSZXF1ZXN0T3B0aW9ucyA9IHByb3h5UmVxdWVzdE9wdGlvbnMgfHwge31cbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLnByb3h5UmVxdWVzdE9wdGlvbnMsXG4gICAgICBtZXRob2Q6ICdDT05ORUNUJyxcbiAgICAgIGhvc3Q6IHRoaXMucHJveHkuaG9zdG5hbWUsXG4gICAgICBwb3J0OiB0aGlzLnByb3h5LnBvcnQsXG4gICAgICBwYXRoOiBgJHtvcHRpb25zLmhvc3R9OiR7b3B0aW9ucy5wb3J0fWAsXG4gICAgICBzZXRIb3N0OiBmYWxzZSxcbiAgICAgIGhlYWRlcnM6IHsgLi4udGhpcy5wcm94eVJlcXVlc3RPcHRpb25zLmhlYWRlcnMsIGNvbm5lY3Rpb246IHRoaXMua2VlcEFsaXZlID8gJ2tlZXAtYWxpdmUnIDogJ2Nsb3NlJywgaG9zdDogYCR7b3B0aW9ucy5ob3N0fToke29wdGlvbnMucG9ydH1gIH0sXG4gICAgICBhZ2VudDogZmFsc2UsXG4gICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgfHwgMFxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3h5LnVzZXJuYW1lIHx8IHRoaXMucHJveHkucGFzc3dvcmQpIHtcbiAgICAgIGNvbnN0IGJhc2U2NCA9IEJ1ZmZlci5mcm9tKGAke2RlY29kZVVSSUNvbXBvbmVudCh0aGlzLnByb3h5LnVzZXJuYW1lIHx8ICcnKX06JHtkZWNvZGVVUklDb21wb25lbnQodGhpcy5wcm94eS5wYXNzd29yZCB8fCAnJyl9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydwcm94eS1hdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHtiYXNlNjR9YFxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3h5LnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgcmVxdWVzdE9wdGlvbnMuc2VydmVybmFtZSA9IHRoaXMucHJveHkuaG9zdG5hbWVcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gKHRoaXMucHJveHkucHJvdG9jb2wgPT09ICdodHRwOicgPyBodHRwIDogaHR0cHMpLnJlcXVlc3QocmVxdWVzdE9wdGlvbnMpXG4gICAgcmVxdWVzdC5vbmNlKCdjb25uZWN0JywgKHJlc3BvbnNlLCBzb2NrZXQsIGhlYWQpID0+IHtcbiAgICAgIHJlcXVlc3QucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBzb2NrZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb2NrZXQuZGVzdHJveSgpXG4gICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihgQmFkIHJlc3BvbnNlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCksIG51bGwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJlcXVlc3Qub25jZSgndGltZW91dCcsICgpID0+IHtcbiAgICAgIHJlcXVlc3QuZGVzdHJveShuZXcgRXJyb3IoJ1Byb3h5IHRpbWVvdXQnKSlcbiAgICB9KVxuXG4gICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICByZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgICBjYWxsYmFjayhlcnIsIG51bGwpXG4gICAgfSlcblxuICAgIHJlcXVlc3QuZW5kKClcbiAgfVxufVxuXG5jbGFzcyBIdHRwc1Byb3h5QWdlbnQgZXh0ZW5kcyBodHRwcy5BZ2VudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgY29uc3QgeyBwcm94eSwgcHJveHlSZXF1ZXN0T3B0aW9ucywgLi4ub3B0cyB9ID0gb3B0aW9uc1xuICAgIHN1cGVyKG9wdHMpXG4gICAgdGhpcy5wcm94eSA9IHR5cGVvZiBwcm94eSA9PT0gJ3N0cmluZydcbiAgICAgID8gbmV3IFVSTChwcm94eSlcbiAgICAgIDogcHJveHlcbiAgICB0aGlzLnByb3h5UmVxdWVzdE9wdGlvbnMgPSBwcm94eVJlcXVlc3RPcHRpb25zIHx8IHt9XG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5wcm94eVJlcXVlc3RPcHRpb25zLFxuICAgICAgbWV0aG9kOiAnQ09OTkVDVCcsXG4gICAgICBob3N0OiB0aGlzLnByb3h5Lmhvc3RuYW1lLFxuICAgICAgcG9ydDogdGhpcy5wcm94eS5wb3J0LFxuICAgICAgcGF0aDogYCR7b3B0aW9ucy5ob3N0fToke29wdGlvbnMucG9ydH1gLFxuICAgICAgc2V0SG9zdDogZmFsc2UsXG4gICAgICBoZWFkZXJzOiB7IC4uLnRoaXMucHJveHlSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLCBjb25uZWN0aW9uOiB0aGlzLmtlZXBBbGl2ZSA/ICdrZWVwLWFsaXZlJyA6ICdjbG9zZScsIGhvc3Q6IGAke29wdGlvbnMuaG9zdH06JHtvcHRpb25zLnBvcnR9YCB9LFxuICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgdGltZW91dDogb3B0aW9ucy50aW1lb3V0IHx8IDBcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm94eS51c2VybmFtZSB8fCB0aGlzLnByb3h5LnBhc3N3b3JkKSB7XG4gICAgICBjb25zdCBiYXNlNjQgPSBCdWZmZXIuZnJvbShgJHtkZWNvZGVVUklDb21wb25lbnQodGhpcy5wcm94eS51c2VybmFtZSB8fCAnJyl9OiR7ZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMucHJveHkucGFzc3dvcmQgfHwgJycpfWApLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgcmVxdWVzdE9wdGlvbnMuaGVhZGVyc1sncHJveHktYXV0aG9yaXphdGlvbiddID0gYEJhc2ljICR7YmFzZTY0fWBcbiAgICB9XG5cbiAgICAvLyBOZWNlc3NhcnkgZm9yIHRoZSBUTFMgY2hlY2sgd2l0aCB0aGUgcHJveHkgdG8gc3VjY2VlZC5cbiAgICBpZiAodGhpcy5wcm94eS5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgIHJlcXVlc3RPcHRpb25zLnNlcnZlcm5hbWUgPSB0aGlzLnByb3h5Lmhvc3RuYW1lXG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdCA9ICh0aGlzLnByb3h5LnByb3RvY29sID09PSAnaHR0cDonID8gaHR0cCA6IGh0dHBzKS5yZXF1ZXN0KHJlcXVlc3RPcHRpb25zKVxuICAgIHJlcXVlc3Qub25jZSgnY29ubmVjdCcsIChyZXNwb25zZSwgc29ja2V0LCBoZWFkKSA9PiB7XG4gICAgICByZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgICBzb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgY29uc3Qgc2VjdXJlU29ja2V0ID0gc3VwZXIuY3JlYXRlQ29ubmVjdGlvbih7IC4uLm9wdGlvbnMsIHNvY2tldCB9KVxuICAgICAgICBjYWxsYmFjayhudWxsLCBzZWN1cmVTb2NrZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb2NrZXQuZGVzdHJveSgpXG4gICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihgQmFkIHJlc3BvbnNlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCksIG51bGwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJlcXVlc3Qub25jZSgndGltZW91dCcsICgpID0+IHtcbiAgICAgIHJlcXVlc3QuZGVzdHJveShuZXcgRXJyb3IoJ1Byb3h5IHRpbWVvdXQnKSlcbiAgICB9KVxuXG4gICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICByZXF1ZXN0LnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgICBjYWxsYmFjayhlcnIsIG51bGwpXG4gICAgfSlcblxuICAgIHJlcXVlc3QuZW5kKClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSHR0cFByb3h5QWdlbnQsXG4gIEh0dHBzUHJveHlBZ2VudFxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hpagent/index.js\n");

/***/ })

};
;